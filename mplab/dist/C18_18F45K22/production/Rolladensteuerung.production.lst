

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Apr 08 22:09:38 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1
    66                           	psect	text53,global,reloc=2,class=CODE,delta=1
    67                           	psect	text54,global,reloc=2,class=CODE,delta=1
    68                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    69                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    70                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    71  0000                     
    72                           ; Version 1.45
    73                           ; Generated 16/11/2017 GMT
    74                           ; 
    75                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    76                           ; All rights reserved.
    77                           ; 
    78                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    79                           ; 
    80                           ; Redistribution and use in source and binary forms, with or without modification, are
    81                           ; permitted provided that the following conditions are met:
    82                           ; 
    83                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    84                           ;        conditions and the following disclaimer.
    85                           ; 
    86                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    87                           ;        of conditions and the following disclaimer in the documentation and/or other
    88                           ;        materials provided with the distribution.
    89                           ; 
    90                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    91                           ;        software without specific prior written permission.
    92                           ; 
    93                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    94                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    95                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    96                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    97                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    98                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    99                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   100                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   101                           ; 
   102                           ; 
   103                           ; Code-generator required, PIC18F45K22 Definitions
   104                           ; 
   105                           ; SFR Addresses
   106  0000                     _ANSELD	set	3899
   107  0000                     _ANSELC	set	3898
   108  0000                     _ANSELB	set	3897
   109  0000                     _ANSELA	set	3896
   110  0000                     _PIE3bits	set	4003
   111  0000                     _IPR3bits	set	4005
   112  0000                     _SSP2CON1	set	3948
   113  0000                     _SSP2ADD	set	3950
   114  0000                     _SSP2STAT	set	3949
   115  0000                     _SSP2MSK	set	3946
   116  0000                     _SSP2CON3	set	3945
   117  0000                     _SSP2CON2bits	set	3947
   118  0000                     _SSP2CON2	set	3947
   119  0000                     _TRISDbits	set	3989
   120  0000                     _PORTDbits	set	3971
   121  0000                     _EECON2	set	4007
   122  0000                     _EEDATA	set	4008
   123  0000                     _EEADR	set	4009
   124  0000                     _EECON1bits	set	4006
   125  0000                     _TXREG1	set	4013
   126  0000                     _RCSTA1bits	set	4011
   127  0000                     _SPBRGH	set	4016
   128  0000                     _SPBRG1	set	4015
   129  0000                     _BAUDCONbits	set	4024
   130  0000                     _PORTAbits	set	3968
   131  0000                     _LATCbits	set	3979
   132  0000                     _LATDbits	set	3980
   133  0000                     _LATBbits	set	3978
   134  0000                     _PIE1bits	set	3997
   135  0000                     _IPR1bits	set	3999
   136  0000                     _T1CONbits	set	4045
   137  0000                     _INTCON2bits	set	4081
   138  0000                     _T0CONbits	set	4053
   139  0000                     _TRISD	set	3989
   140  0000                     _PORTD	set	3971
   141  0000                     _LATD	set	3980
   142  0000                     _TRISC	set	3988
   143  0000                     _PORTC	set	3970
   144  0000                     _LATC	set	3979
   145  0000                     _TRISB	set	3987
   146  0000                     _LATB	set	3978
   147  0000                     _PORTB	set	3969
   148  0000                     _TRISA	set	3986
   149  0000                     _PORTA	set	3968
   150  0000                     _LATA	set	3977
   151  0000                     _CM2CON0	set	3960
   152  0000                     _CM1CON0	set	3961
   153  0000                     _OSCCONbits	set	4051
   154  0000                     _LATAbits	set	3977
   155  0000                     _RCONbits	set	4048
   156  0000                     _TMR1L	set	4046
   157  0000                     _TMR1H	set	4047
   158  0000                     _TMR0L	set	4054
   159  0000                     _TMR0H	set	4055
   160  0000                     _INTCONbits	set	4082
   161  0000                     _SSP2CON1bits	set	3948
   162  0000                     _SSP2BUF	set	3951
   163  0000                     _SSP2STATbits	set	3949
   164  0000                     _PIR3bits	set	4004
   165  0000                     _RCREG	set	4014
   166  0000                     _PIR1bits	set	3998
   167  0000                     _PEIE	set	32662
   168                           
   169                           ; #config settings
   170  0000                     
   171                           	psect	cinit
   172  000F7C                     __pcinit:
   173                           	opt stack 0
   174  000F7C                     start_initialization:
   175                           	opt stack 0
   176  000F7C                     __initialization:
   177                           	opt stack 0
   178                           
   179                           ; Clear objects allocated to BANK1 (240 bytes)
   180  000F7C  EE01  F000         	lfsr	0,__pbssBANK1
   181  000F80  0EF0               	movlw	240
   182  000F82                     clear_0:
   183  000F82  6AEE               	clrf	postinc0,c
   184  000F84  06E8               	decf	wreg,f,c
   185  000F86  E1FD               	bnz	clear_0
   186                           
   187                           ; Clear objects allocated to BANK0 (151 bytes)
   188  000F88  EE00  F060         	lfsr	0,__pbssBANK0
   189  000F8C  0E97               	movlw	151
   190  000F8E                     clear_1:
   191  000F8E  6AEE               	clrf	postinc0,c
   192  000F90  06E8               	decf	wreg,f,c
   193  000F92  E1FD               	bnz	clear_1
   194                           
   195                           ; Clear objects allocated to COMRAM (36 bytes)
   196  000F94  EE00  F001         	lfsr	0,__pbssCOMRAM
   197  000F98  0E24               	movlw	36
   198  000F9A                     clear_2:
   199  000F9A  6AEE               	clrf	postinc0,c
   200  000F9C  06E8               	decf	wreg,f,c
   201  000F9E  E1FD               	bnz	clear_2
   202  000FA0                     end_of_initialization:
   203                           	opt stack 0
   204  000FA0                     __end_of__initialization:
   205                           	opt stack 0
   206  000FA0  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   207  000FA2  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   208  000FA4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   209  000FA6  6EF8               	movwf	tblptru,c
   210  000FA8  0100               	movlb	0
   211  000FAA  EF2C  F003         	goto	_main	;jump to C main() function
   212                           tblptru	equ	0xFF8
   213                           postinc0	equ	0xFEE
   214                           wreg	equ	0xFE8
   215                           
   216                           	psect	bssCOMRAM
   217  000001                     __pbssCOMRAM:
   218                           	opt stack 0
   219  000001                     _entprellCounter:
   220                           	opt stack 0
   221  000001                     	ds	2
   222  000003                     _fifo3Out:
   223                           	opt stack 0
   224  000003                     	ds	1
   225  000004                     _fifo2Out:
   226                           	opt stack 0
   227  000004                     	ds	1
   228  000005                     _fifo1Out:
   229                           	opt stack 0
   230  000005                     	ds	1
   231  000006                     _fifo3In:
   232                           	opt stack 0
   233  000006                     	ds	1
   234  000007                     _fifo2In:
   235                           	opt stack 0
   236  000007                     	ds	1
   237  000008                     _fifo1In:
   238                           	opt stack 0
   239  000008                     	ds	1
   240  000009                     _help:
   241                           	opt stack 0
   242  000009                     	ds	1
   243  00000A                     _myCounter:
   244                           	opt stack 0
   245  00000A                     	ds	1
   246  00000B                     _testLevel:
   247                           	opt stack 0
   248  00000B                     	ds	1
   249  00000C                     _dummy:
   250                           	opt stack 0
   251  00000C                     	ds	1
   252  00000D                     _spiChecksum:
   253                           	opt stack 0
   254  00000D                     	ds	1
   255  00000E                     _spiCount:
   256                           	opt stack 0
   257  00000E                     	ds	1
   258  00000F                     _spiCommand:
   259                           	opt stack 0
   260  00000F                     	ds	1
   261  000010                     _spiState:
   262                           	opt stack 0
   263  000010                     	ds	1
   264  000011                     _bStoreDone:
   265                           	opt stack 0
   266  000011                     	ds	1
   267  000012                     _bSceneChanged:
   268                           	opt stack 0
   269  000012                     	ds	1
   270  000013                     _downState:
   271                           	opt stack 0
   272  000013                     	ds	1
   273  000014                     _upState:
   274                           	opt stack 0
   275  000014                     	ds	1
   276  000015                     _lastPressedKey:
   277                           	opt stack 0
   278  000015                     	ds	1
   279  000016                     _shutter:
   280                           	opt stack 0
   281  000016                     	ds	15
   282                           tblptru	equ	0xFF8
   283                           postinc0	equ	0xFEE
   284                           wreg	equ	0xFE8
   285                           
   286                           	psect	bssBANK0
   287  000060                     __pbssBANK0:
   288                           	opt stack 0
   289  000060                     _spiData:
   290                           	opt stack 0
   291  000060                     	ds	64
   292  0000A0                     _data:
   293                           	opt stack 0
   294  0000A0                     	ds	32
   295  0000C0                     _fifo3:
   296                           	opt stack 0
   297  0000C0                     	ds	16
   298  0000D0                     _fifo2:
   299                           	opt stack 0
   300  0000D0                     	ds	16
   301  0000E0                     _fifo1:
   302                           	opt stack 0
   303  0000E0                     	ds	16
   304  0000F0                     _button:
   305                           	opt stack 0
   306  0000F0                     	ds	1
   307  0000F1                     _device:
   308                           	opt stack 0
   309  0000F1                     	ds	1
   310  0000F2                     _protocolState:
   311                           	opt stack 0
   312  0000F2                     	ds	1
   313  0000F3                     _debugCount:
   314                           	opt stack 0
   315  0000F3                     	ds	1
   316  0000F4                     _c:
   317                           	opt stack 0
   318  0000F4                     	ds	1
   319  0000F5                     _bShutterTimer:
   320                           	opt stack 0
   321  0000F5                     	ds	1
   322  0000F6                     _bButtonTimer:
   323                           	opt stack 0
   324  0000F6                     	ds	1
   325                           tblptru	equ	0xFF8
   326                           postinc0	equ	0xFEE
   327                           wreg	equ	0xFE8
   328                           
   329                           	psect	bssBANK1
   330  000100                     __pbssBANK1:
   331                           	opt stack 0
   332  000100                     _buttons:
   333                           	opt stack 0
   334  000100                     	ds	240
   335                           tblptru	equ	0xFF8
   336                           postinc0	equ	0xFEE
   337                           wreg	equ	0xFE8
   338                           
   339                           	psect	cstackBANK2
   340  000200                     __pcstackBANK2:
   341                           	opt stack 0
   342  000200                     ??_low_isr:
   343                           
   344                           ; 1 bytes @ 0x0
   345  000200                     	ds	21
   346                           tblptru	equ	0xFF8
   347                           postinc0	equ	0xFEE
   348                           wreg	equ	0xFE8
   349                           
   350                           	psect	cstackBANK0
   351  0000F7                     __pcstackBANK0:
   352                           	opt stack 0
   353  0000F7                     main@recv:
   354                           	opt stack 0
   355                           
   356                           ; 2 bytes @ 0x0
   357  0000F7                     	ds	2
   358                           tblptru	equ	0xFF8
   359                           postinc0	equ	0xFEE
   360                           wreg	equ	0xFE8
   361                           
   362                           	psect	cstackCOMRAM
   363  000025                     __pcstackCOMRAM:
   364                           	opt stack 0
   365  000025                     ??_fifo1Put:
   366  000025                     ??_fifo2Put:
   367  000025                     ??i2_fifo3Get:
   368  000025                     ??i2_fifo3Empty:
   369                           
   370                           ; 1 bytes @ 0x0
   371  000025                     	ds	2
   372  000027                     fifo1Put@in:
   373                           	opt stack 0
   374  000027                     fifo2Put@in:
   375                           	opt stack 0
   376                           
   377                           ; 1 bytes @ 0x2
   378  000027                     	ds	1
   379  000028                     ??_high_isr:
   380                           
   381                           ; 1 bytes @ 0x3
   382  000028                     	ds	18
   383  00003A                     high_isr@data:
   384                           	opt stack 0
   385                           
   386                           ; 1 bytes @ 0x15
   387  00003A                     	ds	1
   388  00003B                     ??_fifo3Empty:
   389  00003B                     ??_fifo3Get:
   390  00003B                     ??_initShutterStateMachine:
   391  00003B                     ??_fifo1Empty:
   392  00003B                     ??_fifo1Get:
   393  00003B                     ??_fifo2Get:
   394  00003B                     ??_fifo2Empty:
   395  00003B                     ??_fifo3Put:
   396  00003B                     ?___wmul:
   397                           	opt stack 0
   398  00003B                     initButtonTimer@i:
   399                           	opt stack 0
   400  00003B                     commandShutterUp@shutternumber:
   401                           	opt stack 0
   402  00003B                     commandShutterDown@shutternumber:
   403                           	opt stack 0
   404  00003B                     fehler@ls:
   405                           	opt stack 0
   406  00003B                     shutterOn@shutternumber:
   407                           	opt stack 0
   408  00003B                     shutterOff@shutternumber:
   409                           	opt stack 0
   410  00003B                     shutterDirectionUp@shutternumber:
   411                           	opt stack 0
   412  00003B                     shutterDirectionDown@shutternumber:
   413                           	opt stack 0
   414  00003B                     initButtonMatrix@c:
   415                           	opt stack 0
   416  00003B                     eepromWrite@data:
   417                           	opt stack 0
   418  00003B                     eepromRead@address:
   419                           	opt stack 0
   420  00003B                     initI2CSlave@adress:
   421                           	opt stack 0
   422  00003B                     getShutterstatus@sp:
   423                           	opt stack 0
   424  00003B                     ___wmul@multiplier:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0x16
   428  00003B                     	ds	1
   429  00003C                     initShutterStateMachine@i:
   430                           	opt stack 0
   431  00003C                     fehler@modUpDown:
   432                           	opt stack 0
   433  00003C                     initButtonMatrix@i:
   434                           	opt stack 0
   435  00003C                     getKeyForShutter@shutter:
   436                           	opt stack 0
   437  00003C                     readShutterGroupByte@which:
   438                           	opt stack 0
   439  00003C                     findShuttergroupButton@button:
   440                           	opt stack 0
   441  00003C                     eepromWrite@address:
   442                           	opt stack 0
   443  00003C                     commandShutterUp@sp:
   444                           	opt stack 0
   445  00003C                     commandShutterDown@sp:
   446                           	opt stack 0
   447                           
   448                           ; 2 bytes @ 0x17
   449  00003C                     	ds	1
   450  00003D                     testShortMove@shutternumber:
   451                           	opt stack 0
   452  00003D                     getShutterstatus@which:
   453                           	opt stack 0
   454  00003D                     fehler@lastState:
   455                           	opt stack 0
   456  00003D                     setKeyForShutter@key:
   457                           	opt stack 0
   458  00003D                     storeShutterGroup@bitmask:
   459                           	opt stack 0
   460  00003D                     readShutterGroupByte@number:
   461                           	opt stack 0
   462  00003D                     findShuttergroupButton@i:
   463                           	opt stack 0
   464  00003D                     fifo3Put@in:
   465                           	opt stack 0
   466  00003D                     ___wmul@multiplicand:
   467                           	opt stack 0
   468                           
   469                           ; 2 bytes @ 0x18
   470  00003D                     	ds	1
   471  00003E                     ??_getShutterStatusByte1:
   472  00003E                     ??_getShutterStatusByte2:
   473  00003E                     shutterStateMachine@which:
   474                           	opt stack 0
   475  00003E                     fehler@updown:
   476                           	opt stack 0
   477  00003E                     setKeyForShutter@shutter:
   478                           	opt stack 0
   479  00003E                     storeShutterGroup@keyUp:
   480                           	opt stack 0
   481  00003E                     commandShutterGroupDown@group:
   482                           	opt stack 0
   483  00003E                     commandShutterGroupUp@group:
   484                           	opt stack 0
   485  00003E                     testCommandOk@numBytes:
   486                           	opt stack 0
   487  00003E                     testShortMove@sp:
   488                           	opt stack 0
   489                           
   490                           ; 2 bytes @ 0x19
   491  00003E                     	ds	1
   492  00003F                     storeShutterGroup@keyDown:
   493                           	opt stack 0
   494  00003F                     commandShutterGroupDown@g:
   495                           	opt stack 0
   496  00003F                     commandShutterGroupUp@g:
   497                           	opt stack 0
   498  00003F                     shutterStateMachine@sp:
   499                           	opt stack 0
   500  00003F                     ___wmul@product:
   501                           	opt stack 0
   502                           
   503                           ; 2 bytes @ 0x1A
   504  00003F                     	ds	1
   505  000040                     storeShutterGroup@number:
   506                           	opt stack 0
   507  000040                     handleShutterShortMove@group:
   508                           	opt stack 0
   509  000040                     handleShuttergroupButton@buttonIndex:
   510                           	opt stack 0
   511  000040                     getShutterStatusByte1@r:
   512                           	opt stack 0
   513  000040                     getShutterStatusByte2@r:
   514                           	opt stack 0
   515                           
   516                           ; 1 bytes @ 0x1B
   517  000040                     	ds	1
   518  000041                     decodeButton@code:
   519                           	opt stack 0
   520  000041                     commandShutterStop@shutternumber:
   521                           	opt stack 0
   522  000041                     handleShutterShortMove@g:
   523                           	opt stack 0
   524  000041                     getShutterStatusByte1@i:
   525                           	opt stack 0
   526  000041                     getShutterStatusByte2@i:
   527                           	opt stack 0
   528                           
   529                           ; 1 bytes @ 0x1C
   530  000041                     	ds	1
   531  000042                     decodeButton@buttonIndex:
   532                           	opt stack 0
   533  000042                     releaseShuttergroupButton@buttonIndex:
   534                           	opt stack 0
   535  000042                     commandShutterStop@i:
   536                           	opt stack 0
   537                           
   538                           ; 2 bytes @ 0x1D
   539  000042                     	ds	1
   540  000043                     ??_byteReceived:
   541  000043                     ??_testeMasterTaster:
   542                           
   543                           ; 1 bytes @ 0x1E
   544  000043                     	ds	1
   545  000044                     byteReceived@checksum:
   546                           	opt stack 0
   547  000044                     buttonsReset@i:
   548                           	opt stack 0
   549  000044                     i2cParser@data:
   550                           	opt stack 0
   551                           
   552                           ; 1 bytes @ 0x1F
   553  000044                     	ds	1
   554  000045                     byteReceived@code:
   555                           	opt stack 0
   556                           
   557                           ; 1 bytes @ 0x20
   558  000045                     	ds	1
   559  000046                     byteReceived@b:
   560                           	opt stack 0
   561                           
   562                           ; 1 bytes @ 0x21
   563  000046                     	ds	1
   564  000047                     ??_main:
   565                           
   566                           ; 1 bytes @ 0x22
   567  000047                     	ds	1
   568                           tblptru	equ	0xFF8
   569                           postinc0	equ	0xFEE
   570                           wreg	equ	0xFE8
   571                           
   572 ;;
   573 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   574 ;;
   575 ;; *************** function _main *****************
   576 ;; Defined at:
   577 ;;		line 62 in file "main.c"
   578 ;; Parameters:    Size  Location     Type
   579 ;;		None
   580 ;; Auto vars:     Size  Location     Type
   581 ;;  recv            2    0[BANK0 ] int 
   582 ;; Return value:  Size  Location     Type
   583 ;;                  1    wreg      void 
   584 ;; Registers used:
   585 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   586 ;; Tracked objects:
   587 ;;		On entry : 0/0
   588 ;;		On exit  : 0/0
   589 ;;		Unchanged: 0/0
   590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   591 ;;      Params:         0       0       0       0       0       0       0
   592 ;;      Locals:         0       2       0       0       0       0       0
   593 ;;      Temps:          1       0       0       0       0       0       0
   594 ;;      Totals:         1       2       0       0       0       0       0
   595 ;;Total ram usage:        3 bytes
   596 ;; Hardware stack levels required when called:    9
   597 ;; This function calls:
   598 ;;		_buttonsReset
   599 ;;		_byteReceived
   600 ;;		_fifo1Empty
   601 ;;		_fifo1Get
   602 ;;		_fifo2Empty
   603 ;;		_fifo2Get
   604 ;;		_getNumShutters
   605 ;;		_i2cParser
   606 ;;		_initButtonMatrix
   607 ;;		_initButtonTimer
   608 ;;		_initHardware
   609 ;;		_initI2CSlave
   610 ;;		_initProtocol
   611 ;;		_initRS485
   612 ;;		_initShutterStateMachine
   613 ;;		_shutterStateMachine
   614 ;;		_testeMasterTaster
   615 ;; This function is called by:
   616 ;;		Startup code after reset
   617 ;; This function uses a non-reentrant model
   618 ;;
   619                           
   620                           	psect	text0
   621  000658                     __ptext0:
   622                           	opt stack 0
   623  000658                     _main:
   624                           	opt stack 22
   625                           
   626                           ;main.c: 64: c = 0;
   627                           
   628                           ;incstack = 0
   629  000658  0E00               	movlw	0
   630  00065A  0100               	movlb	0	; () banked
   631  00065C  6FF4               	movwf	_c& (0+255),b
   632                           
   633                           ;main.c: 65: int recv;
   634                           ;main.c: 74: for ( c = 0; c < 100; c++) {
   635  00065E  0E00               	movlw	0
   636  000660  6FF4               	movwf	_c& (0+255),b
   637  000662                     l3743:
   638                           
   639                           ; BSR set to: 0
   640  000662  0E63               	movlw	99
   641  000664  65F4               	cpfsgt	_c& (0+255),b
   642  000666  D001               	goto	l126
   643  000668  D00B               	goto	u3460
   644  00066A                     l126:
   645                           
   646                           ; BSR set to: 0
   647                           ;main.c: 75: _delay((unsigned long)((10)*(8000000/4000.0)));
   648                           
   649                           ; BSR set to: 0
   650  00066A  0E1A               	movlw	26
   651  00066C  6E47               	movwf	??_main& (0+255),c
   652  00066E  0EF8               	movlw	248
   653  000670                     u3587:
   654  000670  2EE8               	decfsz	wreg,f,c
   655  000672  D7FE               	bra	u3587
   656  000674  2E47               	decfsz	??_main& (0+255),f,c
   657  000676  D7FC               	bra	u3587
   658  000678  D000               	nop2	
   659  00067A  0100               	movlb	0	; () banked
   660  00067C  2BF4               	incf	_c& (0+255),f,b
   661  00067E  D7F1               	goto	l3743
   662  000680                     u3460:
   663                           
   664                           ; BSR set to: 0
   665                           ;main.c: 76: }
   666                           ;main.c: 77: for ( c = 0; c < 100; c++) {
   667                           
   668                           ; BSR set to: 0
   669  000680  0E00               	movlw	0
   670  000682  6FF4               	movwf	_c& (0+255),b
   671  000684                     l3753:
   672                           
   673                           ; BSR set to: 0
   674  000684  0E63               	movlw	99
   675  000686  65F4               	cpfsgt	_c& (0+255),b
   676  000688  D001               	goto	l128
   677  00068A  D00B               	goto	u3480
   678  00068C                     l128:
   679                           
   680                           ; BSR set to: 0
   681                           ;main.c: 78: _delay((unsigned long)((10)*(8000000/4000.0)));
   682                           
   683                           ; BSR set to: 0
   684  00068C  0E1A               	movlw	26
   685  00068E  6E47               	movwf	??_main& (0+255),c
   686  000690  0EF8               	movlw	248
   687  000692                     u3597:
   688  000692  2EE8               	decfsz	wreg,f,c
   689  000694  D7FE               	bra	u3597
   690  000696  2E47               	decfsz	??_main& (0+255),f,c
   691  000698  D7FC               	bra	u3597
   692  00069A  D000               	nop2	
   693  00069C  0100               	movlb	0	; () banked
   694  00069E  2BF4               	incf	_c& (0+255),f,b
   695  0006A0  D7F1               	goto	l3753
   696  0006A2                     u3480:
   697                           
   698                           ; BSR set to: 0
   699                           ;main.c: 79: }
   700                           ;main.c: 80: for ( c = 0; c < 100; c++) {
   701                           
   702                           ; BSR set to: 0
   703  0006A2  0E00               	movlw	0
   704  0006A4  6FF4               	movwf	_c& (0+255),b
   705  0006A6                     l3763:
   706                           
   707                           ; BSR set to: 0
   708  0006A6  0E63               	movlw	99
   709  0006A8  65F4               	cpfsgt	_c& (0+255),b
   710  0006AA  D001               	goto	l130
   711  0006AC  D00B               	goto	u3500
   712  0006AE                     l130:
   713                           
   714                           ; BSR set to: 0
   715                           ;main.c: 81: _delay((unsigned long)((10)*(8000000/4000.0)));
   716                           
   717                           ; BSR set to: 0
   718  0006AE  0E1A               	movlw	26
   719  0006B0  6E47               	movwf	??_main& (0+255),c
   720  0006B2  0EF8               	movlw	248
   721  0006B4                     u3607:
   722  0006B4  2EE8               	decfsz	wreg,f,c
   723  0006B6  D7FE               	bra	u3607
   724  0006B8  2E47               	decfsz	??_main& (0+255),f,c
   725  0006BA  D7FC               	bra	u3607
   726  0006BC  D000               	nop2	
   727  0006BE  0100               	movlb	0	; () banked
   728  0006C0  2BF4               	incf	_c& (0+255),f,b
   729  0006C2  D7F1               	goto	l3763
   730  0006C4                     u3500:
   731                           
   732                           ; BSR set to: 0
   733                           ;main.c: 82: }
   734                           ;main.c: 85: c = 0;
   735                           
   736                           ; BSR set to: 0
   737  0006C4  0E00               	movlw	0
   738  0006C6  6FF4               	movwf	_c& (0+255),b
   739                           
   740                           ; BSR set to: 0
   741                           ;main.c: 87: initHardware();
   742  0006C8  ECD4  F005         	call	_initHardware	;wreg free
   743                           
   744                           ;main.c: 88: initProtocol();
   745  0006CC  EC04  F009         	call	_initProtocol	;wreg free
   746                           
   747                           ;main.c: 89: initButtonTimer();
   748  0006D0  ECCF  F004         	call	_initButtonTimer	;wreg free
   749                           
   750                           ;main.c: 90: initShutterStateMachine();
   751  0006D4  ECA3  F005         	call	_initShutterStateMachine	;wreg free
   752                           
   753                           ;main.c: 91: initRS485();
   754  0006D8  ECD4  F008         	call	_initRS485	;wreg free
   755                           
   756                           ;main.c: 93: initI2CSlave(0x88);
   757  0006DC  0E88               	movlw	136
   758  0006DE  EC4E  F006         	call	_initI2CSlave
   759                           
   760                           ;main.c: 95: initButtonMatrix();
   761  0006E2  EC13  F008         	call	_initButtonMatrix	;wreg free
   762                           
   763                           ;main.c: 97: RCONbits.IPEN = 1;
   764  0006E6  8ED0               	bsf	4048,7,c	;volatile
   765                           
   766                           ;main.c: 98: INTCONbits.PEIE = 1;
   767  0006E8  8CF2               	bsf	intcon,6,c	;volatile
   768                           
   769                           ;main.c: 100: INTCONbits.GIEH = 1;
   770  0006EA  8EF2               	bsf	intcon,7,c	;volatile
   771                           
   772                           ;main.c: 101: INTCONbits.GIEL = 1;
   773  0006EC  8CF2               	bsf	intcon,6,c	;volatile
   774  0006EE                     
   775                           ;main.c: 105: if ( debugCount++ == 0) {
   776  0006EE  0100               	movlb	0	; () banked
   777  0006F0  2BF3               	incf	_debugCount& (0+255),f,b
   778  0006F2  05F3               	decf	_debugCount& (0+255),w,b
   779  0006F4  A4D8               	btfss	status,2,c
   780  0006F6  D005               	goto	l135
   781                           
   782                           ; BSR set to: 0
   783                           ;main.c: 106: if ( LATAbits.LATA0 == 0)
   784  0006F8  B089               	btfsc	3977,0,c	;volatile
   785  0006FA  D002               	goto	l134
   786                           
   787                           ; BSR set to: 0
   788                           ;main.c: 107: LATAbits.LATA0 = 1;
   789  0006FC  8089               	bsf	3977,0,c	;volatile
   790  0006FE  D001               	goto	l135
   791  000700                     l134:
   792                           
   793                           ; BSR set to: 0
   794                           ;main.c: 108: else
   795                           ;main.c: 109: LATAbits.LATA0 = 0;
   796  000700  9089               	bcf	3977,0,c	;volatile
   797  000702                     l135:
   798                           
   799                           ; BSR set to: 0
   800                           ;main.c: 110: }
   801                           ;main.c: 112: if(!fifo1Empty()) {
   802                           
   803                           ; BSR set to: 0
   804                           
   805                           ; BSR set to: 0
   806  000702  EC93  F008         	call	_fifo1Empty	;wreg free
   807  000706  0900               	iorlw	0
   808  000708  A4D8               	btfss	status,2,c
   809  00070A  D00A               	goto	l136
   810                           
   811                           ;main.c: 113: recv = fifo1Get();
   812  00070C  EC86  F008         	call	_fifo1Get	;wreg free
   813  000710  6E47               	movwf	??_main& (0+255),c
   814  000712  5047               	movf	??_main,w,c
   815  000714  0100               	movlb	0	; () banked
   816  000716  6FF7               	movwf	main@recv& (0+255),b
   817  000718  6BF8               	clrf	(main@recv+1)& (0+255),b
   818                           
   819                           ; BSR set to: 0
   820                           ;main.c: 114: byteReceived(recv);
   821  00071A  51F7               	movf	main@recv& (0+255),w,b
   822  00071C  EC6F  F005         	call	_byteReceived
   823  000720                     l136:
   824                           
   825                           ;main.c: 115: }
   826                           ;main.c: 117: if(bButtonTimer) {
   827  000720  0100               	movlb	0	; () banked
   828  000722  51F6               	movf	_bButtonTimer& (0+255),w,b	;volatile
   829  000724  B4D8               	btfsc	status,2,c
   830  000726  D005               	goto	l137
   831                           
   832                           ; BSR set to: 0
   833                           ;main.c: 118: buttonsReset();
   834  000728  ECBB  F003         	call	_buttonsReset	;wreg free
   835                           
   836                           ;main.c: 119: bButtonTimer = 0;
   837  00072C  0E00               	movlw	0
   838  00072E  0100               	movlb	0	; () banked
   839  000730  6FF6               	movwf	_bButtonTimer& (0+255),b	;volatile
   840  000732                     l137:
   841                           
   842                           ; BSR set to: 0
   843                           ;main.c: 120: }
   844                           ;main.c: 122: if(bShutterTimer) {
   845                           
   846                           ; BSR set to: 0
   847  000732  51F5               	movf	_bShutterTimer& (0+255),w,b	;volatile
   848  000734  B4D8               	btfsc	status,2,c
   849  000736  D017               	goto	l142
   850                           
   851                           ; BSR set to: 0
   852                           ;main.c: 123: bShutterTimer = 0;
   853  000738  0E00               	movlw	0
   854  00073A  6FF5               	movwf	_bShutterTimer& (0+255),b	;volatile
   855                           
   856                           ;main.c: 125: for ( c = 0; c < getNumShutters(); c++) {
   857  00073C  0E00               	movlw	0
   858  00073E  6FF4               	movwf	_c& (0+255),b
   859  000740  D005               	goto	l139
   860  000742                     
   861                           ; BSR set to: 0
   862                           ;main.c: 126: shutterStateMachine(c);
   863                           
   864                           ; BSR set to: 0
   865  000742  51F4               	movf	_c& (0+255),w,b
   866  000744  EC97  F001         	call	_shutterStateMachine
   867  000748  0100               	movlb	0	; () banked
   868  00074A  2BF4               	incf	_c& (0+255),f,b
   869  00074C                     l139:
   870                           
   871                           ; BSR set to: 0
   872                           
   873                           ; BSR set to: 0
   874  00074C  EC08  F009         	call	_getNumShutters	;wreg free
   875  000750  6E47               	movwf	??_main& (0+255),c
   876  000752  5047               	movf	??_main,w,c
   877  000754  0100               	movlb	0	; () banked
   878  000756  5DF4               	subwf	_c& (0+255),w,b
   879  000758  B0D8               	btfsc	status,0,c
   880  00075A  D005               	goto	l142
   881  00075C  D7F2               	goto	l140
   882  00075E                     
   883                           ;main.c: 131: i2cParser(fifo2Get());
   884                           
   885                           ; BSR set to: 0
   886  00075E  EC6C  F008         	call	_fifo2Get	;wreg free
   887  000762  EC79  F000         	call	_i2cParser
   888  000766                     l142:
   889  000766  EC79  F008         	call	_fifo2Empty	;wreg free
   890  00076A  0900               	iorlw	0
   891  00076C  B4D8               	btfsc	status,2,c
   892  00076E  D7F7               	goto	l143
   893                           
   894                           ;main.c: 132: }
   895                           ;main.c: 138: testeMasterTaster();
   896  000770  EC89  F007         	call	_testeMasterTaster	;wreg free
   897                           
   898                           ;main.c: 139: }
   899  000774  D7BC               	goto	l132
   900  000776                     __end_of_main:
   901                           	opt stack 0
   902                           tblptru	equ	0xFF8
   903                           intcon	equ	0xFF2
   904                           postinc0	equ	0xFEE
   905                           wreg	equ	0xFE8
   906                           status	equ	0xFD8
   907                           
   908 ;; *************** function _testeMasterTaster *****************
   909 ;; Defined at:
   910 ;;		line 14 in file "masterswitch.c"
   911 ;; Parameters:    Size  Location     Type
   912 ;;		None
   913 ;; Auto vars:     Size  Location     Type
   914 ;;		None
   915 ;; Return value:  Size  Location     Type
   916 ;;                  1    wreg      void 
   917 ;; Registers used:
   918 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   919 ;; Tracked objects:
   920 ;;		On entry : 0/0
   921 ;;		On exit  : 0/0
   922 ;;		Unchanged: 0/0
   923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   924 ;;      Params:         0       0       0       0       0       0       0
   925 ;;      Locals:         0       0       0       0       0       0       0
   926 ;;      Temps:          2       0       0       0       0       0       0
   927 ;;      Totals:         2       0       0       0       0       0       0
   928 ;;Total ram usage:        2 bytes
   929 ;; Hardware stack levels used:    1
   930 ;; Hardware stack levels required when called:    8
   931 ;; This function calls:
   932 ;;		_decodeButton
   933 ;; This function is called by:
   934 ;;		_main
   935 ;; This function uses a non-reentrant model
   936 ;;
   937                           
   938                           	psect	text1
   939  000F12                     __ptext1:
   940                           	opt stack 0
   941  000F12                     _testeMasterTaster:
   942                           	opt stack 22
   943                           
   944                           ;masterswitch.c: 16: if ( entprellCounter++ < 200)
   945                           
   946                           ;incstack = 0
   947  000F12  5001               	movf	_entprellCounter,w,c
   948  000F14  6E43               	movwf	??_testeMasterTaster& (0+255),c
   949  000F16  5002               	movf	_entprellCounter+1,w,c
   950  000F18  6E44               	movwf	(??_testeMasterTaster+1)& (0+255),c
   951  000F1A  4A01               	infsnz	_entprellCounter,f,c
   952  000F1C  2A02               	incf	_entprellCounter+1,f,c
   953  000F1E  5044               	movf	??_testeMasterTaster+1,w,c
   954  000F20  E104               	bnz	l3719
   955  000F22  0EC8               	movlw	200
   956  000F24  5C43               	subwf	??_testeMasterTaster,w,c
   957  000F26  A0D8               	btfss	status,0,c
   958  000F28  0012               	return	
   959  000F2A                     l3719:
   960                           
   961                           ;masterswitch.c: 19: entprellCounter = 0;
   962  000F2A  0E00               	movlw	0
   963  000F2C  6E02               	movwf	_entprellCounter+1,c
   964  000F2E  0E00               	movlw	0
   965  000F30  6E01               	movwf	_entprellCounter,c
   966                           
   967                           ;masterswitch.c: 21: if ( PORTAbits.RA1 == 0)
   968  000F32  B280               	btfsc	3968,1,c	;volatile
   969  000F34  D003               	goto	l429
   970                           
   971                           ;masterswitch.c: 22: decodeButton(201);
   972  000F36  0EC9               	movlw	201
   973  000F38  EC96  F004         	call	_decodeButton
   974  000F3C                     l429:
   975                           
   976                           ;masterswitch.c: 24: if ( PORTAbits.RA2 == 0)
   977  000F3C  B480               	btfsc	3968,2,c	;volatile
   978  000F3E  0012               	return	
   979                           
   980                           ;masterswitch.c: 25: decodeButton(202);
   981  000F40  0ECA               	movlw	202
   982  000F42  EC96  F004         	call	_decodeButton
   983  000F46  0012               	return	
   984  000F48                     __end_of_testeMasterTaster:
   985                           	opt stack 0
   986                           tblptru	equ	0xFF8
   987                           intcon	equ	0xFF2
   988                           postinc0	equ	0xFEE
   989                           wreg	equ	0xFE8
   990                           status	equ	0xFD8
   991                           
   992 ;; *************** function _shutterStateMachine *****************
   993 ;; Defined at:
   994 ;;		line 281 in file "shutter.c"
   995 ;; Parameters:    Size  Location     Type
   996 ;;  which           1    wreg     unsigned char 
   997 ;; Auto vars:     Size  Location     Type
   998 ;;  which           1   25[COMRAM] unsigned char 
   999 ;;  sp              2   26[COMRAM] PTR struct shutter
  1000 ;;		 -> shutter(15), 
  1001 ;; Return value:  Size  Location     Type
  1002 ;;                  1    wreg      void 
  1003 ;; Registers used:
  1004 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1005 ;; Tracked objects:
  1006 ;;		On entry : 0/0
  1007 ;;		On exit  : 0/0
  1008 ;;		Unchanged: 0/0
  1009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1010 ;;      Params:         0       0       0       0       0       0       0
  1011 ;;      Locals:         3       0       0       0       0       0       0
  1012 ;;      Temps:          2       0       0       0       0       0       0
  1013 ;;      Totals:         5       0       0       0       0       0       0
  1014 ;;Total ram usage:        5 bytes
  1015 ;; Hardware stack levels used:    1
  1016 ;; Hardware stack levels required when called:    4
  1017 ;; This function calls:
  1018 ;;		_shutterDirectionDown
  1019 ;;		_shutterDirectionUp
  1020 ;;		_shutterOff
  1021 ;;		_shutterOn
  1022 ;; This function is called by:
  1023 ;;		_main
  1024 ;; This function uses a non-reentrant model
  1025 ;;
  1026                           
  1027                           	psect	text2
  1028  00032E                     __ptext2:
  1029                           	opt stack 0
  1030  00032E                     _shutterStateMachine:
  1031                           	opt stack 26
  1032                           
  1033                           ;incstack = 0
  1034                           ;shutterStateMachine@which stored from wreg
  1035  00032E  6E3E               	movwf	shutterStateMachine@which,c
  1036                           
  1037                           ;shutter.c: 283: SHUTTER *sp = &shutter[which];
  1038  000330  503E               	movf	shutterStateMachine@which,w,c
  1039  000332  0D03               	mullw	3
  1040  000334  0E16               	movlw	low _shutter
  1041  000336  24F3               	addwf	prodl,w,c
  1042  000338  6E3F               	movwf	shutterStateMachine@sp,c
  1043  00033A  0E00               	movlw	high _shutter
  1044  00033C  20F4               	addwfc	prodh,w,c
  1045  00033E  6E40               	movwf	shutterStateMachine@sp+1,c
  1046                           
  1047                           ;shutter.c: 285: if ( sp -> state != 1)
  1048  000340  C03F  FFD9         	movff	shutterStateMachine@sp,fsr2l
  1049  000344  C040  FFDA         	movff	shutterStateMachine@sp+1,fsr2h
  1050  000348  04DE               	decf	postinc2,w,c
  1051  00034A  B4D8               	btfsc	status,2,c
  1052  00034C  D009               	goto	l307
  1053                           
  1054                           ;shutter.c: 286: sp -> count++;
  1055  00034E  EE20 F001          	lfsr	2,1
  1056  000352  503F               	movf	shutterStateMachine@sp,w,c
  1057  000354  26D9               	addwf	fsr2l,f,c
  1058  000356  5040               	movf	shutterStateMachine@sp+1,w,c
  1059  000358  22DA               	addwfc	fsr2h,f,c
  1060  00035A  2ADE               	incf	postinc2,f,c
  1061  00035C  0E00               	movlw	0
  1062  00035E  22DD               	addwfc	postdec2,f,c
  1063  000360                     l307:
  1064                           
  1065                           ;shutter.c: 288: if ( sp -> count > 300) {
  1066  000360  EE20 F001          	lfsr	2,1
  1067  000364  503F               	movf	shutterStateMachine@sp,w,c
  1068  000366  26D9               	addwf	fsr2l,f,c
  1069  000368  5040               	movf	shutterStateMachine@sp+1,w,c
  1070  00036A  22DA               	addwfc	fsr2h,f,c
  1071  00036C  0E2D               	movlw	45
  1072  00036E  5CDE               	subwf	postinc2,w,c
  1073  000370  0E01               	movlw	1
  1074  000372  58DE               	subwfb	postinc2,w,c
  1075  000374  A0D8               	btfss	status,0,c
  1076  000376  D0B1               	goto	l309
  1077                           
  1078                           ;shutter.c: 289: sp -> state = 8;
  1079  000378  C03F  FFD9         	movff	shutterStateMachine@sp,fsr2l
  1080  00037C  C040  FFDA         	movff	shutterStateMachine@sp+1,fsr2h
  1081  000380  0E08               	movlw	8
  1082  000382  6EDF               	movwf	indf2,c
  1083                           
  1084                           ;shutter.c: 290: }
  1085                           ;shutter.c: 292: switch ( sp -> state ) {
  1086  000384  D0AA               	goto	l309
  1087  000386                     
  1088                           ;shutter.c: 298: shutterOff(which);
  1089  000386  503E               	movf	shutterStateMachine@which,w,c
  1090  000388  EC6C  F007         	call	_shutterOff
  1091                           
  1092                           ;shutter.c: 299: sp -> count = 0;
  1093  00038C  EE20 F001          	lfsr	2,1
  1094  000390  503F               	movf	shutterStateMachine@sp,w,c
  1095  000392  26D9               	addwf	fsr2l,f,c
  1096  000394  5040               	movf	shutterStateMachine@sp+1,w,c
  1097  000396  22DA               	addwfc	fsr2h,f,c
  1098  000398  0E00               	movlw	0
  1099  00039A  6EDE               	movwf	postinc2,c
  1100  00039C  0E00               	movlw	0
  1101  00039E  6EDD               	movwf	postdec2,c
  1102                           
  1103                           ;shutter.c: 300: sp -> state = 30;
  1104  0003A0  C03F  FFD9         	movff	shutterStateMachine@sp,fsr2l
  1105  0003A4  C040  FFDA         	movff	shutterStateMachine@sp+1,fsr2h
  1106  0003A8  0E1E               	movlw	30
  1107  0003AA  6EDF               	movwf	indf2,c
  1108                           
  1109                           ;shutter.c: 301: break;
  1110  0003AC  0012               	return	
  1111  0003AE                     
  1112                           ;shutter.c: 304: shutterDirectionDown(which);
  1113  0003AE  503E               	movf	shutterStateMachine@which,w,c
  1114  0003B0  EC27  F006         	call	_shutterDirectionDown
  1115                           
  1116                           ;shutter.c: 305: sp -> state = 1;
  1117  0003B4  C03F  FFD9         	movff	shutterStateMachine@sp,fsr2l
  1118  0003B8  C040  FFDA         	movff	shutterStateMachine@sp+1,fsr2h
  1119  0003BC  0E01               	movlw	1
  1120  0003BE  6EDF               	movwf	indf2,c
  1121                           
  1122                           ;shutter.c: 306: break;
  1123  0003C0  0012               	return	
  1124  0003C2                     
  1125                           ;shutter.c: 309: shutterDirectionUp(which);
  1126  0003C2  503E               	movf	shutterStateMachine@which,w,c
  1127  0003C4  EC00  F006         	call	_shutterDirectionUp
  1128                           
  1129                           ;shutter.c: 310: sp -> state = 24;
  1130  0003C8  C03F  FFD9         	movff	shutterStateMachine@sp,fsr2l
  1131  0003CC  C040  FFDA         	movff	shutterStateMachine@sp+1,fsr2h
  1132  0003D0  0E18               	movlw	24
  1133  0003D2  6EDF               	movwf	indf2,c
  1134                           
  1135                           ;shutter.c: 311: break;
  1136  0003D4  0012               	return	
  1137  0003D6                     
  1138                           ;shutter.c: 314: shutterDirectionDown(which);
  1139  0003D6  503E               	movf	shutterStateMachine@which,w,c
  1140  0003D8  EC27  F006         	call	_shutterDirectionDown
  1141                           
  1142                           ;shutter.c: 315: sp -> state = 25;
  1143  0003DC  C03F  FFD9         	movff	shutterStateMachine@sp,fsr2l
  1144  0003E0  C040  FFDA         	movff	shutterStateMachine@sp+1,fsr2h
  1145  0003E4  0E19               	movlw	25
  1146  0003E6  6EDF               	movwf	indf2,c
  1147                           
  1148                           ;shutter.c: 316: break;
  1149  0003E8  0012               	return	
  1150  0003EA                     
  1151                           ;shutter.c: 319: shutterOn(which);
  1152  0003EA  503E               	movf	shutterStateMachine@which,w,c
  1153  0003EC  EC4F  F007         	call	_shutterOn
  1154                           
  1155                           ;shutter.c: 320: sp -> state = 20;
  1156  0003F0  C03F  FFD9         	movff	shutterStateMachine@sp,fsr2l
  1157  0003F4  C040  FFDA         	movff	shutterStateMachine@sp+1,fsr2h
  1158  0003F8  0E14               	movlw	20
  1159  0003FA  6EDF               	movwf	indf2,c
  1160                           
  1161                           ;shutter.c: 321: sp -> count = 0;
  1162  0003FC  EE20 F001          	lfsr	2,1
  1163  000400  503F               	movf	shutterStateMachine@sp,w,c
  1164  000402  26D9               	addwf	fsr2l,f,c
  1165  000404  5040               	movf	shutterStateMachine@sp+1,w,c
  1166  000406  22DA               	addwfc	fsr2h,f,c
  1167  000408  0E00               	movlw	0
  1168  00040A  6EDE               	movwf	postinc2,c
  1169  00040C  0E00               	movlw	0
  1170  00040E  6EDD               	movwf	postdec2,c
  1171                           
  1172                           ;shutter.c: 322: break;
  1173  000410  0012               	return	
  1174  000412                     
  1175                           ;shutter.c: 325: shutterOn(which);
  1176  000412  503E               	movf	shutterStateMachine@which,w,c
  1177  000414  EC4F  F007         	call	_shutterOn
  1178                           
  1179                           ;shutter.c: 326: sp -> state = 21;
  1180  000418  C03F  FFD9         	movff	shutterStateMachine@sp,fsr2l
  1181  00041C  C040  FFDA         	movff	shutterStateMachine@sp+1,fsr2h
  1182  000420  0E15               	movlw	21
  1183  000422  6EDF               	movwf	indf2,c
  1184                           
  1185                           ;shutter.c: 327: sp -> count = 0;
  1186  000424  EE20 F001          	lfsr	2,1
  1187  000428  503F               	movf	shutterStateMachine@sp,w,c
  1188  00042A  26D9               	addwf	fsr2l,f,c
  1189  00042C  5040               	movf	shutterStateMachine@sp+1,w,c
  1190  00042E  22DA               	addwfc	fsr2h,f,c
  1191  000430  0E00               	movlw	0
  1192  000432  6EDE               	movwf	postinc2,c
  1193  000434  0E00               	movlw	0
  1194  000436  6EDD               	movwf	postdec2,c
  1195                           
  1196                           ;shutter.c: 328: break;
  1197  000438  0012               	return	
  1198  00043A                     
  1199                           ;shutter.c: 331: shutterOff(which);
  1200  00043A  503E               	movf	shutterStateMachine@which,w,c
  1201  00043C  EC6C  F007         	call	_shutterOff
  1202                           
  1203                           ;shutter.c: 332: sp -> count = 0;
  1204  000440  EE20 F001          	lfsr	2,1
  1205  000444  503F               	movf	shutterStateMachine@sp,w,c
  1206  000446  26D9               	addwf	fsr2l,f,c
  1207  000448  5040               	movf	shutterStateMachine@sp+1,w,c
  1208  00044A  22DA               	addwfc	fsr2h,f,c
  1209  00044C  0E00               	movlw	0
  1210  00044E  6EDE               	movwf	postinc2,c
  1211  000450  0E00               	movlw	0
  1212  000452  6EDD               	movwf	postdec2,c
  1213                           
  1214                           ;shutter.c: 333: sp -> state = 27;
  1215  000454  C03F  FFD9         	movff	shutterStateMachine@sp,fsr2l
  1216  000458  C040  FFDA         	movff	shutterStateMachine@sp+1,fsr2h
  1217  00045C  0E1B               	movlw	27
  1218  00045E  6EDF               	movwf	indf2,c
  1219                           
  1220                           ;shutter.c: 334: break;
  1221  000460  0012               	return	
  1222  000462                     
  1223                           ;shutter.c: 337: shutterOff(which);
  1224  000462  503E               	movf	shutterStateMachine@which,w,c
  1225  000464  EC6C  F007         	call	_shutterOff
  1226                           
  1227                           ;shutter.c: 338: sp -> count = 0;
  1228  000468  EE20 F001          	lfsr	2,1
  1229  00046C  503F               	movf	shutterStateMachine@sp,w,c
  1230  00046E  26D9               	addwf	fsr2l,f,c
  1231  000470  5040               	movf	shutterStateMachine@sp+1,w,c
  1232  000472  22DA               	addwfc	fsr2h,f,c
  1233  000474  0E00               	movlw	0
  1234  000476  6EDE               	movwf	postinc2,c
  1235  000478  0E00               	movlw	0
  1236  00047A  6EDD               	movwf	postdec2,c
  1237                           
  1238                           ;shutter.c: 339: sp -> state = 26;
  1239  00047C  C03F  FFD9         	movff	shutterStateMachine@sp,fsr2l
  1240  000480  C040  FFDA         	movff	shutterStateMachine@sp+1,fsr2h
  1241  000484  0E1A               	movlw	26
  1242  000486  6EDF               	movwf	indf2,c
  1243                           
  1244                           ;shutter.c: 340: break;
  1245  000488  0012               	return	
  1246  00048A                     
  1247                           ;shutter.c: 343: if ( sp -> count > 5)
  1248  00048A  EE20 F001          	lfsr	2,1
  1249  00048E  503F               	movf	shutterStateMachine@sp,w,c
  1250  000490  26D9               	addwf	fsr2l,f,c
  1251  000492  5040               	movf	shutterStateMachine@sp+1,w,c
  1252  000494  22DA               	addwfc	fsr2h,f,c
  1253  000496  0E01               	movlw	1
  1254  000498  50DB               	movf	plusw2,w,c
  1255  00049A  E104               	bnz	u2200
  1256  00049C  0E06               	movlw	6
  1257  00049E  5CDE               	subwf	postinc2,w,c
  1258  0004A0  A0D8               	btfss	status,0,c
  1259  0004A2  0012               	return	
  1260  0004A4                     u2200:
  1261                           
  1262                           ;shutter.c: 344: sp -> state = 22;
  1263  0004A4  C03F  FFD9         	movff	shutterStateMachine@sp,fsr2l
  1264  0004A8  C040  FFDA         	movff	shutterStateMachine@sp+1,fsr2h
  1265  0004AC  0E16               	movlw	22
  1266  0004AE  6EDF               	movwf	indf2,c
  1267                           
  1268                           ;shutter.c: 345: break;
  1269  0004B0  0012               	return	
  1270  0004B2                     
  1271                           ;shutter.c: 348: if ( sp -> count > 5)
  1272  0004B2  EE20 F001          	lfsr	2,1
  1273  0004B6  503F               	movf	shutterStateMachine@sp,w,c
  1274  0004B8  26D9               	addwf	fsr2l,f,c
  1275  0004BA  5040               	movf	shutterStateMachine@sp+1,w,c
  1276  0004BC  22DA               	addwfc	fsr2h,f,c
  1277  0004BE  0E01               	movlw	1
  1278  0004C0  50DB               	movf	plusw2,w,c
  1279  0004C2  E104               	bnz	u2210
  1280  0004C4  0E06               	movlw	6
  1281  0004C6  5CDE               	subwf	postinc2,w,c
  1282  0004C8  A0D8               	btfss	status,0,c
  1283  0004CA  0012               	return	
  1284  0004CC                     u2210:
  1285                           
  1286                           ;shutter.c: 349: sp -> state = 23;
  1287  0004CC  C03F  FFD9         	movff	shutterStateMachine@sp,fsr2l
  1288  0004D0  C040  FFDA         	movff	shutterStateMachine@sp+1,fsr2h
  1289  0004D4  0E17               	movlw	23
  1290  0004D6  6EDF               	movwf	indf2,c
  1291                           
  1292                           ;shutter.c: 358: }
  1293                           
  1294                           ;shutter.c: 356: break;
  1295                           
  1296                           ;shutter.c: 355: case 21:
  1297                           
  1298                           ;shutter.c: 353: break;
  1299                           
  1300                           ;shutter.c: 352: case 20:
  1301                           
  1302                           ;shutter.c: 350: break;
  1303  0004D8  0012               	return	
  1304  0004DA                     l309:
  1305  0004DA  C03F  FFD9         	movff	shutterStateMachine@sp,fsr2l
  1306  0004DE  C040  FFDA         	movff	shutterStateMachine@sp+1,fsr2h
  1307  0004E2  50DF               	movf	indf2,w,c
  1308                           
  1309                           ; Switch size 1, requested type "space"
  1310                           ; Number of cases is 13, Range of values is 1 to 30
  1311                           ; switch strategies available:
  1312                           ; Name         Instructions Cycles
  1313                           ; simple_byte           40    21 (average)
  1314                           ;	Chosen strategy is simple_byte
  1315  0004E4  0A01               	xorlw	1	; case 1
  1316  0004E6  B4D8               	btfsc	status,2,c
  1317  0004E8  0012               	return	
  1318  0004EA  0A03               	xorlw	3	; case 2
  1319  0004EC  B4D8               	btfsc	status,2,c
  1320  0004EE  D7B9               	goto	l319
  1321  0004F0  0A01               	xorlw	1	; case 3
  1322  0004F2  B4D8               	btfsc	status,2,c
  1323  0004F4  D7A2               	goto	l318
  1324  0004F6  0A0B               	xorlw	11	; case 8
  1325  0004F8  B4D8               	btfsc	status,2,c
  1326  0004FA  D745               	goto	l312
  1327  0004FC  0A1C               	xorlw	28	; case 20
  1328  0004FE  B4D8               	btfsc	status,2,c
  1329  000500  0012               	return	
  1330  000502  0A01               	xorlw	1	; case 21
  1331  000504  B4D8               	btfsc	status,2,c
  1332  000506  0012               	return	
  1333  000508  0A03               	xorlw	3	; case 22
  1334  00050A  B4D8               	btfsc	status,2,c
  1335  00050C  D75A               	goto	l314
  1336  00050E  0A01               	xorlw	1	; case 23
  1337  000510  B4D8               	btfsc	status,2,c
  1338  000512  D761               	goto	l315
  1339  000514  0A0F               	xorlw	15	; case 24
  1340  000516  B4D8               	btfsc	status,2,c
  1341  000518  D768               	goto	l316
  1342  00051A  0A01               	xorlw	1	; case 25
  1343  00051C  B4D8               	btfsc	status,2,c
  1344  00051E  D779               	goto	l317
  1345  000520  0A03               	xorlw	3	; case 26
  1346  000522  B4D8               	btfsc	status,2,c
  1347  000524  D7C6               	goto	l322
  1348  000526  0A01               	xorlw	1	; case 27
  1349  000528  B4D8               	btfsc	status,2,c
  1350  00052A  D7AF               	goto	l320
  1351  00052C  0A05               	xorlw	5	; case 30
  1352  00052E  A4D8               	btfss	status,2,c
  1353  000530  0012               	return	
  1354  000532  D73D               	goto	l313
  1355  000534                     __end_of_shutterStateMachine:
  1356                           	opt stack 0
  1357                           tblptru	equ	0xFF8
  1358                           prodh	equ	0xFF4
  1359                           prodl	equ	0xFF3
  1360                           intcon	equ	0xFF2
  1361                           postinc0	equ	0xFEE
  1362                           wreg	equ	0xFE8
  1363                           indf2	equ	0xFDF
  1364                           postinc2	equ	0xFDE
  1365                           postdec2	equ	0xFDD
  1366                           plusw2	equ	0xFDB
  1367                           fsr2h	equ	0xFDA
  1368                           fsr2l	equ	0xFD9
  1369                           status	equ	0xFD8
  1370                           
  1371 ;; *************** function _shutterOn *****************
  1372 ;; Defined at:
  1373 ;;		line 14 in file "shutterhardware.c"
  1374 ;; Parameters:    Size  Location     Type
  1375 ;;  shutternumbe    1    wreg     unsigned char 
  1376 ;; Auto vars:     Size  Location     Type
  1377 ;;  shutternumbe    1   22[COMRAM] unsigned char 
  1378 ;; Return value:  Size  Location     Type
  1379 ;;                  1    wreg      void 
  1380 ;; Registers used:
  1381 ;;		wreg, status,2, status,0
  1382 ;; Tracked objects:
  1383 ;;		On entry : 0/0
  1384 ;;		On exit  : 0/0
  1385 ;;		Unchanged: 0/0
  1386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1387 ;;      Params:         0       0       0       0       0       0       0
  1388 ;;      Locals:         1       0       0       0       0       0       0
  1389 ;;      Temps:          0       0       0       0       0       0       0
  1390 ;;      Totals:         1       0       0       0       0       0       0
  1391 ;;Total ram usage:        1 bytes
  1392 ;; Hardware stack levels used:    1
  1393 ;; Hardware stack levels required when called:    3
  1394 ;; This function calls:
  1395 ;;		Nothing
  1396 ;; This function is called by:
  1397 ;;		_shutterStateMachine
  1398 ;; This function uses a non-reentrant model
  1399 ;;
  1400                           
  1401                           	psect	text3
  1402  000E9E                     __ptext3:
  1403                           	opt stack 0
  1404  000E9E                     _shutterOn:
  1405                           	opt stack 26
  1406                           
  1407                           ;incstack = 0
  1408                           ;shutterOn@shutternumber stored from wreg
  1409  000E9E  6E3B               	movwf	shutterOn@shutternumber,c
  1410                           
  1411                           ;shutterhardware.c: 16: switch (shutternumber) {
  1412  000EA0  D00A               	goto	l367
  1413  000EA2                     l368:
  1414  000EA2  8A8A               	bsf	3978,5,c	;volatile
  1415  000EA4  0012               	return	
  1416  000EA6                     l370:
  1417  000EA6  888A               	bsf	3978,4,c	;volatile
  1418  000EA8  0012               	return	
  1419  000EAA                     l371:
  1420  000EAA  868A               	bsf	3978,3,c	;volatile
  1421  000EAC  0012               	return	
  1422  000EAE                     l372:
  1423  000EAE  848A               	bsf	3978,2,c	;volatile
  1424  000EB0  0012               	return	
  1425  000EB2                     l373:
  1426  000EB2  828A               	bsf	3978,1,c	;volatile
  1427                           
  1428                           ;shutterhardware.c: 23: }
  1429  000EB4  0012               	return	
  1430  000EB6                     l367:
  1431  000EB6  503B               	movf	shutterOn@shutternumber,w,c
  1432                           
  1433                           ; Switch size 1, requested type "space"
  1434                           ; Number of cases is 5, Range of values is 0 to 4
  1435                           ; switch strategies available:
  1436                           ; Name         Instructions Cycles
  1437                           ; simple_byte           16     9 (average)
  1438                           ;	Chosen strategy is simple_byte
  1439  000EB8  0A00               	xorlw	0	; case 0
  1440  000EBA  B4D8               	btfsc	status,2,c
  1441  000EBC  D7F2               	goto	l368
  1442  000EBE  0A01               	xorlw	1	; case 1
  1443  000EC0  B4D8               	btfsc	status,2,c
  1444  000EC2  D7F1               	goto	l370
  1445  000EC4  0A03               	xorlw	3	; case 2
  1446  000EC6  B4D8               	btfsc	status,2,c
  1447  000EC8  D7F0               	goto	l371
  1448  000ECA  0A01               	xorlw	1	; case 3
  1449  000ECC  B4D8               	btfsc	status,2,c
  1450  000ECE  D7EF               	goto	l372
  1451  000ED0  0A07               	xorlw	7	; case 4
  1452  000ED2  A4D8               	btfss	status,2,c
  1453  000ED4  0012               	return	
  1454  000ED6  D7ED               	goto	l373
  1455  000ED8                     __end_of_shutterOn:
  1456                           	opt stack 0
  1457                           tblptru	equ	0xFF8
  1458                           prodh	equ	0xFF4
  1459                           prodl	equ	0xFF3
  1460                           intcon	equ	0xFF2
  1461                           postinc0	equ	0xFEE
  1462                           wreg	equ	0xFE8
  1463                           indf2	equ	0xFDF
  1464                           postinc2	equ	0xFDE
  1465                           postdec2	equ	0xFDD
  1466                           plusw2	equ	0xFDB
  1467                           fsr2h	equ	0xFDA
  1468                           fsr2l	equ	0xFD9
  1469                           status	equ	0xFD8
  1470                           
  1471 ;; *************** function _shutterOff *****************
  1472 ;; Defined at:
  1473 ;;		line 26 in file "shutterhardware.c"
  1474 ;; Parameters:    Size  Location     Type
  1475 ;;  shutternumbe    1    wreg     unsigned char 
  1476 ;; Auto vars:     Size  Location     Type
  1477 ;;  shutternumbe    1   22[COMRAM] unsigned char 
  1478 ;; Return value:  Size  Location     Type
  1479 ;;                  1    wreg      void 
  1480 ;; Registers used:
  1481 ;;		wreg, status,2, status,0
  1482 ;; Tracked objects:
  1483 ;;		On entry : 0/0
  1484 ;;		On exit  : 0/0
  1485 ;;		Unchanged: 0/0
  1486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1487 ;;      Params:         0       0       0       0       0       0       0
  1488 ;;      Locals:         1       0       0       0       0       0       0
  1489 ;;      Temps:          0       0       0       0       0       0       0
  1490 ;;      Totals:         1       0       0       0       0       0       0
  1491 ;;Total ram usage:        1 bytes
  1492 ;; Hardware stack levels used:    1
  1493 ;; Hardware stack levels required when called:    3
  1494 ;; This function calls:
  1495 ;;		Nothing
  1496 ;; This function is called by:
  1497 ;;		_shutterStateMachine
  1498 ;; This function uses a non-reentrant model
  1499 ;;
  1500                           
  1501                           	psect	text4
  1502  000ED8                     __ptext4:
  1503                           	opt stack 0
  1504  000ED8                     _shutterOff:
  1505                           	opt stack 26
  1506                           
  1507                           ;incstack = 0
  1508                           ;shutterOff@shutternumber stored from wreg
  1509  000ED8  6E3B               	movwf	shutterOff@shutternumber,c
  1510                           
  1511                           ;shutterhardware.c: 28: switch (shutternumber) {
  1512  000EDA  D00A               	goto	l377
  1513  000EDC                     l378:
  1514  000EDC  9A8A               	bcf	3978,5,c	;volatile
  1515  000EDE  0012               	return	
  1516  000EE0                     l380:
  1517  000EE0  988A               	bcf	3978,4,c	;volatile
  1518  000EE2  0012               	return	
  1519  000EE4                     l381:
  1520  000EE4  968A               	bcf	3978,3,c	;volatile
  1521  000EE6  0012               	return	
  1522  000EE8                     l382:
  1523  000EE8  948A               	bcf	3978,2,c	;volatile
  1524  000EEA  0012               	return	
  1525  000EEC                     l383:
  1526  000EEC  928A               	bcf	3978,1,c	;volatile
  1527                           
  1528                           ;shutterhardware.c: 35: }
  1529  000EEE  0012               	return	
  1530  000EF0                     l377:
  1531  000EF0  503B               	movf	shutterOff@shutternumber,w,c
  1532                           
  1533                           ; Switch size 1, requested type "space"
  1534                           ; Number of cases is 5, Range of values is 0 to 4
  1535                           ; switch strategies available:
  1536                           ; Name         Instructions Cycles
  1537                           ; simple_byte           16     9 (average)
  1538                           ;	Chosen strategy is simple_byte
  1539  000EF2  0A00               	xorlw	0	; case 0
  1540  000EF4  B4D8               	btfsc	status,2,c
  1541  000EF6  D7F2               	goto	l378
  1542  000EF8  0A01               	xorlw	1	; case 1
  1543  000EFA  B4D8               	btfsc	status,2,c
  1544  000EFC  D7F1               	goto	l380
  1545  000EFE  0A03               	xorlw	3	; case 2
  1546  000F00  B4D8               	btfsc	status,2,c
  1547  000F02  D7F0               	goto	l381
  1548  000F04  0A01               	xorlw	1	; case 3
  1549  000F06  B4D8               	btfsc	status,2,c
  1550  000F08  D7EF               	goto	l382
  1551  000F0A  0A07               	xorlw	7	; case 4
  1552  000F0C  A4D8               	btfss	status,2,c
  1553  000F0E  0012               	return	
  1554  000F10  D7ED               	goto	l383
  1555  000F12                     __end_of_shutterOff:
  1556                           	opt stack 0
  1557                           tblptru	equ	0xFF8
  1558                           prodh	equ	0xFF4
  1559                           prodl	equ	0xFF3
  1560                           intcon	equ	0xFF2
  1561                           postinc0	equ	0xFEE
  1562                           wreg	equ	0xFE8
  1563                           indf2	equ	0xFDF
  1564                           postinc2	equ	0xFDE
  1565                           postdec2	equ	0xFDD
  1566                           plusw2	equ	0xFDB
  1567                           fsr2h	equ	0xFDA
  1568                           fsr2l	equ	0xFD9
  1569                           status	equ	0xFD8
  1570                           
  1571 ;; *************** function _shutterDirectionUp *****************
  1572 ;; Defined at:
  1573 ;;		line 39 in file "shutterhardware.c"
  1574 ;; Parameters:    Size  Location     Type
  1575 ;;  shutternumbe    1    wreg     unsigned char 
  1576 ;; Auto vars:     Size  Location     Type
  1577 ;;  shutternumbe    1   22[COMRAM] unsigned char 
  1578 ;; Return value:  Size  Location     Type
  1579 ;;                  1    wreg      void 
  1580 ;; Registers used:
  1581 ;;		wreg, status,2, status,0
  1582 ;; Tracked objects:
  1583 ;;		On entry : 0/0
  1584 ;;		On exit  : 0/0
  1585 ;;		Unchanged: 0/0
  1586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1587 ;;      Params:         0       0       0       0       0       0       0
  1588 ;;      Locals:         1       0       0       0       0       0       0
  1589 ;;      Temps:          0       0       0       0       0       0       0
  1590 ;;      Totals:         1       0       0       0       0       0       0
  1591 ;;Total ram usage:        1 bytes
  1592 ;; Hardware stack levels used:    1
  1593 ;; Hardware stack levels required when called:    3
  1594 ;; This function calls:
  1595 ;;		Nothing
  1596 ;; This function is called by:
  1597 ;;		_shutterStateMachine
  1598 ;; This function uses a non-reentrant model
  1599 ;;
  1600                           
  1601                           	psect	text5
  1602  000C00                     __ptext5:
  1603                           	opt stack 0
  1604  000C00                     _shutterDirectionUp:
  1605                           	opt stack 26
  1606                           
  1607                           ;incstack = 0
  1608                           ;shutterDirectionUp@shutternumber stored from wreg
  1609  000C00  6E3B               	movwf	shutterDirectionUp@shutternumber,c
  1610                           
  1611                           ;shutterhardware.c: 41: switch (shutternumber) {
  1612  000C02  D014               	goto	l387
  1613  000C04                     l388:
  1614                           
  1615                           ;shutterhardware.c: 43: if ( LATBbits.LATB5 == 1)
  1616  000C04  BA8A               	btfsc	3978,5,c	;volatile
  1617  000C06  0012               	return	
  1618                           
  1619                           ;shutterhardware.c: 45: LATBbits.LATB0 = 1;
  1620                           
  1621                           ;shutterhardware.c: 44: return;
  1622  000C08  808A               	bsf	3978,0,c	;volatile
  1623                           
  1624                           ;shutterhardware.c: 46: break;
  1625  000C0A  0012               	return	
  1626  000C0C                     l392:
  1627                           
  1628                           ;shutterhardware.c: 48: if ( LATBbits.LATB4 == 1)
  1629  000C0C  B88A               	btfsc	3978,4,c	;volatile
  1630  000C0E  0012               	return	
  1631                           
  1632                           ;shutterhardware.c: 50: LATDbits.LATD5 = 1;
  1633                           
  1634                           ;shutterhardware.c: 49: return;
  1635  000C10  8A8C               	bsf	3980,5,c	;volatile
  1636                           
  1637                           ;shutterhardware.c: 51: break;
  1638  000C12  0012               	return	
  1639  000C14                     l394:
  1640                           
  1641                           ;shutterhardware.c: 53: if ( LATBbits.LATB3 == 1)
  1642  000C14  B68A               	btfsc	3978,3,c	;volatile
  1643  000C16  0012               	return	
  1644                           
  1645                           ;shutterhardware.c: 55: LATCbits.LATC5 = 1;
  1646                           
  1647                           ;shutterhardware.c: 54: return;
  1648  000C18  8A8B               	bsf	3979,5,c	;volatile
  1649                           
  1650                           ;shutterhardware.c: 56: break;
  1651  000C1A  0012               	return	
  1652  000C1C                     l396:
  1653                           
  1654                           ;shutterhardware.c: 58: if ( LATBbits.LATB2 == 1)
  1655  000C1C  B48A               	btfsc	3978,2,c	;volatile
  1656  000C1E  0012               	return	
  1657                           
  1658                           ;shutterhardware.c: 60: LATCbits.LATC4 = 1;
  1659                           
  1660                           ;shutterhardware.c: 59: return;
  1661  000C20  888B               	bsf	3979,4,c	;volatile
  1662                           
  1663                           ;shutterhardware.c: 61: break;
  1664  000C22  0012               	return	
  1665  000C24                     l398:
  1666                           
  1667                           ;shutterhardware.c: 63: if ( LATBbits.LATB1 == 1)
  1668  000C24  B28A               	btfsc	3978,1,c	;volatile
  1669  000C26  0012               	return	
  1670                           
  1671                           ;shutterhardware.c: 65: LATDbits.LATD2 = 1;
  1672                           
  1673                           ;shutterhardware.c: 64: return;
  1674  000C28  848C               	bsf	3980,2,c	;volatile
  1675                           
  1676                           ;shutterhardware.c: 67: }
  1677                           
  1678                           ;shutterhardware.c: 66: break;
  1679  000C2A  0012               	return	
  1680  000C2C                     l387:
  1681  000C2C  503B               	movf	shutterDirectionUp@shutternumber,w,c
  1682                           
  1683                           ; Switch size 1, requested type "space"
  1684                           ; Number of cases is 5, Range of values is 0 to 4
  1685                           ; switch strategies available:
  1686                           ; Name         Instructions Cycles
  1687                           ; simple_byte           16     9 (average)
  1688                           ;	Chosen strategy is simple_byte
  1689  000C2E  0A00               	xorlw	0	; case 0
  1690  000C30  B4D8               	btfsc	status,2,c
  1691  000C32  D7E8               	goto	l388
  1692  000C34  0A01               	xorlw	1	; case 1
  1693  000C36  B4D8               	btfsc	status,2,c
  1694  000C38  D7E9               	goto	l392
  1695  000C3A  0A03               	xorlw	3	; case 2
  1696  000C3C  B4D8               	btfsc	status,2,c
  1697  000C3E  D7EA               	goto	l394
  1698  000C40  0A01               	xorlw	1	; case 3
  1699  000C42  B4D8               	btfsc	status,2,c
  1700  000C44  D7EB               	goto	l396
  1701  000C46  0A07               	xorlw	7	; case 4
  1702  000C48  A4D8               	btfss	status,2,c
  1703  000C4A  0012               	return	
  1704  000C4C  D7EB               	goto	l398
  1705  000C4E                     __end_of_shutterDirectionUp:
  1706                           	opt stack 0
  1707                           tblptru	equ	0xFF8
  1708                           prodh	equ	0xFF4
  1709                           prodl	equ	0xFF3
  1710                           intcon	equ	0xFF2
  1711                           postinc0	equ	0xFEE
  1712                           wreg	equ	0xFE8
  1713                           indf2	equ	0xFDF
  1714                           postinc2	equ	0xFDE
  1715                           postdec2	equ	0xFDD
  1716                           plusw2	equ	0xFDB
  1717                           fsr2h	equ	0xFDA
  1718                           fsr2l	equ	0xFD9
  1719                           status	equ	0xFD8
  1720                           
  1721 ;; *************** function _shutterDirectionDown *****************
  1722 ;; Defined at:
  1723 ;;		line 72 in file "shutterhardware.c"
  1724 ;; Parameters:    Size  Location     Type
  1725 ;;  shutternumbe    1    wreg     unsigned char 
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;  shutternumbe    1   22[COMRAM] unsigned char 
  1728 ;; Return value:  Size  Location     Type
  1729 ;;                  1    wreg      void 
  1730 ;; Registers used:
  1731 ;;		wreg, status,2, status,0
  1732 ;; Tracked objects:
  1733 ;;		On entry : 0/0
  1734 ;;		On exit  : 0/0
  1735 ;;		Unchanged: 0/0
  1736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1737 ;;      Params:         0       0       0       0       0       0       0
  1738 ;;      Locals:         1       0       0       0       0       0       0
  1739 ;;      Temps:          0       0       0       0       0       0       0
  1740 ;;      Totals:         1       0       0       0       0       0       0
  1741 ;;Total ram usage:        1 bytes
  1742 ;; Hardware stack levels used:    1
  1743 ;; Hardware stack levels required when called:    3
  1744 ;; This function calls:
  1745 ;;		Nothing
  1746 ;; This function is called by:
  1747 ;;		_shutterStateMachine
  1748 ;; This function uses a non-reentrant model
  1749 ;;
  1750                           
  1751                           	psect	text6
  1752  000C4E                     __ptext6:
  1753                           	opt stack 0
  1754  000C4E                     _shutterDirectionDown:
  1755                           	opt stack 26
  1756                           
  1757                           ;incstack = 0
  1758                           ;shutterDirectionDown@shutternumber stored from wreg
  1759  000C4E  6E3B               	movwf	shutterDirectionDown@shutternumber,c
  1760                           
  1761                           ;shutterhardware.c: 74: switch (shutternumber) {
  1762  000C50  D014               	goto	l402
  1763  000C52                     l403:
  1764                           
  1765                           ;shutterhardware.c: 76: if ( LATBbits.LATB5 == 1)
  1766  000C52  BA8A               	btfsc	3978,5,c	;volatile
  1767  000C54  0012               	return	
  1768                           
  1769                           ;shutterhardware.c: 78: LATBbits.LATB0 = 0;
  1770                           
  1771                           ;shutterhardware.c: 77: return;
  1772  000C56  908A               	bcf	3978,0,c	;volatile
  1773                           
  1774                           ;shutterhardware.c: 79: break;
  1775  000C58  0012               	return	
  1776  000C5A                     l407:
  1777                           
  1778                           ;shutterhardware.c: 81: if ( LATBbits.LATB4 == 1)
  1779  000C5A  B88A               	btfsc	3978,4,c	;volatile
  1780  000C5C  0012               	return	
  1781                           
  1782                           ;shutterhardware.c: 83: LATDbits.LATD5 = 0;
  1783                           
  1784                           ;shutterhardware.c: 82: return;
  1785  000C5E  9A8C               	bcf	3980,5,c	;volatile
  1786                           
  1787                           ;shutterhardware.c: 84: break;
  1788  000C60  0012               	return	
  1789  000C62                     l409:
  1790                           
  1791                           ;shutterhardware.c: 86: if ( LATBbits.LATB3 == 1)
  1792  000C62  B68A               	btfsc	3978,3,c	;volatile
  1793  000C64  0012               	return	
  1794                           
  1795                           ;shutterhardware.c: 88: LATCbits.LATC5 = 0;
  1796                           
  1797                           ;shutterhardware.c: 87: return;
  1798  000C66  9A8B               	bcf	3979,5,c	;volatile
  1799                           
  1800                           ;shutterhardware.c: 89: break;
  1801  000C68  0012               	return	
  1802  000C6A                     l411:
  1803                           
  1804                           ;shutterhardware.c: 91: if ( LATBbits.LATB2 == 1)
  1805  000C6A  B48A               	btfsc	3978,2,c	;volatile
  1806  000C6C  0012               	return	
  1807                           
  1808                           ;shutterhardware.c: 93: LATCbits.LATC4 = 0;
  1809                           
  1810                           ;shutterhardware.c: 92: return;
  1811  000C6E  988B               	bcf	3979,4,c	;volatile
  1812                           
  1813                           ;shutterhardware.c: 94: break;
  1814  000C70  0012               	return	
  1815  000C72                     l413:
  1816                           
  1817                           ;shutterhardware.c: 96: if ( LATBbits.LATB1 == 1)
  1818  000C72  B28A               	btfsc	3978,1,c	;volatile
  1819  000C74  0012               	return	
  1820                           
  1821                           ;shutterhardware.c: 98: LATDbits.LATD2 = 0;
  1822                           
  1823                           ;shutterhardware.c: 97: return;
  1824  000C76  948C               	bcf	3980,2,c	;volatile
  1825                           
  1826                           ;shutterhardware.c: 100: }
  1827                           
  1828                           ;shutterhardware.c: 99: break;
  1829  000C78  0012               	return	
  1830  000C7A                     l402:
  1831  000C7A  503B               	movf	shutterDirectionDown@shutternumber,w,c
  1832                           
  1833                           ; Switch size 1, requested type "space"
  1834                           ; Number of cases is 5, Range of values is 0 to 4
  1835                           ; switch strategies available:
  1836                           ; Name         Instructions Cycles
  1837                           ; simple_byte           16     9 (average)
  1838                           ;	Chosen strategy is simple_byte
  1839  000C7C  0A00               	xorlw	0	; case 0
  1840  000C7E  B4D8               	btfsc	status,2,c
  1841  000C80  D7E8               	goto	l403
  1842  000C82  0A01               	xorlw	1	; case 1
  1843  000C84  B4D8               	btfsc	status,2,c
  1844  000C86  D7E9               	goto	l407
  1845  000C88  0A03               	xorlw	3	; case 2
  1846  000C8A  B4D8               	btfsc	status,2,c
  1847  000C8C  D7EA               	goto	l409
  1848  000C8E  0A01               	xorlw	1	; case 3
  1849  000C90  B4D8               	btfsc	status,2,c
  1850  000C92  D7EB               	goto	l411
  1851  000C94  0A07               	xorlw	7	; case 4
  1852  000C96  A4D8               	btfss	status,2,c
  1853  000C98  0012               	return	
  1854  000C9A  D7EB               	goto	l413
  1855  000C9C                     __end_of_shutterDirectionDown:
  1856                           	opt stack 0
  1857                           tblptru	equ	0xFF8
  1858                           prodh	equ	0xFF4
  1859                           prodl	equ	0xFF3
  1860                           intcon	equ	0xFF2
  1861                           postinc0	equ	0xFEE
  1862                           wreg	equ	0xFE8
  1863                           indf2	equ	0xFDF
  1864                           postinc2	equ	0xFDE
  1865                           postdec2	equ	0xFDD
  1866                           plusw2	equ	0xFDB
  1867                           fsr2h	equ	0xFDA
  1868                           fsr2l	equ	0xFD9
  1869                           status	equ	0xFD8
  1870                           
  1871 ;; *************** function _initShutterStateMachine *****************
  1872 ;; Defined at:
  1873 ;;		line 363 in file "shutter.c"
  1874 ;; Parameters:    Size  Location     Type
  1875 ;;		None
  1876 ;; Auto vars:     Size  Location     Type
  1877 ;;  i               1   23[COMRAM] unsigned char 
  1878 ;; Return value:  Size  Location     Type
  1879 ;;                  1    wreg      void 
  1880 ;; Registers used:
  1881 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1882 ;; Tracked objects:
  1883 ;;		On entry : 0/0
  1884 ;;		On exit  : 0/0
  1885 ;;		Unchanged: 0/0
  1886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1887 ;;      Params:         0       0       0       0       0       0       0
  1888 ;;      Locals:         1       0       0       0       0       0       0
  1889 ;;      Temps:          1       0       0       0       0       0       0
  1890 ;;      Totals:         2       0       0       0       0       0       0
  1891 ;;Total ram usage:        2 bytes
  1892 ;; Hardware stack levels used:    1
  1893 ;; Hardware stack levels required when called:    4
  1894 ;; This function calls:
  1895 ;;		_getNumShutters
  1896 ;; This function is called by:
  1897 ;;		_main
  1898 ;; This function uses a non-reentrant model
  1899 ;;
  1900                           
  1901                           	psect	text7
  1902  000B46                     __ptext7:
  1903                           	opt stack 0
  1904  000B46                     _initShutterStateMachine:
  1905                           	opt stack 26
  1906                           
  1907                           ;shutter.c: 365: unsigned char i;
  1908                           ;shutter.c: 367: T1CONbits.RD16 = 1;
  1909                           
  1910                           ;incstack = 0
  1911  000B46  82CD               	bsf	4045,1,c	;volatile
  1912                           
  1913                           ;shutter.c: 368: T1CONbits.T1CKPS = 2;
  1914  000B48  50CD               	movf	4045,w,c	;volatile
  1915  000B4A  0BCF               	andlw	-49
  1916  000B4C  0920               	iorlw	32
  1917  000B4E  6ECD               	movwf	4045,c	;volatile
  1918                           
  1919                           ;shutter.c: 370: T1CONbits.T1OSCEN = 0;
  1920  000B50  96CD               	bcf	4045,3,c	;volatile
  1921                           
  1922                           ;shutter.c: 371: T1CONbits.TMR1CS = 0;
  1923  000B52  0E3F               	movlw	-193
  1924  000B54  16CD               	andwf	4045,f,c	;volatile
  1925                           
  1926                           ;shutter.c: 372: T1CONbits.TMR1ON = 1;
  1927  000B56  80CD               	bsf	4045,0,c	;volatile
  1928                           
  1929                           ;shutter.c: 373: IPR1bits.TMR1IP = 0;
  1930  000B58  909F               	bcf	3999,0,c	;volatile
  1931                           
  1932                           ;shutter.c: 374: PIE1bits.TMR1IE = 1;
  1933  000B5A  809D               	bsf	3997,0,c	;volatile
  1934                           
  1935                           ;shutter.c: 376: for (i = 0; i < getNumShutters(); i++) {
  1936  000B5C  0E00               	movlw	0
  1937  000B5E  6E3C               	movwf	initShutterStateMachine@i,c
  1938  000B60  D01B               	goto	l329
  1939  000B62                     
  1940                           ;shutter.c: 377: shutter[i].state = 1;
  1941  000B62  503C               	movf	initShutterStateMachine@i,w,c
  1942  000B64  0D03               	mullw	3
  1943  000B66  0E16               	movlw	low _shutter
  1944  000B68  24F3               	addwf	prodl,w,c
  1945  000B6A  6ED9               	movwf	fsr2l,c
  1946  000B6C  0E00               	movlw	high _shutter
  1947  000B6E  20F4               	addwfc	prodh,w,c
  1948  000B70  6EDA               	movwf	fsr2h,c
  1949  000B72  0E01               	movlw	1
  1950  000B74  6EDF               	movwf	indf2,c
  1951                           
  1952                           ;shutter.c: 378: shutter[i].count = 0;
  1953  000B76  503C               	movf	initShutterStateMachine@i,w,c
  1954  000B78  0D03               	mullw	3
  1955  000B7A  0E01               	movlw	1
  1956  000B7C  26F3               	addwf	prodl,f,c
  1957  000B7E  0E00               	movlw	0
  1958  000B80  22F4               	addwfc	prodh,f,c
  1959  000B82  0E16               	movlw	low _shutter
  1960  000B84  24F3               	addwf	prodl,w,c
  1961  000B86  6ED9               	movwf	fsr2l,c
  1962  000B88  0E00               	movlw	high _shutter
  1963  000B8A  20F4               	addwfc	prodh,w,c
  1964  000B8C  6EDA               	movwf	fsr2h,c
  1965  000B8E  0E00               	movlw	0
  1966  000B90  6EDE               	movwf	postinc2,c
  1967  000B92  0E00               	movlw	0
  1968  000B94  6EDD               	movwf	postdec2,c
  1969  000B96  2A3C               	incf	initShutterStateMachine@i,f,c
  1970  000B98                     l329:
  1971  000B98  EC08  F009         	call	_getNumShutters	;wreg free
  1972  000B9C  6E3B               	movwf	??_initShutterStateMachine& (0+255),c
  1973  000B9E  503B               	movf	??_initShutterStateMachine,w,c
  1974  000BA0  5C3C               	subwf	initShutterStateMachine@i,w,c
  1975  000BA2  B0D8               	btfsc	status,0,c
  1976  000BA4  0012               	return	
  1977  000BA6  D7DD               	goto	l330
  1978  000BA8                     __end_of_initShutterStateMachine:
  1979                           	opt stack 0
  1980                           tblptru	equ	0xFF8
  1981                           prodh	equ	0xFF4
  1982                           prodl	equ	0xFF3
  1983                           intcon	equ	0xFF2
  1984                           postinc0	equ	0xFEE
  1985                           wreg	equ	0xFE8
  1986                           indf2	equ	0xFDF
  1987                           postinc2	equ	0xFDE
  1988                           postdec2	equ	0xFDD
  1989                           plusw2	equ	0xFDB
  1990                           fsr2h	equ	0xFDA
  1991                           fsr2l	equ	0xFD9
  1992                           status	equ	0xFD8
  1993                           
  1994 ;; *************** function _getNumShutters *****************
  1995 ;; Defined at:
  1996 ;;		line 415 in file "shutter.c"
  1997 ;; Parameters:    Size  Location     Type
  1998 ;;		None
  1999 ;; Auto vars:     Size  Location     Type
  2000 ;;		None
  2001 ;; Return value:  Size  Location     Type
  2002 ;;                  1    wreg      unsigned char 
  2003 ;; Registers used:
  2004 ;;		wreg
  2005 ;; Tracked objects:
  2006 ;;		On entry : 0/0
  2007 ;;		On exit  : 0/0
  2008 ;;		Unchanged: 0/0
  2009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2010 ;;      Params:         0       0       0       0       0       0       0
  2011 ;;      Locals:         0       0       0       0       0       0       0
  2012 ;;      Temps:          0       0       0       0       0       0       0
  2013 ;;      Totals:         0       0       0       0       0       0       0
  2014 ;;Total ram usage:        0 bytes
  2015 ;; Hardware stack levels used:    1
  2016 ;; Hardware stack levels required when called:    3
  2017 ;; This function calls:
  2018 ;;		Nothing
  2019 ;; This function is called by:
  2020 ;;		_main
  2021 ;;		_initShutterStateMachine
  2022 ;; This function uses a non-reentrant model
  2023 ;;
  2024                           
  2025                           	psect	text8
  2026  001210                     __ptext8:
  2027                           	opt stack 0
  2028  001210                     _getNumShutters:
  2029                           	opt stack 26
  2030                           
  2031                           ;shutter.c: 417: return 5;
  2032                           
  2033                           ;incstack = 0
  2034  001210  0E05               	movlw	5
  2035  001212  0012               	return	
  2036  001214                     __end_of_getNumShutters:
  2037                           	opt stack 0
  2038                           tblptru	equ	0xFF8
  2039                           prodh	equ	0xFF4
  2040                           prodl	equ	0xFF3
  2041                           intcon	equ	0xFF2
  2042                           postinc0	equ	0xFEE
  2043                           wreg	equ	0xFE8
  2044                           indf2	equ	0xFDF
  2045                           postinc2	equ	0xFDE
  2046                           postdec2	equ	0xFDD
  2047                           plusw2	equ	0xFDB
  2048                           fsr2h	equ	0xFDA
  2049                           fsr2l	equ	0xFD9
  2050                           status	equ	0xFD8
  2051                           
  2052 ;; *************** function _initRS485 *****************
  2053 ;; Defined at:
  2054 ;;		line 19 in file "rs485.c"
  2055 ;; Parameters:    Size  Location     Type
  2056 ;;		None
  2057 ;; Auto vars:     Size  Location     Type
  2058 ;;		None
  2059 ;; Return value:  Size  Location     Type
  2060 ;;                  1    wreg      void 
  2061 ;; Registers used:
  2062 ;;		wreg, status,2
  2063 ;; Tracked objects:
  2064 ;;		On entry : 0/0
  2065 ;;		On exit  : 0/0
  2066 ;;		Unchanged: 0/0
  2067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2068 ;;      Params:         0       0       0       0       0       0       0
  2069 ;;      Locals:         0       0       0       0       0       0       0
  2070 ;;      Temps:          0       0       0       0       0       0       0
  2071 ;;      Totals:         0       0       0       0       0       0       0
  2072 ;;Total ram usage:        0 bytes
  2073 ;; Hardware stack levels used:    1
  2074 ;; Hardware stack levels required when called:    3
  2075 ;; This function calls:
  2076 ;;		Nothing
  2077 ;; This function is called by:
  2078 ;;		_main
  2079 ;; This function uses a non-reentrant model
  2080 ;;
  2081                           
  2082                           	psect	text9
  2083  0011A8                     __ptext9:
  2084                           	opt stack 0
  2085  0011A8                     _initRS485:
  2086                           	opt stack 27
  2087                           
  2088                           ;rs485.c: 21: BAUDCONbits.BRG16 = 0;
  2089                           
  2090                           ;incstack = 0
  2091  0011A8  96B8               	bcf	4024,3,c	;volatile
  2092                           
  2093                           ;rs485.c: 22: BAUDCONbits.CKTXP = 1;
  2094  0011AA  88B8               	bsf	4024,4,c	;volatile
  2095                           
  2096                           ;rs485.c: 23: SPBRG1 = 3;
  2097  0011AC  0E03               	movlw	3
  2098  0011AE  6EAF               	movwf	4015,c	;volatile
  2099                           
  2100                           ;rs485.c: 24: SPBRGH = 0;
  2101  0011B0  0E00               	movlw	0
  2102  0011B2  6EB0               	movwf	4016,c	;volatile
  2103                           
  2104                           ;rs485.c: 26: RCSTA1bits.CREN = 1;
  2105  0011B4  88AB               	bsf	4011,4,c	;volatile
  2106                           
  2107                           ;rs485.c: 28: RCSTA1bits.SPEN = 1;
  2108  0011B6  8EAB               	bsf	4011,7,c	;volatile
  2109                           
  2110                           ;rs485.c: 30: PIE1bits.RCIE = 1;
  2111  0011B8  8A9D               	bsf	3997,5,c	;volatile
  2112                           
  2113                           ;rs485.c: 31: IPR1bits.RCIP = 1;
  2114  0011BA  8A9F               	bsf	3999,5,c	;volatile
  2115  0011BC  0012               	return		;funcret
  2116  0011BE                     __end_of_initRS485:
  2117                           	opt stack 0
  2118                           tblptru	equ	0xFF8
  2119                           prodh	equ	0xFF4
  2120                           prodl	equ	0xFF3
  2121                           intcon	equ	0xFF2
  2122                           postinc0	equ	0xFEE
  2123                           wreg	equ	0xFE8
  2124                           indf2	equ	0xFDF
  2125                           postinc2	equ	0xFDE
  2126                           postdec2	equ	0xFDD
  2127                           plusw2	equ	0xFDB
  2128                           fsr2h	equ	0xFDA
  2129                           fsr2l	equ	0xFD9
  2130                           status	equ	0xFD8
  2131                           
  2132 ;; *************** function _initProtocol *****************
  2133 ;; Defined at:
  2134 ;;		line 18 in file "protocol.c"
  2135 ;; Parameters:    Size  Location     Type
  2136 ;;		None
  2137 ;; Auto vars:     Size  Location     Type
  2138 ;;		None
  2139 ;; Return value:  Size  Location     Type
  2140 ;;                  1    wreg      void 
  2141 ;; Registers used:
  2142 ;;		wreg, status,2
  2143 ;; Tracked objects:
  2144 ;;		On entry : 0/0
  2145 ;;		On exit  : 0/0
  2146 ;;		Unchanged: 0/0
  2147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2148 ;;      Params:         0       0       0       0       0       0       0
  2149 ;;      Locals:         0       0       0       0       0       0       0
  2150 ;;      Temps:          0       0       0       0       0       0       0
  2151 ;;      Totals:         0       0       0       0       0       0       0
  2152 ;;Total ram usage:        0 bytes
  2153 ;; Hardware stack levels used:    1
  2154 ;; Hardware stack levels required when called:    3
  2155 ;; This function calls:
  2156 ;;		Nothing
  2157 ;; This function is called by:
  2158 ;;		_main
  2159 ;; This function uses a non-reentrant model
  2160 ;;
  2161                           
  2162                           	psect	text10
  2163  001208                     __ptext10:
  2164                           	opt stack 0
  2165  001208                     _initProtocol:
  2166                           	opt stack 27
  2167                           
  2168                           ;protocol.c: 20: protocolState = 0;
  2169                           
  2170                           ;incstack = 0
  2171  001208  0E00               	movlw	0
  2172  00120A  0100               	movlb	0	; () banked
  2173  00120C  6FF2               	movwf	_protocolState& (0+255),b
  2174                           
  2175                           ; BSR set to: 0
  2176  00120E  0012               	return		;funcret
  2177  001210                     __end_of_initProtocol:
  2178                           	opt stack 0
  2179                           tblptru	equ	0xFF8
  2180                           prodh	equ	0xFF4
  2181                           prodl	equ	0xFF3
  2182                           intcon	equ	0xFF2
  2183                           postinc0	equ	0xFEE
  2184                           wreg	equ	0xFE8
  2185                           indf2	equ	0xFDF
  2186                           postinc2	equ	0xFDE
  2187                           postdec2	equ	0xFDD
  2188                           plusw2	equ	0xFDB
  2189                           fsr2h	equ	0xFDA
  2190                           fsr2l	equ	0xFD9
  2191                           status	equ	0xFD8
  2192                           
  2193 ;; *************** function _initI2CSlave *****************
  2194 ;; Defined at:
  2195 ;;		line 59 in file "i2cslave.c"
  2196 ;; Parameters:    Size  Location     Type
  2197 ;;  adress          1    wreg     unsigned char 
  2198 ;; Auto vars:     Size  Location     Type
  2199 ;;  adress          1   22[COMRAM] unsigned char 
  2200 ;;  i               1    0        unsigned char 
  2201 ;; Return value:  Size  Location     Type
  2202 ;;                  1    wreg      void 
  2203 ;; Registers used:
  2204 ;;		wreg, status,2
  2205 ;; Tracked objects:
  2206 ;;		On entry : 0/0
  2207 ;;		On exit  : 0/0
  2208 ;;		Unchanged: 0/0
  2209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2210 ;;      Params:         0       0       0       0       0       0       0
  2211 ;;      Locals:         1       0       0       0       0       0       0
  2212 ;;      Temps:          0       0       0       0       0       0       0
  2213 ;;      Totals:         1       0       0       0       0       0       0
  2214 ;;Total ram usage:        1 bytes
  2215 ;; Hardware stack levels used:    1
  2216 ;; Hardware stack levels required when called:    3
  2217 ;; This function calls:
  2218 ;;		Nothing
  2219 ;; This function is called by:
  2220 ;;		_main
  2221 ;; This function uses a non-reentrant model
  2222 ;;
  2223                           
  2224                           	psect	text11
  2225  000C9C                     __ptext11:
  2226                           	opt stack 0
  2227  000C9C                     _initI2CSlave:
  2228                           	opt stack 27
  2229                           
  2230                           ; BSR set to: 0
  2231                           ;incstack = 0
  2232                           ;initI2CSlave@adress stored from wreg
  2233  000C9C  6E3B               	movwf	initI2CSlave@adress,c
  2234                           
  2235                           ;i2cslave.c: 61: unsigned char i;
  2236                           ;i2cslave.c: 63: spiState = 0;
  2237  000C9E  0E00               	movlw	0
  2238  000CA0  6E10               	movwf	_spiState,c	;volatile
  2239                           
  2240                           ;i2cslave.c: 64: spiCount = 0;
  2241  000CA2  0E00               	movlw	0
  2242  000CA4  6E0E               	movwf	_spiCount,c
  2243                           
  2244                           ;i2cslave.c: 65: spiChecksum = 0;
  2245  000CA6  0E00               	movlw	0
  2246  000CA8  6E0D               	movwf	_spiChecksum,c
  2247                           
  2248                           ;i2cslave.c: 67: LATDbits.LATD0 = 0;
  2249  000CAA  908C               	bcf	3980,0,c	;volatile
  2250                           
  2251                           ;i2cslave.c: 68: LATDbits.LATD1 = 0;
  2252  000CAC  928C               	bcf	3980,1,c	;volatile
  2253                           
  2254                           ;i2cslave.c: 70: PORTDbits.RD0 = 0;
  2255  000CAE  9083               	bcf	3971,0,c	;volatile
  2256                           
  2257                           ;i2cslave.c: 71: PORTDbits.RD1 = 0;
  2258  000CB0  9283               	bcf	3971,1,c	;volatile
  2259                           
  2260                           ;i2cslave.c: 73: ANSELD = 0;
  2261  000CB2  0E00               	movlw	0
  2262  000CB4  010F               	movlb	15	; () banked
  2263  000CB6  6F3B               	movwf	59,b	;volatile
  2264                           
  2265                           ; BSR set to: 15
  2266                           ;i2cslave.c: 74: TRISDbits.TRISD0 = 1;
  2267  000CB8  8095               	bsf	3989,0,c	;volatile
  2268                           
  2269                           ; BSR set to: 15
  2270                           ;i2cslave.c: 75: TRISDbits.TRISD1 = 1;
  2271  000CBA  8295               	bsf	3989,1,c	;volatile
  2272                           
  2273                           ;i2cslave.c: 77: SSP2CON2 = 0x00;
  2274  000CBC  0E00               	movlw	0
  2275  000CBE  6E6B               	movwf	3947,c	;volatile
  2276                           
  2277                           ; BSR set to: 15
  2278                           ;i2cslave.c: 87: SSP2CON2bits.SEN2 = 1;
  2279  000CC0  806B               	bsf	3947,0,c	;volatile
  2280                           
  2281                           ;i2cslave.c: 90: SSP2CON3 = 0x08;
  2282  000CC2  0E08               	movlw	8
  2283  000CC4  6E69               	movwf	3945,c	;volatile
  2284                           
  2285                           ;i2cslave.c: 91: SSP2MSK = 0xFE;
  2286  000CC6  0EFE               	movlw	254
  2287  000CC8  6E6A               	movwf	3946,c	;volatile
  2288                           
  2289                           ;i2cslave.c: 92: SSP2STAT = 0x00;
  2290  000CCA  0E00               	movlw	0
  2291  000CCC  6E6D               	movwf	3949,c	;volatile
  2292                           
  2293                           ; BSR set to: 15
  2294                           ;i2cslave.c: 93: SSP2ADD = adress;
  2295  000CCE  C03B  FF6E         	movff	initI2CSlave@adress,3950	;volatile
  2296                           
  2297                           ; BSR set to: 15
  2298                           ;i2cslave.c: 94: SSP2CON1 = 0x026;
  2299  000CD2  0E26               	movlw	38
  2300  000CD4  6E6C               	movwf	3948,c	;volatile
  2301                           
  2302                           ; BSR set to: 15
  2303                           ;i2cslave.c: 98: PIR3bits.SSP2IF = 0;
  2304  000CD6  9EA4               	bcf	4004,7,c	;volatile
  2305                           
  2306                           ; BSR set to: 15
  2307                           ;i2cslave.c: 99: IPR3bits.SSP2IP = 1;
  2308  000CD8  8EA5               	bsf	4005,7,c	;volatile
  2309                           
  2310                           ; BSR set to: 15
  2311                           ;i2cslave.c: 100: PIE3bits.SSP2IE = 1;
  2312  000CDA  8EA3               	bsf	4003,7,c	;volatile
  2313                           
  2314                           ; BSR set to: 15
  2315                           ;i2cslave.c: 104: PEIE = 1;
  2316  000CDC  8CF2               	bsf	intcon,6,c	;volatile
  2317                           
  2318                           ; BSR set to: 15
  2319  000CDE  0012               	return		;funcret
  2320  000CE0                     __end_of_initI2CSlave:
  2321                           	opt stack 0
  2322                           tblptru	equ	0xFF8
  2323                           prodh	equ	0xFF4
  2324                           prodl	equ	0xFF3
  2325                           intcon	equ	0xFF2
  2326                           postinc0	equ	0xFEE
  2327                           wreg	equ	0xFE8
  2328                           indf2	equ	0xFDF
  2329                           postinc2	equ	0xFDE
  2330                           postdec2	equ	0xFDD
  2331                           plusw2	equ	0xFDB
  2332                           fsr2h	equ	0xFDA
  2333                           fsr2l	equ	0xFD9
  2334                           status	equ	0xFD8
  2335                           
  2336 ;; *************** function _initHardware *****************
  2337 ;; Defined at:
  2338 ;;		line 4 in file "hardware.c"
  2339 ;; Parameters:    Size  Location     Type
  2340 ;;		None
  2341 ;; Auto vars:     Size  Location     Type
  2342 ;;		None
  2343 ;; Return value:  Size  Location     Type
  2344 ;;                  1    wreg      void 
  2345 ;; Registers used:
  2346 ;;		wreg, status,2
  2347 ;; Tracked objects:
  2348 ;;		On entry : 0/0
  2349 ;;		On exit  : 0/0
  2350 ;;		Unchanged: 0/0
  2351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2352 ;;      Params:         0       0       0       0       0       0       0
  2353 ;;      Locals:         0       0       0       0       0       0       0
  2354 ;;      Temps:          0       0       0       0       0       0       0
  2355 ;;      Totals:         0       0       0       0       0       0       0
  2356 ;;Total ram usage:        0 bytes
  2357 ;; Hardware stack levels used:    1
  2358 ;; Hardware stack levels required when called:    3
  2359 ;; This function calls:
  2360 ;;		Nothing
  2361 ;; This function is called by:
  2362 ;;		_main
  2363 ;; This function uses a non-reentrant model
  2364 ;;
  2365                           
  2366                           	psect	text12
  2367  000BA8                     __ptext12:
  2368                           	opt stack 0
  2369  000BA8                     _initHardware:
  2370                           	opt stack 27
  2371                           
  2372                           ;hardware.c: 8: OSCCONbits.IDLEN = 0;
  2373                           
  2374                           ; BSR set to: 15
  2375                           ;incstack = 0
  2376  000BA8  9ED3               	bcf	4051,7,c	;volatile
  2377                           
  2378                           ;hardware.c: 10: OSCCONbits.IRCF2 = 1;
  2379  000BAA  8CD3               	bsf	4051,6,c	;volatile
  2380                           
  2381                           ;hardware.c: 11: OSCCONbits.IRCF1 = 1;
  2382  000BAC  8AD3               	bsf	4051,5,c	;volatile
  2383                           
  2384                           ;hardware.c: 12: OSCCONbits.IRCF0 = 0;
  2385  000BAE  98D3               	bcf	4051,4,c	;volatile
  2386                           
  2387                           ;hardware.c: 14: OSCCONbits.SCS1 = 1;
  2388  000BB0  82D3               	bsf	4051,1,c	;volatile
  2389                           
  2390                           ;hardware.c: 15: OSCCONbits.SCS0 = 0;
  2391  000BB2  90D3               	bcf	4051,0,c	;volatile
  2392                           
  2393                           ;hardware.c: 21: CM1CON0 = 0;
  2394  000BB4  0E00               	movlw	0
  2395  000BB6  6E79               	movwf	3961,c	;volatile
  2396                           
  2397                           ;hardware.c: 22: CM2CON0 = 0;
  2398  000BB8  0E00               	movlw	0
  2399  000BBA  6E78               	movwf	3960,c	;volatile
  2400                           
  2401                           ;hardware.c: 24: ANSELA = 0x00;
  2402  000BBC  0E00               	movlw	0
  2403  000BBE  010F               	movlb	15	; () banked
  2404  000BC0  6F38               	movwf	56,b	;volatile
  2405                           
  2406                           ;hardware.c: 25: LATA = 0x00;
  2407  000BC2  0E00               	movlw	0
  2408  000BC4  6E89               	movwf	3977,c	;volatile
  2409                           
  2410                           ;hardware.c: 26: PORTA = 0x00;
  2411  000BC6  0E00               	movlw	0
  2412  000BC8  6E80               	movwf	3968,c	;volatile
  2413                           
  2414                           ;hardware.c: 27: TRISA = 0b00000110;
  2415  000BCA  0E06               	movlw	6
  2416  000BCC  6E92               	movwf	3986,c	;volatile
  2417                           
  2418                           ;hardware.c: 29: ANSELB = 0x00;
  2419  000BCE  0E00               	movlw	0
  2420  000BD0  6F39               	movwf	57,b	;volatile
  2421                           
  2422                           ;hardware.c: 30: PORTB = 0x00;
  2423  000BD2  0E00               	movlw	0
  2424  000BD4  6E81               	movwf	3969,c	;volatile
  2425                           
  2426                           ;hardware.c: 31: LATB = 0x00;
  2427  000BD6  0E00               	movlw	0
  2428  000BD8  6E8A               	movwf	3978,c	;volatile
  2429                           
  2430                           ;hardware.c: 32: TRISB = 0b00000000;
  2431  000BDA  0E00               	movlw	0
  2432  000BDC  6E93               	movwf	3987,c	;volatile
  2433                           
  2434                           ;hardware.c: 34: ANSELC = 0x00;
  2435  000BDE  0E00               	movlw	0
  2436  000BE0  6F3A               	movwf	58,b	;volatile
  2437                           
  2438                           ;hardware.c: 35: LATC = 0x00;
  2439  000BE2  0E00               	movlw	0
  2440  000BE4  6E8B               	movwf	3979,c	;volatile
  2441                           
  2442                           ;hardware.c: 36: PORTC = 0x00;
  2443  000BE6  0E00               	movlw	0
  2444  000BE8  6E82               	movwf	3970,c	;volatile
  2445                           
  2446                           ;hardware.c: 37: TRISC = 0b11001111;
  2447  000BEA  0ECF               	movlw	207
  2448  000BEC  6E94               	movwf	3988,c	;volatile
  2449                           
  2450                           ;hardware.c: 39: ANSELD = 0x00;
  2451  000BEE  0E00               	movlw	0
  2452  000BF0  6F3B               	movwf	59,b	;volatile
  2453                           
  2454                           ;hardware.c: 40: LATD = 0x00;
  2455  000BF2  0E00               	movlw	0
  2456  000BF4  6E8C               	movwf	3980,c	;volatile
  2457                           
  2458                           ;hardware.c: 41: PORTD = 0x00;
  2459  000BF6  0E00               	movlw	0
  2460  000BF8  6E83               	movwf	3971,c	;volatile
  2461                           
  2462                           ;hardware.c: 42: TRISD = 0b11011011;
  2463  000BFA  0EDB               	movlw	219
  2464  000BFC  6E95               	movwf	3989,c	;volatile
  2465                           
  2466                           ; BSR set to: 15
  2467  000BFE  0012               	return		;funcret
  2468  000C00                     __end_of_initHardware:
  2469                           	opt stack 0
  2470                           tblptru	equ	0xFF8
  2471                           prodh	equ	0xFF4
  2472                           prodl	equ	0xFF3
  2473                           intcon	equ	0xFF2
  2474                           postinc0	equ	0xFEE
  2475                           wreg	equ	0xFE8
  2476                           indf2	equ	0xFDF
  2477                           postinc2	equ	0xFDE
  2478                           postdec2	equ	0xFDD
  2479                           plusw2	equ	0xFDB
  2480                           fsr2h	equ	0xFDA
  2481                           fsr2l	equ	0xFD9
  2482                           status	equ	0xFD8
  2483                           
  2484 ;; *************** function _initButtonTimer *****************
  2485 ;; Defined at:
  2486 ;;		line 31 in file "buttons.c"
  2487 ;; Parameters:    Size  Location     Type
  2488 ;;		None
  2489 ;; Auto vars:     Size  Location     Type
  2490 ;;  i               1   22[COMRAM] unsigned char 
  2491 ;; Return value:  Size  Location     Type
  2492 ;;                  1    wreg      void 
  2493 ;; Registers used:
  2494 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2495 ;; Tracked objects:
  2496 ;;		On entry : 0/0
  2497 ;;		On exit  : 0/0
  2498 ;;		Unchanged: 0/0
  2499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2500 ;;      Params:         0       0       0       0       0       0       0
  2501 ;;      Locals:         1       0       0       0       0       0       0
  2502 ;;      Temps:          0       0       0       0       0       0       0
  2503 ;;      Totals:         1       0       0       0       0       0       0
  2504 ;;Total ram usage:        1 bytes
  2505 ;; Hardware stack levels used:    1
  2506 ;; Hardware stack levels required when called:    3
  2507 ;; This function calls:
  2508 ;;		Nothing
  2509 ;; This function is called by:
  2510 ;;		_main
  2511 ;; This function uses a non-reentrant model
  2512 ;;
  2513                           
  2514                           	psect	text13
  2515  00099E                     __ptext13:
  2516                           	opt stack 0
  2517  00099E                     _initButtonTimer:
  2518                           	opt stack 27
  2519                           
  2520                           ;buttons.c: 33: unsigned char i;
  2521                           ;buttons.c: 35: for ( i = 0; i < 24; i++) {
  2522                           
  2523                           ; BSR set to: 15
  2524                           ;incstack = 0
  2525  00099E  0E00               	movlw	0
  2526  0009A0  6E3B               	movwf	initButtonTimer@i,c
  2527  0009A2                     l2787:
  2528  0009A2  0E17               	movlw	23
  2529  0009A4  643B               	cpfsgt	initButtonTimer@i,c
  2530  0009A6  D001               	goto	l230
  2531  0009A8  D01E               	goto	u2040
  2532  0009AA                     l230:
  2533                           
  2534                           ;buttons.c: 36: buttons[i].isActive = 0;
  2535  0009AA  503B               	movf	initButtonTimer@i,w,c
  2536  0009AC  0D0A               	mullw	10
  2537  0009AE  0E02               	movlw	2
  2538  0009B0  26F3               	addwf	prodl,f,c
  2539  0009B2  0E00               	movlw	0
  2540  0009B4  22F4               	addwfc	prodh,f,c
  2541  0009B6  0E00               	movlw	low _buttons
  2542  0009B8  24F3               	addwf	prodl,w,c
  2543  0009BA  6ED9               	movwf	fsr2l,c
  2544  0009BC  0E01               	movlw	high _buttons
  2545  0009BE  20F4               	addwfc	prodh,w,c
  2546  0009C0  6EDA               	movwf	fsr2h,c
  2547  0009C2  0E00               	movlw	0
  2548  0009C4  6EDF               	movwf	indf2,c
  2549                           
  2550                           ;buttons.c: 37: buttons[i].watchdog = 0;
  2551  0009C6  503B               	movf	initButtonTimer@i,w,c
  2552  0009C8  0D0A               	mullw	10
  2553  0009CA  0E03               	movlw	3
  2554  0009CC  26F3               	addwf	prodl,f,c
  2555  0009CE  0E00               	movlw	0
  2556  0009D0  22F4               	addwfc	prodh,f,c
  2557  0009D2  0E00               	movlw	low _buttons
  2558  0009D4  24F3               	addwf	prodl,w,c
  2559  0009D6  6ED9               	movwf	fsr2l,c
  2560  0009D8  0E01               	movlw	high _buttons
  2561  0009DA  20F4               	addwfc	prodh,w,c
  2562  0009DC  6EDA               	movwf	fsr2h,c
  2563  0009DE  0E00               	movlw	0
  2564  0009E0  6EDF               	movwf	indf2,c
  2565  0009E2  2A3B               	incf	initButtonTimer@i,f,c
  2566  0009E4  D7DE               	goto	l2787
  2567  0009E6                     u2040:
  2568                           
  2569                           ;buttons.c: 38: }
  2570                           ;buttons.c: 40: T0CONbits.TMR0ON = 0;
  2571  0009E6  9ED5               	bcf	4053,7,c	;volatile
  2572                           
  2573                           ;buttons.c: 42: TMR0H = 0;
  2574  0009E8  0E00               	movlw	0
  2575  0009EA  6ED7               	movwf	4055,c	;volatile
  2576                           
  2577                           ;buttons.c: 43: TMR0L = 0;
  2578  0009EC  0E00               	movlw	0
  2579  0009EE  6ED6               	movwf	4054,c	;volatile
  2580                           
  2581                           ;buttons.c: 44: INTCONbits.TMR0IF = 0;
  2582  0009F0  94F2               	bcf	intcon,2,c	;volatile
  2583                           
  2584                           ;buttons.c: 46: T0CONbits.T08BIT = 0;
  2585  0009F2  9CD5               	bcf	4053,6,c	;volatile
  2586                           
  2587                           ;buttons.c: 47: T0CONbits.T0CS = 0;
  2588  0009F4  9AD5               	bcf	4053,5,c	;volatile
  2589                           
  2590                           ;buttons.c: 48: T0CONbits.PSA = 0;
  2591  0009F6  96D5               	bcf	4053,3,c	;volatile
  2592                           
  2593                           ;buttons.c: 50: T0CONbits.T0PS = 0;
  2594  0009F8  90D5               	bcf	4053,0,c	;volatile
  2595  0009FA  92D5               	bcf	4053,1,c	;volatile
  2596  0009FC  94D5               	bcf	4053,2,c	;volatile
  2597                           
  2598                           ;buttons.c: 52: RCONbits.IPEN = 1;
  2599  0009FE  8ED0               	bsf	4048,7,c	;volatile
  2600                           
  2601                           ;buttons.c: 53: INTCONbits.PEIE = 1;
  2602  000A00  8CF2               	bsf	intcon,6,c	;volatile
  2603                           
  2604                           ;buttons.c: 54: INTCON2bits.TMR0IP = 0;
  2605  000A02  94F1               	bcf	intcon2,2,c	;volatile
  2606                           
  2607                           ;buttons.c: 55: INTCONbits.TMR0IE = 1;
  2608  000A04  8AF2               	bsf	intcon,5,c	;volatile
  2609                           
  2610                           ;buttons.c: 60: T0CONbits.TMR0ON = 1;
  2611  000A06  8ED5               	bsf	4053,7,c	;volatile
  2612  000A08  0012               	return		;funcret
  2613  000A0A                     __end_of_initButtonTimer:
  2614                           	opt stack 0
  2615                           tblptru	equ	0xFF8
  2616                           prodh	equ	0xFF4
  2617                           prodl	equ	0xFF3
  2618                           intcon	equ	0xFF2
  2619                           intcon2	equ	0xFF1
  2620                           postinc0	equ	0xFEE
  2621                           wreg	equ	0xFE8
  2622                           indf2	equ	0xFDF
  2623                           postinc2	equ	0xFDE
  2624                           postdec2	equ	0xFDD
  2625                           plusw2	equ	0xFDB
  2626                           fsr2h	equ	0xFDA
  2627                           fsr2l	equ	0xFD9
  2628                           status	equ	0xFD8
  2629                           
  2630 ;; *************** function _i2cParser *****************
  2631 ;; Defined at:
  2632 ;;		line 154 in file "i2cslave.c"
  2633 ;; Parameters:    Size  Location     Type
  2634 ;;  data            1    wreg     unsigned char 
  2635 ;; Auto vars:     Size  Location     Type
  2636 ;;  data            1   31[COMRAM] unsigned char 
  2637 ;; Return value:  Size  Location     Type
  2638 ;;                  1    wreg      void 
  2639 ;; Registers used:
  2640 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2641 ;; Tracked objects:
  2642 ;;		On entry : 0/0
  2643 ;;		On exit  : 0/0
  2644 ;;		Unchanged: 0/0
  2645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2646 ;;      Params:         0       0       0       0       0       0       0
  2647 ;;      Locals:         1       0       0       0       0       0       0
  2648 ;;      Temps:          0       0       0       0       0       0       0
  2649 ;;      Totals:         1       0       0       0       0       0       0
  2650 ;;Total ram usage:        1 bytes
  2651 ;; Hardware stack levels used:    1
  2652 ;; Hardware stack levels required when called:    6
  2653 ;; This function calls:
  2654 ;;		_commandShutterDown
  2655 ;;		_commandShutterGroupDown
  2656 ;;		_commandShutterGroupUp
  2657 ;;		_commandShutterStop
  2658 ;;		_commandShutterUp
  2659 ;;		_fifo3Empty
  2660 ;;		_fifo3Get
  2661 ;;		_fifo3Put
  2662 ;;		_getKeyForShutter
  2663 ;;		_getLastPressedKey
  2664 ;;		_getShutterStatusByte1
  2665 ;;		_getShutterStatusByte2
  2666 ;;		_readShutterGroupByte
  2667 ;;		_setKeyForShutter
  2668 ;;		_storeShutterGroup
  2669 ;;		_testCommandOk
  2670 ;; This function is called by:
  2671 ;;		_main
  2672 ;; This function uses a non-reentrant model
  2673 ;;
  2674                           
  2675                           	psect	text14
  2676  0000F2                     __ptext14:
  2677                           	opt stack 0
  2678  0000F2                     _i2cParser:
  2679                           	opt stack 24
  2680                           
  2681                           ;incstack = 0
  2682                           ;i2cParser@data stored from wreg
  2683  0000F2  6E44               	movwf	i2cParser@data,c
  2684                           
  2685                           ;i2cslave.c: 161: while( !fifo3Empty()) {
  2686  0000F4  D002               	goto	l673
  2687  0000F6                     
  2688                           ;i2cslave.c: 162: fifo3Get();
  2689  0000F6  EC52  F008         	call	_fifo3Get	;wreg free
  2690  0000FA                     l673:
  2691  0000FA  EC5F  F008         	call	_fifo3Empty	;wreg free
  2692  0000FE  0900               	iorlw	0
  2693  000100  B4D8               	btfsc	status,2,c
  2694  000102  D7F9               	goto	l674
  2695                           
  2696                           ;i2cslave.c: 163: }
  2697                           ;i2cslave.c: 165: if (spiCount == 0) {
  2698  000104  500E               	movf	_spiCount,w,c
  2699  000106  A4D8               	btfss	status,2,c
  2700  000108  D003               	goto	l676
  2701                           
  2702                           ;i2cslave.c: 166: spiChecksum = data;
  2703  00010A  C044  F00D         	movff	i2cParser@data,_spiChecksum
  2704                           
  2705                           ;i2cslave.c: 167: }
  2706  00010E  D002               	goto	l677
  2707  000110                     l676:
  2708                           
  2709                           ;i2cslave.c: 168: else {
  2710                           ;i2cslave.c: 172: spiChecksum ^= data;
  2711  000110  5044               	movf	i2cParser@data,w,c
  2712  000112  1A0D               	xorwf	_spiChecksum,f,c
  2713  000114                     l677:
  2714                           
  2715                           ;i2cslave.c: 173: }
  2716                           ;i2cslave.c: 175: spiData[spiCount++] = data;
  2717  000114  500E               	movf	_spiCount,w,c
  2718  000116  0D01               	mullw	1
  2719  000118  0E60               	movlw	low _spiData
  2720  00011A  24F3               	addwf	prodl,w,c
  2721  00011C  6ED9               	movwf	fsr2l,c
  2722  00011E  0E00               	movlw	high _spiData
  2723  000120  20F4               	addwfc	prodh,w,c
  2724  000122  6EDA               	movwf	fsr2h,c
  2725  000124  C044  FFDF         	movff	i2cParser@data,indf2
  2726  000128  2A0E               	incf	_spiCount,f,c
  2727                           
  2728                           ;i2cslave.c: 177: switch ( spiData[0] ) {
  2729  00012A  D0DD               	goto	l678
  2730  00012C                     
  2731                           ;i2cslave.c: 179: if (testCommandOk(3)) {
  2732  00012C  0E03               	movlw	3
  2733  00012E  ECD7  F007         	call	_testCommandOk
  2734  000132  0900               	iorlw	0
  2735  000134  B4D8               	btfsc	status,2,c
  2736  000136  0012               	return	
  2737                           
  2738                           ;i2cslave.c: 180: commandShutterUp(spiData[1]);
  2739  000138  0100               	movlb	0	; () banked
  2740  00013A  5161               	movf	(_spiData+1)& (0+255),w,b
  2741  00013C  EC05  F005         	call	_commandShutterUp
  2742                           
  2743                           ;i2cslave.c: 181: }
  2744                           ;i2cslave.c: 182: break;
  2745  000140  0012               	return	
  2746  000142                     
  2747                           ;i2cslave.c: 184: if (testCommandOk(3)) {
  2748  000142  0E03               	movlw	3
  2749  000144  ECD7  F007         	call	_testCommandOk
  2750  000148  0900               	iorlw	0
  2751  00014A  B4D8               	btfsc	status,2,c
  2752  00014C  0012               	return	
  2753                           
  2754                           ;i2cslave.c: 185: commandShutterDown(spiData[1]);
  2755  00014E  0100               	movlb	0	; () banked
  2756  000150  5161               	movf	(_spiData+1)& (0+255),w,b
  2757  000152  EC3A  F005         	call	_commandShutterDown
  2758                           
  2759                           ;i2cslave.c: 186: }
  2760                           ;i2cslave.c: 187: break;
  2761  000156  0012               	return	
  2762  000158                     
  2763                           ;i2cslave.c: 189: if (testCommandOk(3)) {
  2764  000158  0E03               	movlw	3
  2765  00015A  ECD7  F007         	call	_testCommandOk
  2766  00015E  0900               	iorlw	0
  2767  000160  B4D8               	btfsc	status,2,c
  2768  000162  0012               	return	
  2769                           
  2770                           ;i2cslave.c: 190: commandShutterStop(spiData[1]);
  2771  000164  0100               	movlb	0	; () banked
  2772  000166  5161               	movf	(_spiData+1)& (0+255),w,b
  2773  000168  EC5B  F004         	call	_commandShutterStop
  2774                           
  2775                           ;i2cslave.c: 191: }
  2776                           ;i2cslave.c: 192: break;
  2777  00016C  0012               	return	
  2778  00016E                     
  2779                           ;i2cslave.c: 194: if (testCommandOk(4)) {
  2780  00016E  0E04               	movlw	4
  2781  000170  ECD7  F007         	call	_testCommandOk
  2782  000174  0900               	iorlw	0
  2783  000176  B4D8               	btfsc	status,2,c
  2784  000178  0012               	return	
  2785                           
  2786                           ;i2cslave.c: 195: setKeyForShutter(spiData[1], spiData[2]);
  2787  00017A  C062  F03D         	movff	_spiData+2,setKeyForShutter@key
  2788  00017E  0100               	movlb	0	; () banked
  2789  000180  5161               	movf	(_spiData+1)& (0+255),w,b
  2790  000182  ECDF  F008         	call	_setKeyForShutter
  2791                           
  2792                           ;i2cslave.c: 196: }
  2793                           ;i2cslave.c: 197: break;
  2794  000186  0012               	return	
  2795  000188                     
  2796                           ;i2cslave.c: 199: if (testCommandOk(6)) {
  2797  000188  0E06               	movlw	6
  2798  00018A  ECD7  F007         	call	_testCommandOk
  2799  00018E  0900               	iorlw	0
  2800  000190  B4D8               	btfsc	status,2,c
  2801  000192  0012               	return	
  2802                           
  2803                           ;i2cslave.c: 200: storeShutterGroup(spiData[1], spiData[2], spiData[3], spiData[4]);
  2804  000194  C062  F03D         	movff	_spiData+2,storeShutterGroup@bitmask
  2805  000198  C063  F03E         	movff	_spiData+3,storeShutterGroup@keyUp
  2806  00019C  C064  F03F         	movff	_spiData+4,storeShutterGroup@keyDown
  2807  0001A0  0100               	movlb	0	; () banked
  2808  0001A2  5161               	movf	(_spiData+1)& (0+255),w,b
  2809  0001A4  ECA4  F007         	call	_storeShutterGroup
  2810                           
  2811                           ;i2cslave.c: 201: }
  2812                           ;i2cslave.c: 202: break;
  2813  0001A8  0012               	return	
  2814  0001AA                     
  2815                           ;i2cslave.c: 204: if (testCommandOk(3)) {
  2816  0001AA  0E03               	movlw	3
  2817  0001AC  ECD7  F007         	call	_testCommandOk
  2818  0001B0  0900               	iorlw	0
  2819  0001B2  B4D8               	btfsc	status,2,c
  2820  0001B4  0012               	return	
  2821                           
  2822                           ;i2cslave.c: 206: spiChecksum = 0x00;
  2823  0001B6  0E00               	movlw	0
  2824  0001B8  6E0D               	movwf	_spiChecksum,c
  2825                           
  2826                           ;i2cslave.c: 207: data = readShutterGroupByte(spiData[1], 0);
  2827  0001BA  0E00               	movlw	0
  2828  0001BC  6E3C               	movwf	readShutterGroupByte@which,c
  2829  0001BE  0100               	movlb	0	; () banked
  2830  0001C0  5161               	movf	(_spiData+1)& (0+255),w,b
  2831  0001C2  ECE8  F008         	call	_readShutterGroupByte
  2832  0001C6  6E44               	movwf	i2cParser@data,c
  2833                           
  2834                           ;i2cslave.c: 208: fifo3Put(data);
  2835  0001C8  5044               	movf	i2cParser@data,w,c
  2836  0001CA  EC25  F008         	call	_fifo3Put
  2837                           
  2838                           ;i2cslave.c: 209: spiChecksum ^= data;
  2839  0001CE  5044               	movf	i2cParser@data,w,c
  2840  0001D0  1A0D               	xorwf	_spiChecksum,f,c
  2841                           
  2842                           ;i2cslave.c: 210: data = readShutterGroupByte(spiData[1], 1);
  2843  0001D2  0E01               	movlw	1
  2844  0001D4  6E3C               	movwf	readShutterGroupByte@which,c
  2845  0001D6  0100               	movlb	0	; () banked
  2846  0001D8  5161               	movf	(_spiData+1)& (0+255),w,b
  2847  0001DA  ECE8  F008         	call	_readShutterGroupByte
  2848  0001DE  6E44               	movwf	i2cParser@data,c
  2849                           
  2850                           ;i2cslave.c: 211: fifo3Put(data);
  2851  0001E0  5044               	movf	i2cParser@data,w,c
  2852  0001E2  EC25  F008         	call	_fifo3Put
  2853                           
  2854                           ;i2cslave.c: 212: spiChecksum ^= data;
  2855  0001E6  5044               	movf	i2cParser@data,w,c
  2856  0001E8  1A0D               	xorwf	_spiChecksum,f,c
  2857                           
  2858                           ;i2cslave.c: 213: data = readShutterGroupByte(spiData[1], 2);
  2859  0001EA  0E02               	movlw	2
  2860  0001EC  6E3C               	movwf	readShutterGroupByte@which,c
  2861  0001EE  0100               	movlb	0	; () banked
  2862  0001F0  5161               	movf	(_spiData+1)& (0+255),w,b
  2863  0001F2  ECE8  F008         	call	_readShutterGroupByte
  2864  0001F6  6E44               	movwf	i2cParser@data,c
  2865                           
  2866                           ;i2cslave.c: 214: fifo3Put(data);
  2867  0001F8  5044               	movf	i2cParser@data,w,c
  2868  0001FA  EC25  F008         	call	_fifo3Put
  2869                           
  2870                           ;i2cslave.c: 215: spiChecksum ^= data;
  2871  0001FE  5044               	movf	i2cParser@data,w,c
  2872  000200  1A0D               	xorwf	_spiChecksum,f,c
  2873                           
  2874                           ;i2cslave.c: 216: fifo3Put(spiChecksum);
  2875  000202  500D               	movf	_spiChecksum,w,c
  2876  000204  EC25  F008         	call	_fifo3Put
  2877                           
  2878                           ;i2cslave.c: 217: }
  2879                           ;i2cslave.c: 218: break;
  2880  000208  0012               	return	
  2881  00020A                     
  2882                           ;i2cslave.c: 220: if (testCommandOk(3)) {
  2883  00020A  0E03               	movlw	3
  2884  00020C  ECD7  F007         	call	_testCommandOk
  2885  000210  0900               	iorlw	0
  2886  000212  B4D8               	btfsc	status,2,c
  2887  000214  0012               	return	
  2888                           
  2889                           ;i2cslave.c: 221: commandShutterGroupUp(spiData[1]);
  2890  000216  0100               	movlb	0	; () banked
  2891  000218  5161               	movf	(_spiData+1)& (0+255),w,b
  2892  00021A  EC92  F006         	call	_commandShutterGroupUp
  2893                           
  2894                           ;i2cslave.c: 222: }
  2895                           ;i2cslave.c: 223: break;
  2896  00021E  0012               	return	
  2897  000220                     
  2898                           ;i2cslave.c: 225: if (testCommandOk(3)) {
  2899  000220  0E03               	movlw	3
  2900  000222  ECD7  F007         	call	_testCommandOk
  2901  000226  0900               	iorlw	0
  2902  000228  B4D8               	btfsc	status,2,c
  2903  00022A  0012               	return	
  2904                           
  2905                           ;i2cslave.c: 226: commandShutterGroupDown(spiData[1]);
  2906  00022C  0100               	movlb	0	; () banked
  2907  00022E  5161               	movf	(_spiData+1)& (0+255),w,b
  2908  000230  ECB3  F006         	call	_commandShutterGroupDown
  2909                           
  2910                           ;i2cslave.c: 227: }
  2911                           ;i2cslave.c: 228: break;
  2912  000234  0012               	return	
  2913  000236                     
  2914                           ;i2cslave.c: 231: if (testCommandOk(3)) {
  2915  000236  0E03               	movlw	3
  2916  000238  ECD7  F007         	call	_testCommandOk
  2917  00023C  0900               	iorlw	0
  2918  00023E  B4D8               	btfsc	status,2,c
  2919  000240  0012               	return	
  2920                           
  2921                           ;i2cslave.c: 232: fifo3Put(getKeyForShutter(spiData[1]));
  2922  000242  0100               	movlb	0	; () banked
  2923  000244  5161               	movf	(_spiData+1)& (0+255),w,b
  2924  000246  ECFF  F008         	call	_getKeyForShutter
  2925  00024A  EC25  F008         	call	_fifo3Put
  2926                           
  2927                           ;i2cslave.c: 233: fifo3Put(getKeyForShutter(spiData[1] ^0xFF));
  2928  00024E  0100               	movlb	0	; () banked
  2929  000250  5161               	movf	(_spiData+1)& (0+255),w,b
  2930  000252  0AFF               	xorlw	255
  2931  000254  ECFF  F008         	call	_getKeyForShutter
  2932  000258  EC25  F008         	call	_fifo3Put
  2933                           
  2934                           ;i2cslave.c: 234: }
  2935                           ;i2cslave.c: 235: break;
  2936  00025C  0012               	return	
  2937  00025E                     
  2938                           ;i2cslave.c: 237: if ( spiCount == 2 ) {
  2939  00025E  0E02               	movlw	2
  2940  000260  180E               	xorwf	_spiCount,w,c
  2941  000262  A4D8               	btfss	status,2,c
  2942  000264  0012               	return	
  2943                           
  2944                           ;i2cslave.c: 238: if ( spiChecksum == 0xFF) {
  2945  000266  280D               	incf	_spiChecksum,w,c
  2946  000268  A4D8               	btfss	status,2,c
  2947  00026A  D00E               	goto	l700
  2948                           
  2949                           ;i2cslave.c: 239: fifo3Put('!');
  2950  00026C  0E21               	movlw	33
  2951  00026E  EC25  F008         	call	_fifo3Put
  2952                           
  2953                           ;i2cslave.c: 240: data = getLastPressedKey();
  2954  000272  EC0A  F009         	call	_getLastPressedKey	;wreg free
  2955  000276  6E44               	movwf	i2cParser@data,c
  2956                           
  2957                           ;i2cslave.c: 241: fifo3Put(data);
  2958  000278  5044               	movf	i2cParser@data,w,c
  2959  00027A  EC25  F008         	call	_fifo3Put
  2960                           
  2961                           ;i2cslave.c: 242: fifo3Put(0xFF^data);
  2962  00027E  5044               	movf	i2cParser@data,w,c
  2963  000280  0AFF               	xorlw	255
  2964  000282  EC25  F008         	call	_fifo3Put
  2965                           
  2966                           ;i2cslave.c: 243: }
  2967  000286  D003               	goto	l701
  2968  000288                     l700:
  2969                           
  2970                           ;i2cslave.c: 244: else {
  2971                           ;i2cslave.c: 245: fifo3Put('?');
  2972  000288  0E3F               	movlw	63
  2973  00028A  EC25  F008         	call	_fifo3Put
  2974  00028E                     l701:
  2975                           
  2976                           ;i2cslave.c: 246: }
  2977                           ;i2cslave.c: 247: spiCount = 0;
  2978  00028E  0E00               	movlw	0
  2979  000290  6E0E               	movwf	_spiCount,c
  2980                           
  2981                           ;i2cslave.c: 248: }
  2982                           ;i2cslave.c: 249: break;
  2983  000292  0012               	return	
  2984  000294                     
  2985                           ;i2cslave.c: 251: if ( spiCount == 2 ) {
  2986  000294  0E02               	movlw	2
  2987  000296  180E               	xorwf	_spiCount,w,c
  2988  000298  A4D8               	btfss	status,2,c
  2989  00029A  0012               	return	
  2990                           
  2991                           ;i2cslave.c: 252: if ( spiChecksum == 0xFF) {
  2992  00029C  280D               	incf	_spiChecksum,w,c
  2993  00029E  A4D8               	btfss	status,2,c
  2994  0002A0  D019               	goto	l704
  2995                           
  2996                           ;i2cslave.c: 253: fifo3Put('!');
  2997  0002A2  0E21               	movlw	33
  2998  0002A4  EC25  F008         	call	_fifo3Put
  2999                           
  3000                           ;i2cslave.c: 255: spiChecksum = 0x00;
  3001  0002A8  0E00               	movlw	0
  3002  0002AA  6E0D               	movwf	_spiChecksum,c
  3003                           
  3004                           ;i2cslave.c: 256: data = getShutterStatusByte1();
  3005  0002AC  EC13  F007         	call	_getShutterStatusByte1	;wreg free
  3006  0002B0  6E44               	movwf	i2cParser@data,c
  3007                           
  3008                           ;i2cslave.c: 257: fifo3Put(data);
  3009  0002B2  5044               	movf	i2cParser@data,w,c
  3010  0002B4  EC25  F008         	call	_fifo3Put
  3011                           
  3012                           ;i2cslave.c: 258: spiChecksum ^= data;
  3013  0002B8  5044               	movf	i2cParser@data,w,c
  3014  0002BA  1A0D               	xorwf	_spiChecksum,f,c
  3015                           
  3016                           ;i2cslave.c: 259: data = getShutterStatusByte2();
  3017  0002BC  ECF5  F006         	call	_getShutterStatusByte2	;wreg free
  3018  0002C0  6E44               	movwf	i2cParser@data,c
  3019                           
  3020                           ;i2cslave.c: 260: fifo3Put(data);
  3021  0002C2  5044               	movf	i2cParser@data,w,c
  3022  0002C4  EC25  F008         	call	_fifo3Put
  3023                           
  3024                           ;i2cslave.c: 261: spiChecksum ^= data;
  3025  0002C8  5044               	movf	i2cParser@data,w,c
  3026  0002CA  1A0D               	xorwf	_spiChecksum,f,c
  3027                           
  3028                           ;i2cslave.c: 262: fifo3Put(spiChecksum);
  3029  0002CC  500D               	movf	_spiChecksum,w,c
  3030  0002CE  EC25  F008         	call	_fifo3Put
  3031                           
  3032                           ;i2cslave.c: 263: }
  3033  0002D2  D003               	goto	l705
  3034  0002D4                     l704:
  3035                           
  3036                           ;i2cslave.c: 264: else {
  3037                           ;i2cslave.c: 265: fifo3Put('?');
  3038  0002D4  0E3F               	movlw	63
  3039  0002D6  EC25  F008         	call	_fifo3Put
  3040  0002DA                     l705:
  3041                           
  3042                           ;i2cslave.c: 266: }
  3043                           ;i2cslave.c: 267: spiCount = 0;
  3044  0002DA  0E00               	movlw	0
  3045  0002DC  6E0E               	movwf	_spiCount,c
  3046                           
  3047                           ;i2cslave.c: 268: }
  3048                           ;i2cslave.c: 269: break;
  3049  0002DE  0012               	return	
  3050  0002E0                     
  3051                           ;i2cslave.c: 272: spiCount = 0;
  3052  0002E0  0E00               	movlw	0
  3053  0002E2  6E0E               	movwf	_spiCount,c
  3054                           
  3055                           ;i2cslave.c: 274: }
  3056                           
  3057                           ;i2cslave.c: 273: break;
  3058  0002E4  0012               	return	
  3059  0002E6                     l678:
  3060  0002E6  0100               	movlb	0	; () banked
  3061  0002E8  5160               	movf	_spiData& (0+255),w,b
  3062                           
  3063                           ; Switch size 1, requested type "space"
  3064                           ; Number of cases is 11, Range of values is 68 to 90
  3065                           ; switch strategies available:
  3066                           ; Name         Instructions Cycles
  3067                           ; simple_byte           34    18 (average)
  3068                           ;	Chosen strategy is simple_byte
  3069  0002EA  0A44               	xorlw	68	; case 68
  3070  0002EC  B4D8               	btfsc	status,2,c
  3071  0002EE  D729               	goto	l682
  3072  0002F0  0A03               	xorlw	3	; case 71
  3073  0002F2  B4D8               	btfsc	status,2,c
  3074  0002F4  D7A0               	goto	l696
  3075  0002F6  0A0C               	xorlw	12	; case 75
  3076  0002F8  B4D8               	btfsc	status,2,c
  3077  0002FA  D739               	goto	l686
  3078  0002FC  0A07               	xorlw	7	; case 76
  3079  0002FE  B4D8               	btfsc	status,2,c
  3080  000300  D7AE               	goto	l698
  3081  000302  0A01               	xorlw	1	; case 77
  3082  000304  B4D8               	btfsc	status,2,c
  3083  000306  D751               	goto	l690
  3084  000308  0A03               	xorlw	3	; case 78
  3085  00030A  B4D8               	btfsc	status,2,c
  3086  00030C  D73D               	goto	l688
  3087  00030E  0A01               	xorlw	1	; case 79
  3088  000310  B4D8               	btfsc	status,2,c
  3089  000312  D77B               	goto	l692
  3090  000314  0A1F               	xorlw	31	; case 80
  3091  000316  B4D8               	btfsc	status,2,c
  3092  000318  D783               	goto	l694
  3093  00031A  0A03               	xorlw	3	; case 83
  3094  00031C  B4D8               	btfsc	status,2,c
  3095  00031E  D71C               	goto	l684
  3096  000320  0A06               	xorlw	6	; case 85
  3097  000322  B4D8               	btfsc	status,2,c
  3098  000324  D703               	goto	l679
  3099  000326  0A0F               	xorlw	15	; case 90
  3100  000328  B4D8               	btfsc	status,2,c
  3101  00032A  D7B4               	goto	l702
  3102  00032C  D7D9               	goto	l706
  3103  00032E                     __end_of_i2cParser:
  3104                           	opt stack 0
  3105                           tblptru	equ	0xFF8
  3106                           prodh	equ	0xFF4
  3107                           prodl	equ	0xFF3
  3108                           intcon	equ	0xFF2
  3109                           intcon2	equ	0xFF1
  3110                           postinc0	equ	0xFEE
  3111                           wreg	equ	0xFE8
  3112                           indf2	equ	0xFDF
  3113                           postinc2	equ	0xFDE
  3114                           postdec2	equ	0xFDD
  3115                           plusw2	equ	0xFDB
  3116                           fsr2h	equ	0xFDA
  3117                           fsr2l	equ	0xFD9
  3118                           status	equ	0xFD8
  3119                           
  3120 ;; *************** function _testCommandOk *****************
  3121 ;; Defined at:
  3122 ;;		line 133 in file "i2cslave.c"
  3123 ;; Parameters:    Size  Location     Type
  3124 ;;  numBytes        1    wreg     unsigned char 
  3125 ;; Auto vars:     Size  Location     Type
  3126 ;;  numBytes        1   25[COMRAM] unsigned char 
  3127 ;; Return value:  Size  Location     Type
  3128 ;;                  1    wreg      unsigned char 
  3129 ;; Registers used:
  3130 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3131 ;; Tracked objects:
  3132 ;;		On entry : 0/0
  3133 ;;		On exit  : 0/0
  3134 ;;		Unchanged: 0/0
  3135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3136 ;;      Params:         0       0       0       0       0       0       0
  3137 ;;      Locals:         1       0       0       0       0       0       0
  3138 ;;      Temps:          0       0       0       0       0       0       0
  3139 ;;      Totals:         1       0       0       0       0       0       0
  3140 ;;Total ram usage:        1 bytes
  3141 ;; Hardware stack levels used:    1
  3142 ;; Hardware stack levels required when called:    4
  3143 ;; This function calls:
  3144 ;;		_fifo3Put
  3145 ;; This function is called by:
  3146 ;;		_i2cParser
  3147 ;; This function uses a non-reentrant model
  3148 ;;
  3149                           
  3150                           	psect	text15
  3151  000FAE                     __ptext15:
  3152                           	opt stack 0
  3153  000FAE                     _testCommandOk:
  3154                           	opt stack 25
  3155                           
  3156                           ;incstack = 0
  3157                           ;testCommandOk@numBytes stored from wreg
  3158  000FAE  6E3E               	movwf	testCommandOk@numBytes,c
  3159                           
  3160                           ;i2cslave.c: 135: if ( spiCount == numBytes ) {
  3161  000FB0  503E               	movf	testCommandOk@numBytes,w,c
  3162  000FB2  180E               	xorwf	_spiCount,w,c
  3163  000FB4  A4D8               	btfss	status,2,c
  3164  000FB6  D00F               	goto	l667
  3165                           
  3166                           ;i2cslave.c: 136: if ( spiChecksum == 0) {
  3167  000FB8  500D               	movf	_spiChecksum,w,c
  3168  000FBA  A4D8               	btfss	status,2,c
  3169  000FBC  D007               	goto	l668
  3170                           
  3171                           ;i2cslave.c: 137: fifo3Put('!');
  3172  000FBE  0E21               	movlw	33
  3173  000FC0  EC25  F008         	call	_fifo3Put
  3174                           
  3175                           ;i2cslave.c: 138: spiCount = 0;
  3176  000FC4  0E00               	movlw	0
  3177  000FC6  6E0E               	movwf	_spiCount,c
  3178                           
  3179                           ;i2cslave.c: 139: return 1;
  3180  000FC8  0E01               	movlw	1
  3181  000FCA  0012               	return	
  3182  000FCC                     l668:
  3183                           
  3184                           ;i2cslave.c: 141: else {
  3185                           ;i2cslave.c: 142: fifo3Put('?');
  3186  000FCC  0E3F               	movlw	63
  3187  000FCE  EC25  F008         	call	_fifo3Put
  3188                           
  3189                           ;i2cslave.c: 143: }
  3190                           ;i2cslave.c: 144: spiCount = 0;
  3191  000FD2  0E00               	movlw	0
  3192  000FD4  6E0E               	movwf	_spiCount,c
  3193  000FD6                     l667:
  3194                           
  3195                           ;i2cslave.c: 145: }
  3196                           ;i2cslave.c: 146: return 0;
  3197  000FD6  0E00               	movlw	0
  3198  000FD8  0012               	return	
  3199  000FDA                     __end_of_testCommandOk:
  3200                           	opt stack 0
  3201                           tblptru	equ	0xFF8
  3202                           prodh	equ	0xFF4
  3203                           prodl	equ	0xFF3
  3204                           intcon	equ	0xFF2
  3205                           intcon2	equ	0xFF1
  3206                           postinc0	equ	0xFEE
  3207                           wreg	equ	0xFE8
  3208                           indf2	equ	0xFDF
  3209                           postinc2	equ	0xFDE
  3210                           postdec2	equ	0xFDD
  3211                           plusw2	equ	0xFDB
  3212                           fsr2h	equ	0xFDA
  3213                           fsr2l	equ	0xFD9
  3214                           status	equ	0xFD8
  3215                           
  3216 ;; *************** function _fifo3Put *****************
  3217 ;; Defined at:
  3218 ;;		line 84 in file "fifo.c"
  3219 ;; Parameters:    Size  Location     Type
  3220 ;;  in              1    wreg     unsigned char 
  3221 ;; Auto vars:     Size  Location     Type
  3222 ;;  in              1   24[COMRAM] unsigned char 
  3223 ;; Return value:  Size  Location     Type
  3224 ;;                  1    wreg      void 
  3225 ;; Registers used:
  3226 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3227 ;; Tracked objects:
  3228 ;;		On entry : 0/0
  3229 ;;		On exit  : 0/0
  3230 ;;		Unchanged: 0/0
  3231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3232 ;;      Params:         0       0       0       0       0       0       0
  3233 ;;      Locals:         1       0       0       0       0       0       0
  3234 ;;      Temps:          2       0       0       0       0       0       0
  3235 ;;      Totals:         3       0       0       0       0       0       0
  3236 ;;Total ram usage:        3 bytes
  3237 ;; Hardware stack levels used:    1
  3238 ;; Hardware stack levels required when called:    3
  3239 ;; This function calls:
  3240 ;;		Nothing
  3241 ;; This function is called by:
  3242 ;;		_testCommandOk
  3243 ;;		_i2cParser
  3244 ;; This function uses a non-reentrant model
  3245 ;;
  3246                           
  3247                           	psect	text16
  3248  00104A                     __ptext16:
  3249                           	opt stack 0
  3250  00104A                     _fifo3Put:
  3251                           	opt stack 25
  3252                           
  3253                           ;incstack = 0
  3254                           ;fifo3Put@in stored from wreg
  3255  00104A  6E3D               	movwf	fifo3Put@in,c
  3256                           
  3257                           ;fifo.c: 85: fifo3[fifo3In++ & 0x0F] = in;
  3258  00104C  5006               	movf	_fifo3In,w,c
  3259  00104E  0B0F               	andlw	15
  3260  001050  6E3B               	movwf	??_fifo3Put& (0+255),c
  3261  001052  6A3C               	clrf	(??_fifo3Put+1)& (0+255),c
  3262  001054  0EC0               	movlw	low _fifo3
  3263  001056  243B               	addwf	??_fifo3Put,w,c
  3264  001058  6ED9               	movwf	fsr2l,c
  3265  00105A  0E00               	movlw	high _fifo3
  3266  00105C  203C               	addwfc	??_fifo3Put+1,w,c
  3267  00105E  6EDA               	movwf	fsr2h,c
  3268  001060  C03D  FFDF         	movff	fifo3Put@in,indf2
  3269  001064  2A06               	incf	_fifo3In,f,c
  3270  001066  0012               	return		;funcret
  3271  001068                     __end_of_fifo3Put:
  3272                           	opt stack 0
  3273                           tblptru	equ	0xFF8
  3274                           prodh	equ	0xFF4
  3275                           prodl	equ	0xFF3
  3276                           intcon	equ	0xFF2
  3277                           intcon2	equ	0xFF1
  3278                           postinc0	equ	0xFEE
  3279                           wreg	equ	0xFE8
  3280                           indf2	equ	0xFDF
  3281                           postinc2	equ	0xFDE
  3282                           postdec2	equ	0xFDD
  3283                           plusw2	equ	0xFDB
  3284                           fsr2h	equ	0xFDA
  3285                           fsr2l	equ	0xFD9
  3286                           status	equ	0xFD8
  3287                           
  3288 ;; *************** function _storeShutterGroup *****************
  3289 ;; Defined at:
  3290 ;;		line 12 in file "shuttergroups.c"
  3291 ;; Parameters:    Size  Location     Type
  3292 ;;  number          1    wreg     unsigned char 
  3293 ;;  bitmask         1   24[COMRAM] unsigned char 
  3294 ;;  keyUp           1   25[COMRAM] unsigned char 
  3295 ;;  keyDown         1   26[COMRAM] unsigned char 
  3296 ;; Auto vars:     Size  Location     Type
  3297 ;;  number          1   27[COMRAM] unsigned char 
  3298 ;; Return value:  Size  Location     Type
  3299 ;;                  1    wreg      void 
  3300 ;; Registers used:
  3301 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3302 ;; Tracked objects:
  3303 ;;		On entry : 0/0
  3304 ;;		On exit  : 0/0
  3305 ;;		Unchanged: 0/0
  3306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3307 ;;      Params:         3       0       0       0       0       0       0
  3308 ;;      Locals:         1       0       0       0       0       0       0
  3309 ;;      Temps:          0       0       0       0       0       0       0
  3310 ;;      Totals:         4       0       0       0       0       0       0
  3311 ;;Total ram usage:        4 bytes
  3312 ;; Hardware stack levels used:    1
  3313 ;; Hardware stack levels required when called:    4
  3314 ;; This function calls:
  3315 ;;		_eepromWrite
  3316 ;; This function is called by:
  3317 ;;		_i2cParser
  3318 ;; This function uses a non-reentrant model
  3319 ;;
  3320                           
  3321                           	psect	text17
  3322  000F48                     __ptext17:
  3323                           	opt stack 0
  3324  000F48                     _storeShutterGroup:
  3325                           	opt stack 25
  3326                           
  3327                           ;incstack = 0
  3328                           ;storeShutterGroup@number stored from wreg
  3329  000F48  6E40               	movwf	storeShutterGroup@number,c
  3330                           
  3331                           ;shuttergroups.c: 14: eepromWrite(0x20 + (0x03 * number) + 0, bitmask);
  3332  000F4A  C03D  F03B         	movff	storeShutterGroup@bitmask,eepromWrite@data
  3333  000F4E  5040               	movf	storeShutterGroup@number,w,c
  3334  000F50  0D03               	mullw	3
  3335  000F52  50F3               	movf	prodl,w,c
  3336  000F54  0F20               	addlw	32
  3337  000F56  ECED  F007         	call	_eepromWrite
  3338                           
  3339                           ;shuttergroups.c: 15: eepromWrite(0x20 + (0x03 * number) + 1, keyUp);
  3340  000F5A  C03E  F03B         	movff	storeShutterGroup@keyUp,eepromWrite@data
  3341  000F5E  5040               	movf	storeShutterGroup@number,w,c
  3342  000F60  0D03               	mullw	3
  3343  000F62  50F3               	movf	prodl,w,c
  3344  000F64  0F21               	addlw	33
  3345  000F66  ECED  F007         	call	_eepromWrite
  3346                           
  3347                           ;shuttergroups.c: 16: eepromWrite(0x20 + (0x03 * number) + 2, keyDown);
  3348  000F6A  C03F  F03B         	movff	storeShutterGroup@keyDown,eepromWrite@data
  3349  000F6E  5040               	movf	storeShutterGroup@number,w,c
  3350  000F70  0D03               	mullw	3
  3351  000F72  50F3               	movf	prodl,w,c
  3352  000F74  0F22               	addlw	34
  3353  000F76  ECED  F007         	call	_eepromWrite
  3354  000F7A  0012               	return		;funcret
  3355  000F7C                     __end_of_storeShutterGroup:
  3356                           	opt stack 0
  3357                           tblptru	equ	0xFF8
  3358                           prodh	equ	0xFF4
  3359                           prodl	equ	0xFF3
  3360                           intcon	equ	0xFF2
  3361                           intcon2	equ	0xFF1
  3362                           postinc0	equ	0xFEE
  3363                           wreg	equ	0xFE8
  3364                           indf2	equ	0xFDF
  3365                           postinc2	equ	0xFDE
  3366                           postdec2	equ	0xFDD
  3367                           plusw2	equ	0xFDB
  3368                           fsr2h	equ	0xFDA
  3369                           fsr2l	equ	0xFD9
  3370                           status	equ	0xFD8
  3371                           
  3372 ;; *************** function _setKeyForShutter *****************
  3373 ;; Defined at:
  3374 ;;		line 35 in file "buttonmatrix.c"
  3375 ;; Parameters:    Size  Location     Type
  3376 ;;  shutter         1    wreg     unsigned char 
  3377 ;;  key             1   24[COMRAM] unsigned char 
  3378 ;; Auto vars:     Size  Location     Type
  3379 ;;  shutter         1   25[COMRAM] unsigned char 
  3380 ;; Return value:  Size  Location     Type
  3381 ;;                  1    wreg      void 
  3382 ;; Registers used:
  3383 ;;		wreg, status,2, status,0, cstack
  3384 ;; Tracked objects:
  3385 ;;		On entry : 0/0
  3386 ;;		On exit  : 0/0
  3387 ;;		Unchanged: 0/0
  3388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3389 ;;      Params:         1       0       0       0       0       0       0
  3390 ;;      Locals:         1       0       0       0       0       0       0
  3391 ;;      Temps:          0       0       0       0       0       0       0
  3392 ;;      Totals:         2       0       0       0       0       0       0
  3393 ;;Total ram usage:        2 bytes
  3394 ;; Hardware stack levels used:    1
  3395 ;; Hardware stack levels required when called:    4
  3396 ;; This function calls:
  3397 ;;		_eepromWrite
  3398 ;;		_initButtonMatrix
  3399 ;; This function is called by:
  3400 ;;		_i2cParser
  3401 ;; This function uses a non-reentrant model
  3402 ;;
  3403                           
  3404                           	psect	text18
  3405  0011BE                     __ptext18:
  3406                           	opt stack 0
  3407  0011BE                     _setKeyForShutter:
  3408                           	opt stack 25
  3409                           
  3410                           ;incstack = 0
  3411                           ;setKeyForShutter@shutter stored from wreg
  3412  0011BE  6E3E               	movwf	setKeyForShutter@shutter,c
  3413                           
  3414                           ;buttonmatrix.c: 37: eepromWrite(shutter, key);
  3415  0011C0  C03D  F03B         	movff	setKeyForShutter@key,eepromWrite@data
  3416  0011C4  503E               	movf	setKeyForShutter@shutter,w,c
  3417  0011C6  ECED  F007         	call	_eepromWrite
  3418                           
  3419                           ;buttonmatrix.c: 38: initButtonMatrix();
  3420  0011CA  EC13  F008         	call	_initButtonMatrix	;wreg free
  3421  0011CE  0012               	return		;funcret
  3422  0011D0                     __end_of_setKeyForShutter:
  3423                           	opt stack 0
  3424                           tblptru	equ	0xFF8
  3425                           prodh	equ	0xFF4
  3426                           prodl	equ	0xFF3
  3427                           intcon	equ	0xFF2
  3428                           intcon2	equ	0xFF1
  3429                           postinc0	equ	0xFEE
  3430                           wreg	equ	0xFE8
  3431                           indf2	equ	0xFDF
  3432                           postinc2	equ	0xFDE
  3433                           postdec2	equ	0xFDD
  3434                           plusw2	equ	0xFDB
  3435                           fsr2h	equ	0xFDA
  3436                           fsr2l	equ	0xFD9
  3437                           status	equ	0xFD8
  3438                           
  3439 ;; *************** function _initButtonMatrix *****************
  3440 ;; Defined at:
  3441 ;;		line 15 in file "buttonmatrix.c"
  3442 ;; Parameters:    Size  Location     Type
  3443 ;;		None
  3444 ;; Auto vars:     Size  Location     Type
  3445 ;;  i               1   23[COMRAM] unsigned char 
  3446 ;;  c               1   22[COMRAM] unsigned char 
  3447 ;; Return value:  Size  Location     Type
  3448 ;;                  1    wreg      void 
  3449 ;; Registers used:
  3450 ;;		wreg, status,2, status,0
  3451 ;; Tracked objects:
  3452 ;;		On entry : 0/0
  3453 ;;		On exit  : 0/0
  3454 ;;		Unchanged: 0/0
  3455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3456 ;;      Params:         0       0       0       0       0       0       0
  3457 ;;      Locals:         2       0       0       0       0       0       0
  3458 ;;      Temps:          0       0       0       0       0       0       0
  3459 ;;      Totals:         2       0       0       0       0       0       0
  3460 ;;Total ram usage:        2 bytes
  3461 ;; Hardware stack levels used:    1
  3462 ;; Hardware stack levels required when called:    3
  3463 ;; This function calls:
  3464 ;;		Nothing
  3465 ;; This function is called by:
  3466 ;;		_main
  3467 ;;		_setKeyForShutter
  3468 ;; This function uses a non-reentrant model
  3469 ;;
  3470                           
  3471                           	psect	text19
  3472  001026                     __ptext19:
  3473                           	opt stack 0
  3474  001026                     _initButtonMatrix:
  3475                           	opt stack 27
  3476                           
  3477                           ;buttonmatrix.c: 17: unsigned char c = 0;
  3478                           
  3479                           ;incstack = 0
  3480  001026  0E00               	movlw	0
  3481  001028  6E3B               	movwf	initButtonMatrix@c,c
  3482                           
  3483                           ;buttonmatrix.c: 18: unsigned char i;
  3484                           ;buttonmatrix.c: 20: for ( i = 0; i < 5; i++) {
  3485  00102A  0E00               	movlw	0
  3486  00102C  6E3C               	movwf	initButtonMatrix@i,c
  3487  00102E                     l2471:
  3488  00102E  0E04               	movlw	4
  3489  001030  643C               	cpfsgt	initButtonMatrix@i,c
  3490  001032  D001               	goto	l437
  3491  001034  D002               	goto	u1600
  3492  001036                     l437:
  3493  001036  2A3C               	incf	initButtonMatrix@i,f,c
  3494  001038  D7FA               	goto	l2471
  3495  00103A                     u1600:
  3496                           
  3497                           ;buttonmatrix.c: 23: }
  3498                           ;buttonmatrix.c: 24: for ( i = 0; i < 5; i++) {
  3499  00103A  0E00               	movlw	0
  3500  00103C  6E3C               	movwf	initButtonMatrix@i,c
  3501  00103E                     l2481:
  3502  00103E  0E04               	movlw	4
  3503  001040  643C               	cpfsgt	initButtonMatrix@i,c
  3504  001042  D001               	goto	l439
  3505  001044  0012               	return	
  3506  001046                     l439:
  3507  001046  2A3C               	incf	initButtonMatrix@i,f,c
  3508  001048  D7FA               	goto	l2481
  3509  00104A                     __end_of_initButtonMatrix:
  3510                           	opt stack 0
  3511                           tblptru	equ	0xFF8
  3512                           prodh	equ	0xFF4
  3513                           prodl	equ	0xFF3
  3514                           intcon	equ	0xFF2
  3515                           intcon2	equ	0xFF1
  3516                           postinc0	equ	0xFEE
  3517                           wreg	equ	0xFE8
  3518                           indf2	equ	0xFDF
  3519                           postinc2	equ	0xFDE
  3520                           postdec2	equ	0xFDD
  3521                           plusw2	equ	0xFDB
  3522                           fsr2h	equ	0xFDA
  3523                           fsr2l	equ	0xFD9
  3524                           status	equ	0xFD8
  3525                           
  3526 ;; *************** function _eepromWrite *****************
  3527 ;; Defined at:
  3528 ;;		line 5 in file "eeprom.c"
  3529 ;; Parameters:    Size  Location     Type
  3530 ;;  address         1    wreg     unsigned char 
  3531 ;;  data            1   22[COMRAM] unsigned char 
  3532 ;; Auto vars:     Size  Location     Type
  3533 ;;  address         1   23[COMRAM] unsigned char 
  3534 ;; Return value:  Size  Location     Type
  3535 ;;                  1    wreg      void 
  3536 ;; Registers used:
  3537 ;;		wreg, status,2
  3538 ;; Tracked objects:
  3539 ;;		On entry : 0/0
  3540 ;;		On exit  : 0/0
  3541 ;;		Unchanged: 0/0
  3542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3543 ;;      Params:         1       0       0       0       0       0       0
  3544 ;;      Locals:         1       0       0       0       0       0       0
  3545 ;;      Temps:          0       0       0       0       0       0       0
  3546 ;;      Totals:         2       0       0       0       0       0       0
  3547 ;;Total ram usage:        2 bytes
  3548 ;; Hardware stack levels used:    1
  3549 ;; Hardware stack levels required when called:    3
  3550 ;; This function calls:
  3551 ;;		Nothing
  3552 ;; This function is called by:
  3553 ;;		_setKeyForShutter
  3554 ;;		_storeShutterGroup
  3555 ;; This function uses a non-reentrant model
  3556 ;;
  3557                           
  3558                           	psect	text20
  3559  000FDA                     __ptext20:
  3560                           	opt stack 0
  3561  000FDA                     _eepromWrite:
  3562                           	opt stack 25
  3563                           
  3564                           ;incstack = 0
  3565                           ;eepromWrite@address stored from wreg
  3566  000FDA  6E3C               	movwf	eepromWrite@address,c
  3567  000FDC                     
  3568                           ;eeprom.c: 8: ;
  3569                           
  3570                           ;eeprom.c: 7: while(EECON1bits.WR)
  3571  000FDC  B2A6               	btfsc	4006,1,c	;volsfr
  3572  000FDE  D7FE               	goto	l2547
  3573                           
  3574                           ;eeprom.c: 10: EEADR = (address & 0x0ff);
  3575  000FE0  C03C  FFA9         	movff	eepromWrite@address,4009	;volatile
  3576                           
  3577                           ;eeprom.c: 11: EEDATA = data;
  3578  000FE4  C03B  FFA8         	movff	eepromWrite@data,4008	;volatile
  3579                           
  3580                           ;eeprom.c: 12: EECON1bits.EEPGD = 0;
  3581  000FE8  9EA6               	bcf	4006,7,c	;volsfr
  3582                           
  3583                           ;eeprom.c: 13: EECON1bits.CFGS = 0;
  3584  000FEA  9CA6               	bcf	4006,6,c	;volsfr
  3585                           
  3586                           ;eeprom.c: 14: EECON1bits.WREN = 1;
  3587  000FEC  84A6               	bsf	4006,2,c	;volsfr
  3588                           
  3589                           ;eeprom.c: 15: INTCONbits.GIE = 0;
  3590  000FEE  9EF2               	bcf	intcon,7,c	;volatile
  3591                           
  3592                           ;eeprom.c: 16: EECON2 = 0x55;
  3593  000FF0  0E55               	movlw	85
  3594  000FF2  6EA7               	movwf	4007,c	;volsfr
  3595                           
  3596                           ;eeprom.c: 17: EECON2 = 0xAA;
  3597  000FF4  0EAA               	movlw	170
  3598  000FF6  6EA7               	movwf	4007,c	;volsfr
  3599                           
  3600                           ;eeprom.c: 18: EECON1bits.WR = 1;
  3601  000FF8  82A6               	bsf	4006,1,c	;volsfr
  3602                           
  3603                           ;eeprom.c: 19: INTCONbits.GIE = 1;
  3604  000FFA  8EF2               	bsf	intcon,7,c	;volatile
  3605                           
  3606                           ;eeprom.c: 20: EECON1bits.WREN = 0;
  3607  000FFC  94A6               	bcf	4006,2,c	;volsfr
  3608  000FFE  0012               	return		;funcret
  3609  001000                     __end_of_eepromWrite:
  3610                           	opt stack 0
  3611                           tblptru	equ	0xFF8
  3612                           prodh	equ	0xFF4
  3613                           prodl	equ	0xFF3
  3614                           intcon	equ	0xFF2
  3615                           intcon2	equ	0xFF1
  3616                           postinc0	equ	0xFEE
  3617                           wreg	equ	0xFE8
  3618                           indf2	equ	0xFDF
  3619                           postinc2	equ	0xFDE
  3620                           postdec2	equ	0xFDD
  3621                           plusw2	equ	0xFDB
  3622                           fsr2h	equ	0xFDA
  3623                           fsr2l	equ	0xFD9
  3624                           status	equ	0xFD8
  3625                           
  3626 ;; *************** function _getShutterStatusByte2 *****************
  3627 ;; Defined at:
  3628 ;;		line 299 in file "i2cslave.c"
  3629 ;; Parameters:    Size  Location     Type
  3630 ;;		None
  3631 ;; Auto vars:     Size  Location     Type
  3632 ;;  i               1   28[COMRAM] unsigned char 
  3633 ;;  r               1   27[COMRAM] unsigned char 
  3634 ;; Return value:  Size  Location     Type
  3635 ;;                  1    wreg      unsigned char 
  3636 ;; Registers used:
  3637 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3638 ;; Tracked objects:
  3639 ;;		On entry : 0/0
  3640 ;;		On exit  : 0/0
  3641 ;;		Unchanged: 0/0
  3642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3643 ;;      Params:         0       0       0       0       0       0       0
  3644 ;;      Locals:         2       0       0       0       0       0       0
  3645 ;;      Temps:          2       0       0       0       0       0       0
  3646 ;;      Totals:         4       0       0       0       0       0       0
  3647 ;;Total ram usage:        4 bytes
  3648 ;; Hardware stack levels used:    1
  3649 ;; Hardware stack levels required when called:    4
  3650 ;; This function calls:
  3651 ;;		_getShutterstatus
  3652 ;; This function is called by:
  3653 ;;		_i2cParser
  3654 ;; This function uses a non-reentrant model
  3655 ;;
  3656                           
  3657                           	psect	text21
  3658  000DEA                     __ptext21:
  3659                           	opt stack 0
  3660  000DEA                     _getShutterStatusByte2:
  3661                           	opt stack 25
  3662                           
  3663                           ;i2cslave.c: 301: unsigned char i;
  3664                           ;i2cslave.c: 302: unsigned char r = 0;
  3665                           
  3666                           ;incstack = 0
  3667  000DEA  0E00               	movlw	0
  3668  000DEC  6E40               	movwf	getShutterStatusByte2@r,c
  3669                           
  3670                           ;i2cslave.c: 304: for ( i = 0; i < 5; i++) {
  3671  000DEE  0E00               	movlw	0
  3672  000DF0  6E41               	movwf	getShutterStatusByte2@i,c
  3673  000DF2                     l2755:
  3674  000DF2  0E04               	movlw	4
  3675  000DF4  6441               	cpfsgt	getShutterStatusByte2@i,c
  3676  000DF6  D001               	goto	l716
  3677  000DF8  D014               	goto	u2020
  3678  000DFA                     l716:
  3679                           
  3680                           ;i2cslave.c: 305: if ( getShutterstatus(i) == -1)
  3681  000DFA  5041               	movf	getShutterStatusByte2@i,w,c
  3682  000DFC  EC1D  F004         	call	_getShutterstatus
  3683  000E00  0AFF               	xorlw	-1
  3684  000E02  A4D8               	btfss	status,2,c
  3685  000E04  D00C               	goto	l718
  3686                           
  3687                           ;i2cslave.c: 306: r |= (1<<i);
  3688  000E06  C041  F03E         	movff	getShutterStatusByte2@i,??_getShutterStatusByte2
  3689  000E0A  0E01               	movlw	1
  3690  000E0C  6E3F               	movwf	(??_getShutterStatusByte2+1)& (0+255),c
  3691  000E0E  2A3E               	incf	??_getShutterStatusByte2,f,c
  3692  000E10  D002               	goto	u2014
  3693  000E12                     u2015:
  3694  000E12  90D8               	bcf	status,0,c
  3695  000E14  363F               	rlcf	??_getShutterStatusByte2+1,f,c
  3696  000E16                     u2014:
  3697  000E16  2E3E               	decfsz	??_getShutterStatusByte2,f,c
  3698  000E18  D7FC               	goto	u2015
  3699  000E1A  503F               	movf	??_getShutterStatusByte2+1,w,c
  3700  000E1C  1240               	iorwf	getShutterStatusByte2@r,f,c
  3701  000E1E                     l718:
  3702  000E1E  2A41               	incf	getShutterStatusByte2@i,f,c
  3703  000E20  D7E8               	goto	l2755
  3704  000E22                     u2020:
  3705                           
  3706                           ;i2cslave.c: 307: }
  3707                           ;i2cslave.c: 308: return r;
  3708  000E22  5040               	movf	getShutterStatusByte2@r,w,c
  3709  000E24  0012               	return	
  3710  000E26                     __end_of_getShutterStatusByte2:
  3711                           	opt stack 0
  3712                           tblptru	equ	0xFF8
  3713                           prodh	equ	0xFF4
  3714                           prodl	equ	0xFF3
  3715                           intcon	equ	0xFF2
  3716                           intcon2	equ	0xFF1
  3717                           postinc0	equ	0xFEE
  3718                           wreg	equ	0xFE8
  3719                           indf2	equ	0xFDF
  3720                           postinc2	equ	0xFDE
  3721                           postdec2	equ	0xFDD
  3722                           plusw2	equ	0xFDB
  3723                           fsr2h	equ	0xFDA
  3724                           fsr2l	equ	0xFD9
  3725                           status	equ	0xFD8
  3726                           
  3727 ;; *************** function _getShutterStatusByte1 *****************
  3728 ;; Defined at:
  3729 ;;		line 283 in file "i2cslave.c"
  3730 ;; Parameters:    Size  Location     Type
  3731 ;;		None
  3732 ;; Auto vars:     Size  Location     Type
  3733 ;;  i               1   28[COMRAM] unsigned char 
  3734 ;;  r               1   27[COMRAM] unsigned char 
  3735 ;; Return value:  Size  Location     Type
  3736 ;;                  1    wreg      unsigned char 
  3737 ;; Registers used:
  3738 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3739 ;; Tracked objects:
  3740 ;;		On entry : 0/0
  3741 ;;		On exit  : 0/0
  3742 ;;		Unchanged: 0/0
  3743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3744 ;;      Params:         0       0       0       0       0       0       0
  3745 ;;      Locals:         2       0       0       0       0       0       0
  3746 ;;      Temps:          2       0       0       0       0       0       0
  3747 ;;      Totals:         4       0       0       0       0       0       0
  3748 ;;Total ram usage:        4 bytes
  3749 ;; Hardware stack levels used:    1
  3750 ;; Hardware stack levels required when called:    4
  3751 ;; This function calls:
  3752 ;;		_getShutterstatus
  3753 ;; This function is called by:
  3754 ;;		_i2cParser
  3755 ;; This function uses a non-reentrant model
  3756 ;;
  3757                           
  3758                           	psect	text22
  3759  000E26                     __ptext22:
  3760                           	opt stack 0
  3761  000E26                     _getShutterStatusByte1:
  3762                           	opt stack 25
  3763                           
  3764                           ;i2cslave.c: 285: unsigned char i;
  3765                           ;i2cslave.c: 286: unsigned char r = 0;
  3766                           
  3767                           ;incstack = 0
  3768  000E26  0E00               	movlw	0
  3769  000E28  6E40               	movwf	getShutterStatusByte1@r,c
  3770                           
  3771                           ;i2cslave.c: 288: for ( i = 0; i < 5; i++) {
  3772  000E2A  0E00               	movlw	0
  3773  000E2C  6E41               	movwf	getShutterStatusByte1@i,c
  3774  000E2E                     l2737:
  3775  000E2E  0E04               	movlw	4
  3776  000E30  6441               	cpfsgt	getShutterStatusByte1@i,c
  3777  000E32  D001               	goto	l710
  3778  000E34  D014               	goto	u1980
  3779  000E36                     l710:
  3780                           
  3781                           ;i2cslave.c: 289: if ( getShutterstatus(i) == 1)
  3782  000E36  5041               	movf	getShutterStatusByte1@i,w,c
  3783  000E38  EC1D  F004         	call	_getShutterstatus
  3784  000E3C  06E8               	decf	wreg,f,c
  3785  000E3E  A4D8               	btfss	status,2,c
  3786  000E40  D00C               	goto	l712
  3787                           
  3788                           ;i2cslave.c: 290: r |= (1<<i);
  3789  000E42  C041  F03E         	movff	getShutterStatusByte1@i,??_getShutterStatusByte1
  3790  000E46  0E01               	movlw	1
  3791  000E48  6E3F               	movwf	(??_getShutterStatusByte1+1)& (0+255),c
  3792  000E4A  2A3E               	incf	??_getShutterStatusByte1,f,c
  3793  000E4C  D002               	goto	u1974
  3794  000E4E                     u1975:
  3795  000E4E  90D8               	bcf	status,0,c
  3796  000E50  363F               	rlcf	??_getShutterStatusByte1+1,f,c
  3797  000E52                     u1974:
  3798  000E52  2E3E               	decfsz	??_getShutterStatusByte1,f,c
  3799  000E54  D7FC               	goto	u1975
  3800  000E56  503F               	movf	??_getShutterStatusByte1+1,w,c
  3801  000E58  1240               	iorwf	getShutterStatusByte1@r,f,c
  3802  000E5A                     l712:
  3803  000E5A  2A41               	incf	getShutterStatusByte1@i,f,c
  3804  000E5C  D7E8               	goto	l2737
  3805  000E5E                     u1980:
  3806                           
  3807                           ;i2cslave.c: 291: }
  3808                           ;i2cslave.c: 292: return r;
  3809  000E5E  5040               	movf	getShutterStatusByte1@r,w,c
  3810  000E60  0012               	return	
  3811  000E62                     __end_of_getShutterStatusByte1:
  3812                           	opt stack 0
  3813                           tblptru	equ	0xFF8
  3814                           prodh	equ	0xFF4
  3815                           prodl	equ	0xFF3
  3816                           intcon	equ	0xFF2
  3817                           intcon2	equ	0xFF1
  3818                           postinc0	equ	0xFEE
  3819                           wreg	equ	0xFE8
  3820                           indf2	equ	0xFDF
  3821                           postinc2	equ	0xFDE
  3822                           postdec2	equ	0xFDD
  3823                           plusw2	equ	0xFDB
  3824                           fsr2h	equ	0xFDA
  3825                           fsr2l	equ	0xFD9
  3826                           status	equ	0xFD8
  3827                           
  3828 ;; *************** function _getShutterstatus *****************
  3829 ;; Defined at:
  3830 ;;		line 382 in file "shutter.c"
  3831 ;; Parameters:    Size  Location     Type
  3832 ;;  which           1    wreg     unsigned char 
  3833 ;; Auto vars:     Size  Location     Type
  3834 ;;  which           1   24[COMRAM] unsigned char 
  3835 ;;  sp              2   22[COMRAM] PTR struct shutter
  3836 ;;		 -> shutter(15), 
  3837 ;; Return value:  Size  Location     Type
  3838 ;;                  1    wreg      char 
  3839 ;; Registers used:
  3840 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3841 ;; Tracked objects:
  3842 ;;		On entry : 0/0
  3843 ;;		On exit  : 0/0
  3844 ;;		Unchanged: 0/0
  3845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3846 ;;      Params:         0       0       0       0       0       0       0
  3847 ;;      Locals:         3       0       0       0       0       0       0
  3848 ;;      Temps:          0       0       0       0       0       0       0
  3849 ;;      Totals:         3       0       0       0       0       0       0
  3850 ;;Total ram usage:        3 bytes
  3851 ;; Hardware stack levels used:    1
  3852 ;; Hardware stack levels required when called:    3
  3853 ;; This function calls:
  3854 ;;		Nothing
  3855 ;; This function is called by:
  3856 ;;		_getShutterStatusByte1
  3857 ;;		_getShutterStatusByte2
  3858 ;; This function uses a non-reentrant model
  3859 ;;
  3860                           
  3861                           	psect	text23
  3862  00083A                     __ptext23:
  3863                           	opt stack 0
  3864  00083A                     _getShutterstatus:
  3865                           	opt stack 25
  3866                           
  3867                           ;incstack = 0
  3868                           ;getShutterstatus@which stored from wreg
  3869  00083A  6E3D               	movwf	getShutterstatus@which,c
  3870                           
  3871                           ;shutter.c: 384: SHUTTER *sp = &shutter[which];
  3872  00083C  503D               	movf	getShutterstatus@which,w,c
  3873  00083E  0D03               	mullw	3
  3874  000840  0E16               	movlw	low _shutter
  3875  000842  24F3               	addwf	prodl,w,c
  3876  000844  6E3B               	movwf	getShutterstatus@sp,c
  3877  000846  0E00               	movlw	high _shutter
  3878  000848  20F4               	addwfc	prodh,w,c
  3879  00084A  6E3C               	movwf	getShutterstatus@sp+1,c
  3880                           
  3881                           ;shutter.c: 386: switch ( sp -> state ) {
  3882  00084C  D006               	goto	l335
  3883  00084E                     
  3884                           ;shutter.c: 389: case 8:
  3885                           ;shutter.c: 390: case 30:
  3886                           ;shutter.c: 391: return 0;
  3887  00084E  0E00               	movlw	0
  3888  000850  0012               	return	
  3889  000852                     
  3890                           ;shutter.c: 394: case 24:
  3891                           ;shutter.c: 395: case 20:
  3892                           ;shutter.c: 396: case 3:
  3893                           ;shutter.c: 397: case 27:
  3894                           ;shutter.c: 398: return 1;
  3895  000852  0E01               	movlw	1
  3896  000854  0012               	return	
  3897  000856                     
  3898                           ;shutter.c: 401: case 25:
  3899                           ;shutter.c: 402: case 21:
  3900                           ;shutter.c: 403: case 2:
  3901                           ;shutter.c: 404: case 26:
  3902                           ;shutter.c: 405: return -1;
  3903  000856  0EFF               	movlw	255
  3904  000858  0012               	return	
  3905  00085A                     l335:
  3906  00085A  C03B  FFD9         	movff	getShutterstatus@sp,fsr2l
  3907  00085E  C03C  FFDA         	movff	getShutterstatus@sp+1,fsr2h
  3908  000862  50DF               	movf	indf2,w,c
  3909                           
  3910                           ; Switch size 1, requested type "space"
  3911                           ; Number of cases is 13, Range of values is 1 to 30
  3912                           ; switch strategies available:
  3913                           ; Name         Instructions Cycles
  3914                           ; simple_byte           40    21 (average)
  3915                           ;	Chosen strategy is simple_byte
  3916  000864  0A01               	xorlw	1	; case 1
  3917  000866  B4D8               	btfsc	status,2,c
  3918  000868  D7F2               	goto	l336
  3919  00086A  0A03               	xorlw	3	; case 2
  3920  00086C  B4D8               	btfsc	status,2,c
  3921  00086E  D7F3               	goto	l345
  3922  000870  0A01               	xorlw	1	; case 3
  3923  000872  B4D8               	btfsc	status,2,c
  3924  000874  D7EE               	goto	l340
  3925  000876  0A0B               	xorlw	11	; case 8
  3926  000878  B4D8               	btfsc	status,2,c
  3927  00087A  D7E9               	goto	l336
  3928  00087C  0A1C               	xorlw	28	; case 20
  3929  00087E  B4D8               	btfsc	status,2,c
  3930  000880  D7E8               	goto	l340
  3931  000882  0A01               	xorlw	1	; case 21
  3932  000884  B4D8               	btfsc	status,2,c
  3933  000886  D7E7               	goto	l345
  3934  000888  0A03               	xorlw	3	; case 22
  3935  00088A  B4D8               	btfsc	status,2,c
  3936  00088C  D7E2               	goto	l340
  3937  00088E  0A01               	xorlw	1	; case 23
  3938  000890  B4D8               	btfsc	status,2,c
  3939  000892  D7E1               	goto	l345
  3940  000894  0A0F               	xorlw	15	; case 24
  3941  000896  B4D8               	btfsc	status,2,c
  3942  000898  D7DC               	goto	l340
  3943  00089A  0A01               	xorlw	1	; case 25
  3944  00089C  B4D8               	btfsc	status,2,c
  3945  00089E  D7DB               	goto	l345
  3946  0008A0  0A03               	xorlw	3	; case 26
  3947  0008A2  B4D8               	btfsc	status,2,c
  3948  0008A4  D7D8               	goto	l345
  3949  0008A6  0A01               	xorlw	1	; case 27
  3950  0008A8  B4D8               	btfsc	status,2,c
  3951  0008AA  D7D3               	goto	l340
  3952  0008AC  0A05               	xorlw	5	; case 30
  3953  0008AE  B4D8               	btfsc	status,2,c
  3954  0008B0  D7CE               	goto	l336
  3955                           
  3956                           ;shutter.c: 408: return 0;
  3957  0008B2  0E00               	movlw	0
  3958  0008B4  0012               	return	
  3959  0008B6                     __end_of_getShutterstatus:
  3960                           	opt stack 0
  3961                           tblptru	equ	0xFF8
  3962                           prodh	equ	0xFF4
  3963                           prodl	equ	0xFF3
  3964                           intcon	equ	0xFF2
  3965                           intcon2	equ	0xFF1
  3966                           postinc0	equ	0xFEE
  3967                           wreg	equ	0xFE8
  3968                           indf2	equ	0xFDF
  3969                           postinc2	equ	0xFDE
  3970                           postdec2	equ	0xFDD
  3971                           plusw2	equ	0xFDB
  3972                           fsr2h	equ	0xFDA
  3973                           fsr2l	equ	0xFD9
  3974                           status	equ	0xFD8
  3975                           
  3976 ;; *************** function _getLastPressedKey *****************
  3977 ;; Defined at:
  3978 ;;		line 67 in file "buttons.c"
  3979 ;; Parameters:    Size  Location     Type
  3980 ;;		None
  3981 ;; Auto vars:     Size  Location     Type
  3982 ;;		None
  3983 ;; Return value:  Size  Location     Type
  3984 ;;                  1    wreg      unsigned char 
  3985 ;; Registers used:
  3986 ;;		wreg, status,2
  3987 ;; Tracked objects:
  3988 ;;		On entry : 0/0
  3989 ;;		On exit  : 0/0
  3990 ;;		Unchanged: 0/0
  3991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3992 ;;      Params:         0       0       0       0       0       0       0
  3993 ;;      Locals:         0       0       0       0       0       0       0
  3994 ;;      Temps:          0       0       0       0       0       0       0
  3995 ;;      Totals:         0       0       0       0       0       0       0
  3996 ;;Total ram usage:        0 bytes
  3997 ;; Hardware stack levels used:    1
  3998 ;; Hardware stack levels required when called:    3
  3999 ;; This function calls:
  4000 ;;		Nothing
  4001 ;; This function is called by:
  4002 ;;		_i2cParser
  4003 ;; This function uses a non-reentrant model
  4004 ;;
  4005                           
  4006                           	psect	text24
  4007  001214                     __ptext24:
  4008                           	opt stack 0
  4009  001214                     _getLastPressedKey:
  4010                           	opt stack 26
  4011                           
  4012                           ;buttons.c: 69: return lastPressedKey;
  4013                           
  4014                           ;incstack = 0
  4015  001214  5015               	movf	_lastPressedKey,w,c
  4016  001216  0012               	return	
  4017  001218                     __end_of_getLastPressedKey:
  4018                           	opt stack 0
  4019                           tblptru	equ	0xFF8
  4020                           prodh	equ	0xFF4
  4021                           prodl	equ	0xFF3
  4022                           intcon	equ	0xFF2
  4023                           intcon2	equ	0xFF1
  4024                           postinc0	equ	0xFEE
  4025                           wreg	equ	0xFE8
  4026                           indf2	equ	0xFDF
  4027                           postinc2	equ	0xFDE
  4028                           postdec2	equ	0xFDD
  4029                           plusw2	equ	0xFDB
  4030                           fsr2h	equ	0xFDA
  4031                           fsr2l	equ	0xFD9
  4032                           status	equ	0xFD8
  4033                           
  4034 ;; *************** function _getKeyForShutter *****************
  4035 ;; Defined at:
  4036 ;;		line 30 in file "buttonmatrix.c"
  4037 ;; Parameters:    Size  Location     Type
  4038 ;;  shutter         1    wreg     unsigned char 
  4039 ;; Auto vars:     Size  Location     Type
  4040 ;;  shutter         1   23[COMRAM] unsigned char 
  4041 ;; Return value:  Size  Location     Type
  4042 ;;                  1    wreg      unsigned char 
  4043 ;; Registers used:
  4044 ;;		wreg, status,2, cstack
  4045 ;; Tracked objects:
  4046 ;;		On entry : 0/0
  4047 ;;		On exit  : 0/0
  4048 ;;		Unchanged: 0/0
  4049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4050 ;;      Params:         0       0       0       0       0       0       0
  4051 ;;      Locals:         1       0       0       0       0       0       0
  4052 ;;      Temps:          0       0       0       0       0       0       0
  4053 ;;      Totals:         1       0       0       0       0       0       0
  4054 ;;Total ram usage:        1 bytes
  4055 ;; Hardware stack levels used:    1
  4056 ;; Hardware stack levels required when called:    4
  4057 ;; This function calls:
  4058 ;;		_eepromRead
  4059 ;; This function is called by:
  4060 ;;		_i2cParser
  4061 ;; This function uses a non-reentrant model
  4062 ;;
  4063                           
  4064                           	psect	text25
  4065  0011FE                     __ptext25:
  4066                           	opt stack 0
  4067  0011FE                     _getKeyForShutter:
  4068                           	opt stack 25
  4069                           
  4070                           ;incstack = 0
  4071                           ;getKeyForShutter@shutter stored from wreg
  4072  0011FE  6E3C               	movwf	getKeyForShutter@shutter,c
  4073                           
  4074                           ;buttonmatrix.c: 32: return eepromRead( shutter);
  4075  001200  503C               	movf	getKeyForShutter@shutter,w,c
  4076  001202  ECF1  F008         	call	_eepromRead
  4077  001206  0012               	return	
  4078  001208                     __end_of_getKeyForShutter:
  4079                           	opt stack 0
  4080                           tblptru	equ	0xFF8
  4081                           prodh	equ	0xFF4
  4082                           prodl	equ	0xFF3
  4083                           intcon	equ	0xFF2
  4084                           intcon2	equ	0xFF1
  4085                           postinc0	equ	0xFEE
  4086                           wreg	equ	0xFE8
  4087                           indf2	equ	0xFDF
  4088                           postinc2	equ	0xFDE
  4089                           postdec2	equ	0xFDD
  4090                           plusw2	equ	0xFDB
  4091                           fsr2h	equ	0xFDA
  4092                           fsr2l	equ	0xFD9
  4093                           status	equ	0xFD8
  4094                           
  4095 ;; *************** function _fifo3Get *****************
  4096 ;; Defined at:
  4097 ;;		line 66 in file "fifo.c"
  4098 ;; Parameters:    Size  Location     Type
  4099 ;;		None
  4100 ;; Auto vars:     Size  Location     Type
  4101 ;;		None
  4102 ;; Return value:  Size  Location     Type
  4103 ;;                  1    wreg      unsigned char 
  4104 ;; Registers used:
  4105 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4106 ;; Tracked objects:
  4107 ;;		On entry : 0/0
  4108 ;;		On exit  : 0/0
  4109 ;;		Unchanged: 0/0
  4110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4111 ;;      Params:         0       0       0       0       0       0       0
  4112 ;;      Locals:         0       0       0       0       0       0       0
  4113 ;;      Temps:          2       0       0       0       0       0       0
  4114 ;;      Totals:         2       0       0       0       0       0       0
  4115 ;;Total ram usage:        2 bytes
  4116 ;; Hardware stack levels used:    1
  4117 ;; Hardware stack levels required when called:    3
  4118 ;; This function calls:
  4119 ;;		Nothing
  4120 ;; This function is called by:
  4121 ;;		_i2cParser
  4122 ;; This function uses a non-reentrant model
  4123 ;;
  4124                           
  4125                           	psect	text26
  4126  0010A4                     __ptext26:
  4127                           	opt stack 0
  4128  0010A4                     _fifo3Get:
  4129                           	opt stack 26
  4130                           
  4131                           ;fifo.c: 67: return fifo3[fifo3Out++ & 0x0F];
  4132                           
  4133                           ;incstack = 0
  4134  0010A4  2A03               	incf	_fifo3Out,f,c
  4135  0010A6  0403               	decf	_fifo3Out,w,c
  4136  0010A8  0B0F               	andlw	15
  4137  0010AA  6E3B               	movwf	??_fifo3Get& (0+255),c
  4138  0010AC  6A3C               	clrf	(??_fifo3Get+1)& (0+255),c
  4139  0010AE  0EC0               	movlw	low _fifo3
  4140  0010B0  243B               	addwf	??_fifo3Get,w,c
  4141  0010B2  6ED9               	movwf	fsr2l,c
  4142  0010B4  0E00               	movlw	high _fifo3
  4143  0010B6  203C               	addwfc	??_fifo3Get+1,w,c
  4144  0010B8  6EDA               	movwf	fsr2h,c
  4145  0010BA  50DF               	movf	indf2,w,c
  4146  0010BC  0012               	return	
  4147  0010BE                     __end_of_fifo3Get:
  4148                           	opt stack 0
  4149                           tblptru	equ	0xFF8
  4150                           prodh	equ	0xFF4
  4151                           prodl	equ	0xFF3
  4152                           intcon	equ	0xFF2
  4153                           intcon2	equ	0xFF1
  4154                           postinc0	equ	0xFEE
  4155                           wreg	equ	0xFE8
  4156                           indf2	equ	0xFDF
  4157                           postinc2	equ	0xFDE
  4158                           postdec2	equ	0xFDD
  4159                           plusw2	equ	0xFDB
  4160                           fsr2h	equ	0xFDA
  4161                           fsr2l	equ	0xFD9
  4162                           status	equ	0xFD8
  4163                           
  4164 ;; *************** function _fifo3Empty *****************
  4165 ;; Defined at:
  4166 ;;		line 106 in file "fifo.c"
  4167 ;; Parameters:    Size  Location     Type
  4168 ;;		None
  4169 ;; Auto vars:     Size  Location     Type
  4170 ;;		None
  4171 ;; Return value:  Size  Location     Type
  4172 ;;                  1    wreg      unsigned char 
  4173 ;; Registers used:
  4174 ;;		wreg, status,2, status,0
  4175 ;; Tracked objects:
  4176 ;;		On entry : 0/0
  4177 ;;		On exit  : 0/0
  4178 ;;		Unchanged: 0/0
  4179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4180 ;;      Params:         0       0       0       0       0       0       0
  4181 ;;      Locals:         0       0       0       0       0       0       0
  4182 ;;      Temps:          1       0       0       0       0       0       0
  4183 ;;      Totals:         1       0       0       0       0       0       0
  4184 ;;Total ram usage:        1 bytes
  4185 ;; Hardware stack levels used:    1
  4186 ;; Hardware stack levels required when called:    3
  4187 ;; This function calls:
  4188 ;;		Nothing
  4189 ;; This function is called by:
  4190 ;;		_i2cParser
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           
  4194                           	psect	text27
  4195  0010BE                     __ptext27:
  4196                           	opt stack 0
  4197  0010BE                     _fifo3Empty:
  4198                           	opt stack 26
  4199                           
  4200                           ;fifo.c: 108: return (fifo3In & 0x0F) == (fifo3Out & 0x0F);
  4201                           
  4202                           ;incstack = 0
  4203  0010BE  C003  F03B         	movff	_fifo3Out,??_fifo3Empty
  4204  0010C2  0E0F               	movlw	15
  4205  0010C4  163B               	andwf	??_fifo3Empty,f,c
  4206  0010C6  5006               	movf	_fifo3In,w,c
  4207  0010C8  0B0F               	andlw	15
  4208  0010CA  183B               	xorwf	??_fifo3Empty,w,c
  4209  0010CC  A4D8               	btfss	status,2,c
  4210  0010CE  D002               	goto	u1740
  4211  0010D0  0E01               	movlw	1
  4212  0010D2  0012               	return	
  4213  0010D4                     u1740:
  4214  0010D4  0E00               	movlw	0
  4215  0010D6  0012               	return	
  4216  0010D8                     __end_of_fifo3Empty:
  4217                           	opt stack 0
  4218                           tblptru	equ	0xFF8
  4219                           prodh	equ	0xFF4
  4220                           prodl	equ	0xFF3
  4221                           intcon	equ	0xFF2
  4222                           intcon2	equ	0xFF1
  4223                           postinc0	equ	0xFEE
  4224                           wreg	equ	0xFE8
  4225                           indf2	equ	0xFDF
  4226                           postinc2	equ	0xFDE
  4227                           postdec2	equ	0xFDD
  4228                           plusw2	equ	0xFDB
  4229                           fsr2h	equ	0xFDA
  4230                           fsr2l	equ	0xFD9
  4231                           status	equ	0xFD8
  4232                           
  4233 ;; *************** function _commandShutterStop *****************
  4234 ;; Defined at:
  4235 ;;		line 126 in file "shutter.c"
  4236 ;; Parameters:    Size  Location     Type
  4237 ;;  shutternumbe    1    wreg     unsigned char 
  4238 ;; Auto vars:     Size  Location     Type
  4239 ;;  shutternumbe    1   28[COMRAM] unsigned char 
  4240 ;;  i               2   29[COMRAM] int 
  4241 ;; Return value:  Size  Location     Type
  4242 ;;                  1    wreg      void 
  4243 ;; Registers used:
  4244 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4245 ;; Tracked objects:
  4246 ;;		On entry : 0/0
  4247 ;;		On exit  : 0/0
  4248 ;;		Unchanged: 0/0
  4249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4250 ;;      Params:         0       0       0       0       0       0       0
  4251 ;;      Locals:         3       0       0       0       0       0       0
  4252 ;;      Temps:          0       0       0       0       0       0       0
  4253 ;;      Totals:         3       0       0       0       0       0       0
  4254 ;;Total ram usage:        3 bytes
  4255 ;; Hardware stack levels used:    1
  4256 ;; Hardware stack levels required when called:    4
  4257 ;; This function calls:
  4258 ;;		___wmul
  4259 ;;		_fehler
  4260 ;; This function is called by:
  4261 ;;		_i2cParser
  4262 ;; This function uses a non-reentrant model
  4263 ;;
  4264                           
  4265                           	psect	text28
  4266  0008B6                     __ptext28:
  4267                           	opt stack 0
  4268  0008B6                     _commandShutterStop:
  4269                           	opt stack 25
  4270                           
  4271                           ;incstack = 0
  4272                           ;commandShutterStop@shutternumber stored from wreg
  4273  0008B6  6E41               	movwf	commandShutterStop@shutternumber,c
  4274                           
  4275                           ;shutter.c: 128: int i;
  4276                           ;shutter.c: 130: if ( shutternumber == 'A') {
  4277  0008B8  0E41               	movlw	65
  4278  0008BA  1841               	xorwf	commandShutterStop@shutternumber,w,c
  4279  0008BC  A4D8               	btfss	status,2,c
  4280  0008BE  D021               	goto	l294
  4281                           
  4282                           ;shutter.c: 131: for (i = 0; i < 5; i++)
  4283  0008C0  0E00               	movlw	0
  4284  0008C2  6E43               	movwf	commandShutterStop@i+1,c
  4285  0008C4  0E00               	movlw	0
  4286  0008C6  6E42               	movwf	commandShutterStop@i,c
  4287  0008C8                     l3527:
  4288  0008C8  BE43               	btfsc	commandShutterStop@i+1,7,c
  4289  0008CA  D006               	goto	l295
  4290  0008CC  5043               	movf	commandShutterStop@i+1,w,c
  4291  0008CE  E12D               	bnz	l300
  4292  0008D0  0E05               	movlw	5
  4293  0008D2  5C42               	subwf	commandShutterStop@i,w,c
  4294  0008D4  B0D8               	btfsc	status,0,c
  4295  0008D6  0012               	return	
  4296  0008D8                     l295:
  4297                           
  4298                           ;shutter.c: 132: shutter[i].state = 8;
  4299  0008D8  C042  F03B         	movff	commandShutterStop@i,___wmul@multiplier
  4300  0008DC  C043  F03C         	movff	commandShutterStop@i+1,___wmul@multiplier+1
  4301  0008E0  0E00               	movlw	0
  4302  0008E2  6E3E               	movwf	___wmul@multiplicand+1,c
  4303  0008E4  0E03               	movlw	3
  4304  0008E6  6E3D               	movwf	___wmul@multiplicand,c
  4305  0008E8  EC00  F008         	call	___wmul	;wreg free
  4306  0008EC  0E16               	movlw	low _shutter
  4307  0008EE  243B               	addwf	?___wmul,w,c
  4308  0008F0  6ED9               	movwf	fsr2l,c
  4309  0008F2  0E00               	movlw	high _shutter
  4310  0008F4  203C               	addwfc	?___wmul+1,w,c
  4311  0008F6  6EDA               	movwf	fsr2h,c
  4312  0008F8  0E08               	movlw	8
  4313  0008FA  6EDF               	movwf	indf2,c
  4314  0008FC  4A42               	infsnz	commandShutterStop@i,f,c
  4315  0008FE  2A43               	incf	commandShutterStop@i+1,f,c
  4316  000900  D7E3               	goto	l3527
  4317  000902                     l294:
  4318                           
  4319                           ;shutter.c: 134: else if ( shutternumber < 5 ) {
  4320  000902  0E05               	movlw	5
  4321  000904  6041               	cpfslt	commandShutterStop@shutternumber,c
  4322  000906  D00B               	goto	l298
  4323                           
  4324                           ;shutter.c: 135: shutter[shutternumber].state = 8;
  4325  000908  5041               	movf	commandShutterStop@shutternumber,w,c
  4326  00090A  0D03               	mullw	3
  4327  00090C  0E16               	movlw	low _shutter
  4328  00090E  24F3               	addwf	prodl,w,c
  4329  000910  6ED9               	movwf	fsr2l,c
  4330  000912  0E00               	movlw	high _shutter
  4331  000914  20F4               	addwfc	prodh,w,c
  4332  000916  6EDA               	movwf	fsr2h,c
  4333  000918  0E08               	movlw	8
  4334  00091A  6EDF               	movwf	indf2,c
  4335                           
  4336                           ;shutter.c: 136: }
  4337  00091C  0012               	return	
  4338  00091E                     l298:
  4339                           
  4340                           ;shutter.c: 137: else {
  4341                           ;shutter.c: 138: fehler('s','s');
  4342  00091E  0E73               	movlw	115
  4343  000920  6E3B               	movwf	fehler@ls,c
  4344  000922  0E73               	movlw	115
  4345  000924  ECF9  F008         	call	_fehler
  4346  000928  0012               	return	
  4347  00092A                     l300:
  4348  00092A  0012               	return		;funcret
  4349  00092C                     __end_of_commandShutterStop:
  4350                           	opt stack 0
  4351                           tblptru	equ	0xFF8
  4352                           prodh	equ	0xFF4
  4353                           prodl	equ	0xFF3
  4354                           intcon	equ	0xFF2
  4355                           intcon2	equ	0xFF1
  4356                           postinc0	equ	0xFEE
  4357                           wreg	equ	0xFE8
  4358                           indf2	equ	0xFDF
  4359                           postinc2	equ	0xFDE
  4360                           postdec2	equ	0xFDD
  4361                           plusw2	equ	0xFDB
  4362                           fsr2h	equ	0xFDA
  4363                           fsr2l	equ	0xFD9
  4364                           status	equ	0xFD8
  4365                           
  4366 ;; *************** function _fehler *****************
  4367 ;; Defined at:
  4368 ;;		line 422 in file "shutter.c"
  4369 ;; Parameters:    Size  Location     Type
  4370 ;;  updown          1    wreg     unsigned char 
  4371 ;;  ls              1   22[COMRAM] unsigned char 
  4372 ;; Auto vars:     Size  Location     Type
  4373 ;;  updown          1   25[COMRAM] unsigned char 
  4374 ;;  lastState       1   24[COMRAM] unsigned char 
  4375 ;;  modUpDown       1   23[COMRAM] unsigned char 
  4376 ;; Return value:  Size  Location     Type
  4377 ;;                  1    wreg      void 
  4378 ;; Registers used:
  4379 ;;		wreg
  4380 ;; Tracked objects:
  4381 ;;		On entry : 0/0
  4382 ;;		On exit  : 0/0
  4383 ;;		Unchanged: 0/0
  4384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4385 ;;      Params:         1       0       0       0       0       0       0
  4386 ;;      Locals:         3       0       0       0       0       0       0
  4387 ;;      Temps:          0       0       0       0       0       0       0
  4388 ;;      Totals:         4       0       0       0       0       0       0
  4389 ;;Total ram usage:        4 bytes
  4390 ;; Hardware stack levels used:    1
  4391 ;; Hardware stack levels required when called:    3
  4392 ;; This function calls:
  4393 ;;		Nothing
  4394 ;; This function is called by:
  4395 ;;		_commandShutterStop
  4396 ;; This function uses a non-reentrant model
  4397 ;;
  4398                           
  4399                           	psect	text29
  4400  0011F2                     __ptext29:
  4401                           	opt stack 0
  4402  0011F2                     _fehler:
  4403                           	opt stack 25
  4404                           
  4405                           ;incstack = 0
  4406                           ;fehler@updown stored from wreg
  4407  0011F2  6E3E               	movwf	fehler@updown,c
  4408                           
  4409                           ;shutter.c: 424: char modUpDown = updown;
  4410  0011F4  C03E  F03C         	movff	fehler@updown,fehler@modUpDown
  4411                           
  4412                           ;shutter.c: 425: unsigned char lastState = ls;
  4413  0011F8  C03B  F03D         	movff	fehler@ls,fehler@lastState
  4414  0011FC                     l356:
  4415                           
  4416                           ;shutter.c: 428: ;
  4417  0011FC  D7FF               	goto	l356
  4418  0011FE                     __end_of_fehler:
  4419                           	opt stack 0
  4420                           tblptru	equ	0xFF8
  4421                           prodh	equ	0xFF4
  4422                           prodl	equ	0xFF3
  4423                           intcon	equ	0xFF2
  4424                           intcon2	equ	0xFF1
  4425                           postinc0	equ	0xFEE
  4426                           wreg	equ	0xFE8
  4427                           indf2	equ	0xFDF
  4428                           postinc2	equ	0xFDE
  4429                           postdec2	equ	0xFDD
  4430                           plusw2	equ	0xFDB
  4431                           fsr2h	equ	0xFDA
  4432                           fsr2l	equ	0xFD9
  4433                           status	equ	0xFD8
  4434                           
  4435 ;; *************** function ___wmul *****************
  4436 ;; Defined at:
  4437 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  4438 ;; Parameters:    Size  Location     Type
  4439 ;;  multiplier      2   22[COMRAM] unsigned int 
  4440 ;;  multiplicand    2   24[COMRAM] unsigned int 
  4441 ;; Auto vars:     Size  Location     Type
  4442 ;;  product         2   26[COMRAM] unsigned int 
  4443 ;; Return value:  Size  Location     Type
  4444 ;;                  2   22[COMRAM] unsigned int 
  4445 ;; Registers used:
  4446 ;;		wreg, status,2, status,0, prodl, prodh
  4447 ;; Tracked objects:
  4448 ;;		On entry : 0/0
  4449 ;;		On exit  : 0/0
  4450 ;;		Unchanged: 0/0
  4451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4452 ;;      Params:         4       0       0       0       0       0       0
  4453 ;;      Locals:         2       0       0       0       0       0       0
  4454 ;;      Temps:          0       0       0       0       0       0       0
  4455 ;;      Totals:         6       0       0       0       0       0       0
  4456 ;;Total ram usage:        6 bytes
  4457 ;; Hardware stack levels used:    1
  4458 ;; Hardware stack levels required when called:    3
  4459 ;; This function calls:
  4460 ;;		Nothing
  4461 ;; This function is called by:
  4462 ;;		_commandShutterStop
  4463 ;; This function uses a non-reentrant model
  4464 ;;
  4465                           
  4466                           	psect	text30
  4467  001000                     __ptext30:
  4468                           	opt stack 0
  4469  001000                     ___wmul:
  4470                           	opt stack 25
  4471                           
  4472                           ;incstack = 0
  4473  001000  503B               	movf	___wmul@multiplier,w,c
  4474  001002  023D               	mulwf	___wmul@multiplicand,c
  4475  001004  CFF3 F03F          	movff	prodl,___wmul@product
  4476  001008  CFF4 F040          	movff	prodh,___wmul@product+1
  4477  00100C  503B               	movf	___wmul@multiplier,w,c
  4478  00100E  023E               	mulwf	___wmul@multiplicand+1,c
  4479  001010  50F3               	movf	prodl,w,c
  4480  001012  2640               	addwf	___wmul@product+1,f,c
  4481  001014  503C               	movf	___wmul@multiplier+1,w,c
  4482  001016  023D               	mulwf	___wmul@multiplicand,c
  4483  001018  50F3               	movf	prodl,w,c
  4484  00101A  2640               	addwf	___wmul@product+1,f,c
  4485  00101C  C03F  F03B         	movff	___wmul@product,?___wmul
  4486  001020  C040  F03C         	movff	___wmul@product+1,?___wmul+1
  4487  001024  0012               	return	
  4488  001026                     __end_of___wmul:
  4489                           	opt stack 0
  4490                           tblptru	equ	0xFF8
  4491                           prodh	equ	0xFF4
  4492                           prodl	equ	0xFF3
  4493                           intcon	equ	0xFF2
  4494                           intcon2	equ	0xFF1
  4495                           postinc0	equ	0xFEE
  4496                           wreg	equ	0xFE8
  4497                           indf2	equ	0xFDF
  4498                           postinc2	equ	0xFDE
  4499                           postdec2	equ	0xFDD
  4500                           plusw2	equ	0xFDB
  4501                           fsr2h	equ	0xFDA
  4502                           fsr2l	equ	0xFD9
  4503                           status	equ	0xFD8
  4504                           
  4505 ;; *************** function _fifo2Get *****************
  4506 ;; Defined at:
  4507 ;;		line 62 in file "fifo.c"
  4508 ;; Parameters:    Size  Location     Type
  4509 ;;		None
  4510 ;; Auto vars:     Size  Location     Type
  4511 ;;		None
  4512 ;; Return value:  Size  Location     Type
  4513 ;;                  1    wreg      unsigned char 
  4514 ;; Registers used:
  4515 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4516 ;; Tracked objects:
  4517 ;;		On entry : 0/0
  4518 ;;		On exit  : 0/0
  4519 ;;		Unchanged: 0/0
  4520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4521 ;;      Params:         0       0       0       0       0       0       0
  4522 ;;      Locals:         0       0       0       0       0       0       0
  4523 ;;      Temps:          2       0       0       0       0       0       0
  4524 ;;      Totals:         2       0       0       0       0       0       0
  4525 ;;Total ram usage:        2 bytes
  4526 ;; Hardware stack levels used:    1
  4527 ;; Hardware stack levels required when called:    3
  4528 ;; This function calls:
  4529 ;;		Nothing
  4530 ;; This function is called by:
  4531 ;;		_main
  4532 ;; This function uses a non-reentrant model
  4533 ;;
  4534                           
  4535                           	psect	text31
  4536  0010D8                     __ptext31:
  4537                           	opt stack 0
  4538  0010D8                     _fifo2Get:
  4539                           	opt stack 27
  4540                           
  4541                           ;fifo.c: 63: return fifo2[fifo2Out++ & 0x0F];
  4542                           
  4543                           ;incstack = 0
  4544  0010D8  2A04               	incf	_fifo2Out,f,c
  4545  0010DA  0404               	decf	_fifo2Out,w,c
  4546  0010DC  0B0F               	andlw	15
  4547  0010DE  6E3B               	movwf	??_fifo2Get& (0+255),c
  4548  0010E0  6A3C               	clrf	(??_fifo2Get+1)& (0+255),c
  4549  0010E2  0ED0               	movlw	low _fifo2
  4550  0010E4  243B               	addwf	??_fifo2Get,w,c
  4551  0010E6  6ED9               	movwf	fsr2l,c
  4552  0010E8  0E00               	movlw	high _fifo2
  4553  0010EA  203C               	addwfc	??_fifo2Get+1,w,c
  4554  0010EC  6EDA               	movwf	fsr2h,c
  4555  0010EE  50DF               	movf	indf2,w,c
  4556  0010F0  0012               	return	
  4557  0010F2                     __end_of_fifo2Get:
  4558                           	opt stack 0
  4559                           tblptru	equ	0xFF8
  4560                           prodh	equ	0xFF4
  4561                           prodl	equ	0xFF3
  4562                           intcon	equ	0xFF2
  4563                           intcon2	equ	0xFF1
  4564                           postinc0	equ	0xFEE
  4565                           wreg	equ	0xFE8
  4566                           indf2	equ	0xFDF
  4567                           postinc2	equ	0xFDE
  4568                           postdec2	equ	0xFDD
  4569                           plusw2	equ	0xFDB
  4570                           fsr2h	equ	0xFDA
  4571                           fsr2l	equ	0xFD9
  4572                           status	equ	0xFD8
  4573                           
  4574 ;; *************** function _fifo2Empty *****************
  4575 ;; Defined at:
  4576 ;;		line 99 in file "fifo.c"
  4577 ;; Parameters:    Size  Location     Type
  4578 ;;		None
  4579 ;; Auto vars:     Size  Location     Type
  4580 ;;		None
  4581 ;; Return value:  Size  Location     Type
  4582 ;;                  1    wreg      unsigned char 
  4583 ;; Registers used:
  4584 ;;		wreg, status,2, status,0
  4585 ;; Tracked objects:
  4586 ;;		On entry : 0/0
  4587 ;;		On exit  : 0/0
  4588 ;;		Unchanged: 0/0
  4589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4590 ;;      Params:         0       0       0       0       0       0       0
  4591 ;;      Locals:         0       0       0       0       0       0       0
  4592 ;;      Temps:          1       0       0       0       0       0       0
  4593 ;;      Totals:         1       0       0       0       0       0       0
  4594 ;;Total ram usage:        1 bytes
  4595 ;; Hardware stack levels used:    1
  4596 ;; Hardware stack levels required when called:    3
  4597 ;; This function calls:
  4598 ;;		Nothing
  4599 ;; This function is called by:
  4600 ;;		_main
  4601 ;; This function uses a non-reentrant model
  4602 ;;
  4603                           
  4604                           	psect	text32
  4605  0010F2                     __ptext32:
  4606                           	opt stack 0
  4607  0010F2                     _fifo2Empty:
  4608                           	opt stack 27
  4609                           
  4610                           ;fifo.c: 101: return (fifo2In & 0x0F) == (fifo2Out & 0x0F);
  4611                           
  4612                           ;incstack = 0
  4613  0010F2  C004  F03B         	movff	_fifo2Out,??_fifo2Empty
  4614  0010F6  0E0F               	movlw	15
  4615  0010F8  163B               	andwf	??_fifo2Empty,f,c
  4616  0010FA  5007               	movf	_fifo2In,w,c
  4617  0010FC  0B0F               	andlw	15
  4618  0010FE  183B               	xorwf	??_fifo2Empty,w,c
  4619  001100  A4D8               	btfss	status,2,c
  4620  001102  D002               	goto	u2370
  4621  001104  0E01               	movlw	1
  4622  001106  0012               	return	
  4623  001108                     u2370:
  4624  001108  0E00               	movlw	0
  4625  00110A  0012               	return	
  4626  00110C                     __end_of_fifo2Empty:
  4627                           	opt stack 0
  4628                           tblptru	equ	0xFF8
  4629                           prodh	equ	0xFF4
  4630                           prodl	equ	0xFF3
  4631                           intcon	equ	0xFF2
  4632                           intcon2	equ	0xFF1
  4633                           postinc0	equ	0xFEE
  4634                           wreg	equ	0xFE8
  4635                           indf2	equ	0xFDF
  4636                           postinc2	equ	0xFDE
  4637                           postdec2	equ	0xFDD
  4638                           plusw2	equ	0xFDB
  4639                           fsr2h	equ	0xFDA
  4640                           fsr2l	equ	0xFD9
  4641                           status	equ	0xFD8
  4642                           
  4643 ;; *************** function _fifo1Get *****************
  4644 ;; Defined at:
  4645 ;;		line 58 in file "fifo.c"
  4646 ;; Parameters:    Size  Location     Type
  4647 ;;		None
  4648 ;; Auto vars:     Size  Location     Type
  4649 ;;		None
  4650 ;; Return value:  Size  Location     Type
  4651 ;;                  1    wreg      unsigned char 
  4652 ;; Registers used:
  4653 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4654 ;; Tracked objects:
  4655 ;;		On entry : 0/0
  4656 ;;		On exit  : 0/0
  4657 ;;		Unchanged: 0/0
  4658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4659 ;;      Params:         0       0       0       0       0       0       0
  4660 ;;      Locals:         0       0       0       0       0       0       0
  4661 ;;      Temps:          2       0       0       0       0       0       0
  4662 ;;      Totals:         2       0       0       0       0       0       0
  4663 ;;Total ram usage:        2 bytes
  4664 ;; Hardware stack levels used:    1
  4665 ;; Hardware stack levels required when called:    3
  4666 ;; This function calls:
  4667 ;;		Nothing
  4668 ;; This function is called by:
  4669 ;;		_main
  4670 ;;		_sendRS485
  4671 ;; This function uses a non-reentrant model
  4672 ;;
  4673                           
  4674                           	psect	text33
  4675  00110C                     __ptext33:
  4676                           	opt stack 0
  4677  00110C                     _fifo1Get:
  4678                           	opt stack 27
  4679                           
  4680                           ;fifo.c: 59: return fifo1[fifo1Out++ & 0x0F];
  4681                           
  4682                           ;incstack = 0
  4683  00110C  2A05               	incf	_fifo1Out,f,c
  4684  00110E  0405               	decf	_fifo1Out,w,c
  4685  001110  0B0F               	andlw	15
  4686  001112  6E3B               	movwf	??_fifo1Get& (0+255),c
  4687  001114  6A3C               	clrf	(??_fifo1Get+1)& (0+255),c
  4688  001116  0EE0               	movlw	low _fifo1
  4689  001118  243B               	addwf	??_fifo1Get,w,c
  4690  00111A  6ED9               	movwf	fsr2l,c
  4691  00111C  0E00               	movlw	high _fifo1
  4692  00111E  203C               	addwfc	??_fifo1Get+1,w,c
  4693  001120  6EDA               	movwf	fsr2h,c
  4694  001122  50DF               	movf	indf2,w,c
  4695  001124  0012               	return	
  4696  001126                     __end_of_fifo1Get:
  4697                           	opt stack 0
  4698                           tblptru	equ	0xFF8
  4699                           prodh	equ	0xFF4
  4700                           prodl	equ	0xFF3
  4701                           intcon	equ	0xFF2
  4702                           intcon2	equ	0xFF1
  4703                           postinc0	equ	0xFEE
  4704                           wreg	equ	0xFE8
  4705                           indf2	equ	0xFDF
  4706                           postinc2	equ	0xFDE
  4707                           postdec2	equ	0xFDD
  4708                           plusw2	equ	0xFDB
  4709                           fsr2h	equ	0xFDA
  4710                           fsr2l	equ	0xFD9
  4711                           status	equ	0xFD8
  4712                           
  4713 ;; *************** function _fifo1Empty *****************
  4714 ;; Defined at:
  4715 ;;		line 93 in file "fifo.c"
  4716 ;; Parameters:    Size  Location     Type
  4717 ;;		None
  4718 ;; Auto vars:     Size  Location     Type
  4719 ;;		None
  4720 ;; Return value:  Size  Location     Type
  4721 ;;                  1    wreg      unsigned char 
  4722 ;; Registers used:
  4723 ;;		wreg, status,2, status,0
  4724 ;; Tracked objects:
  4725 ;;		On entry : 0/0
  4726 ;;		On exit  : 0/0
  4727 ;;		Unchanged: 0/0
  4728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4729 ;;      Params:         0       0       0       0       0       0       0
  4730 ;;      Locals:         0       0       0       0       0       0       0
  4731 ;;      Temps:          1       0       0       0       0       0       0
  4732 ;;      Totals:         1       0       0       0       0       0       0
  4733 ;;Total ram usage:        1 bytes
  4734 ;; Hardware stack levels used:    1
  4735 ;; Hardware stack levels required when called:    3
  4736 ;; This function calls:
  4737 ;;		Nothing
  4738 ;; This function is called by:
  4739 ;;		_main
  4740 ;;		_sendRS485
  4741 ;; This function uses a non-reentrant model
  4742 ;;
  4743                           
  4744                           	psect	text34
  4745  001126                     __ptext34:
  4746                           	opt stack 0
  4747  001126                     _fifo1Empty:
  4748                           	opt stack 27
  4749                           
  4750                           ;fifo.c: 95: return (fifo1In & 0x0F) == (fifo1Out & 0x0F);
  4751                           
  4752                           ;incstack = 0
  4753  001126  C005  F03B         	movff	_fifo1Out,??_fifo1Empty
  4754  00112A  0E0F               	movlw	15
  4755  00112C  163B               	andwf	??_fifo1Empty,f,c
  4756  00112E  5008               	movf	_fifo1In,w,c
  4757  001130  0B0F               	andlw	15
  4758  001132  183B               	xorwf	??_fifo1Empty,w,c
  4759  001134  A4D8               	btfss	status,2,c
  4760  001136  D002               	goto	u2060
  4761  001138  0E01               	movlw	1
  4762  00113A  0012               	return	
  4763  00113C                     u2060:
  4764  00113C  0E00               	movlw	0
  4765  00113E  0012               	return	
  4766  001140                     __end_of_fifo1Empty:
  4767                           	opt stack 0
  4768                           tblptru	equ	0xFF8
  4769                           prodh	equ	0xFF4
  4770                           prodl	equ	0xFF3
  4771                           intcon	equ	0xFF2
  4772                           intcon2	equ	0xFF1
  4773                           postinc0	equ	0xFEE
  4774                           wreg	equ	0xFE8
  4775                           indf2	equ	0xFDF
  4776                           postinc2	equ	0xFDE
  4777                           postdec2	equ	0xFDD
  4778                           plusw2	equ	0xFDB
  4779                           fsr2h	equ	0xFDA
  4780                           fsr2l	equ	0xFD9
  4781                           status	equ	0xFD8
  4782                           
  4783 ;; *************** function _byteReceived *****************
  4784 ;; Defined at:
  4785 ;;		line 27 in file "protocol.c"
  4786 ;; Parameters:    Size  Location     Type
  4787 ;;  b               1    wreg     unsigned char 
  4788 ;; Auto vars:     Size  Location     Type
  4789 ;;  b               1   33[COMRAM] unsigned char 
  4790 ;;  code            1   32[COMRAM] unsigned char 
  4791 ;;  checksum        1   31[COMRAM] unsigned char 
  4792 ;; Return value:  Size  Location     Type
  4793 ;;                  1    wreg      void 
  4794 ;; Registers used:
  4795 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4796 ;; Tracked objects:
  4797 ;;		On entry : 0/0
  4798 ;;		On exit  : 0/0
  4799 ;;		Unchanged: 0/0
  4800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4801 ;;      Params:         0       0       0       0       0       0       0
  4802 ;;      Locals:         3       0       0       0       0       0       0
  4803 ;;      Temps:          1       0       0       0       0       0       0
  4804 ;;      Totals:         4       0       0       0       0       0       0
  4805 ;;Total ram usage:        4 bytes
  4806 ;; Hardware stack levels used:    1
  4807 ;; Hardware stack levels required when called:    8
  4808 ;; This function calls:
  4809 ;;		_decodeButton
  4810 ;; This function is called by:
  4811 ;;		_main
  4812 ;; This function uses a non-reentrant model
  4813 ;;
  4814                           
  4815                           	psect	text35
  4816  000ADE                     __ptext35:
  4817                           	opt stack 0
  4818  000ADE                     _byteReceived:
  4819                           	opt stack 22
  4820                           
  4821                           ;incstack = 0
  4822                           ;byteReceived@b stored from wreg
  4823  000ADE  6E46               	movwf	byteReceived@b,c
  4824                           
  4825                           ;protocol.c: 29: unsigned char checksum;
  4826                           ;protocol.c: 30: unsigned char code;
  4827                           ;protocol.c: 37: if (protocolState == 0 && b == 0xF1 ) {
  4828  000AE0  0100               	movlb	0	; () banked
  4829  000AE2  51F2               	movf	_protocolState& (0+255),w,b
  4830  000AE4  A4D8               	btfss	status,2,c
  4831  000AE6  D007               	goto	l201
  4832                           
  4833                           ; BSR set to: 0
  4834  000AE8  0EF1               	movlw	241
  4835  000AEA  1846               	xorwf	byteReceived@b,w,c
  4836  000AEC  A4D8               	btfss	status,2,c
  4837  000AEE  D003               	goto	l201
  4838                           
  4839                           ; BSR set to: 0
  4840                           ;protocol.c: 38: protocolState = 1;
  4841  000AF0  0E01               	movlw	1
  4842  000AF2  6FF2               	movwf	_protocolState& (0+255),b
  4843                           
  4844                           ; BSR set to: 0
  4845                           ;protocol.c: 39: return;
  4846  000AF4  0012               	return	
  4847  000AF6                     l201:
  4848                           
  4849                           ; BSR set to: 0
  4850                           ;protocol.c: 40: }
  4851                           ;protocol.c: 42: if ( protocolState == 1 ) {
  4852                           
  4853                           ; BSR set to: 0
  4854  000AF6  05F2               	decf	_protocolState& (0+255),w,b
  4855  000AF8  A4D8               	btfss	status,2,c
  4856  000AFA  D00A               	goto	l203
  4857                           
  4858                           ; BSR set to: 0
  4859                           ;protocol.c: 43: device = (b >> 4) & 0x0F;
  4860  000AFC  3846               	swapf	byteReceived@b,w,c
  4861  000AFE  0B0F               	andlw	15
  4862  000B00  0B0F               	andlw	15
  4863  000B02  6FF1               	movwf	_device& (0+255),b
  4864                           
  4865                           ;protocol.c: 44: button = b & 0x0F;
  4866  000B04  5046               	movf	byteReceived@b,w,c
  4867  000B06  0B0F               	andlw	15
  4868  000B08  6FF0               	movwf	_button& (0+255),b
  4869                           
  4870                           ; BSR set to: 0
  4871                           ;protocol.c: 45: protocolState = 2;
  4872  000B0A  0E02               	movlw	2
  4873  000B0C  6FF2               	movwf	_protocolState& (0+255),b
  4874                           
  4875                           ; BSR set to: 0
  4876                           ;protocol.c: 46: return;
  4877  000B0E  0012               	return	
  4878  000B10                     l203:
  4879                           
  4880                           ; BSR set to: 0
  4881                           ;protocol.c: 47: }
  4882                           ;protocol.c: 49: if ( protocolState == 2 ) {
  4883                           
  4884                           ; BSR set to: 0
  4885  000B10  0E02               	movlw	2
  4886  000B12  19F2               	xorwf	_protocolState& (0+255),w,b
  4887  000B14  A4D8               	btfss	status,2,c
  4888  000B16  D013               	goto	l205
  4889                           
  4890                           ; BSR set to: 0
  4891                           ;protocol.c: 51: code = ((device << 4) & 0xF0) | (button & 0x0F);
  4892  000B18  C0F0  F043         	movff	_button,??_byteReceived
  4893  000B1C  0E0F               	movlw	15
  4894  000B1E  1643               	andwf	??_byteReceived,f,c
  4895  000B20  39F1               	swapf	_device& (0+255),w,b
  4896  000B22  0BF0               	andlw	240
  4897  000B24  0BF0               	andlw	240
  4898  000B26  1043               	iorwf	??_byteReceived,w,c
  4899  000B28  6E45               	movwf	byteReceived@code,c
  4900                           
  4901                           ;protocol.c: 52: checksum = 0xF1 ^ code ;
  4902  000B2A  5045               	movf	byteReceived@code,w,c
  4903  000B2C  0AF1               	xorlw	241
  4904  000B2E  6E44               	movwf	byteReceived@checksum,c
  4905                           
  4906                           ;protocol.c: 54: if ( checksum == b) {
  4907  000B30  5046               	movf	byteReceived@b,w,c
  4908  000B32  1844               	xorwf	byteReceived@checksum,w,c
  4909  000B34  A4D8               	btfss	status,2,c
  4910  000B36  D003               	goto	l205
  4911                           
  4912                           ; BSR set to: 0
  4913                           ;protocol.c: 55: decodeButton(code);
  4914  000B38  5045               	movf	byteReceived@code,w,c
  4915  000B3A  EC96  F004         	call	_decodeButton
  4916  000B3E                     l205:
  4917                           
  4918                           ;protocol.c: 56: }
  4919                           ;protocol.c: 57: }
  4920                           ;protocol.c: 59: protocolState = 0;
  4921  000B3E  0E00               	movlw	0
  4922  000B40  0100               	movlb	0	; () banked
  4923  000B42  6FF2               	movwf	_protocolState& (0+255),b
  4924                           
  4925                           ; BSR set to: 0
  4926  000B44  0012               	return		;funcret
  4927  000B46                     __end_of_byteReceived:
  4928                           	opt stack 0
  4929                           tblptru	equ	0xFF8
  4930                           prodh	equ	0xFF4
  4931                           prodl	equ	0xFF3
  4932                           intcon	equ	0xFF2
  4933                           intcon2	equ	0xFF1
  4934                           postinc0	equ	0xFEE
  4935                           wreg	equ	0xFE8
  4936                           indf2	equ	0xFDF
  4937                           postinc2	equ	0xFDE
  4938                           postdec2	equ	0xFDD
  4939                           plusw2	equ	0xFDB
  4940                           fsr2h	equ	0xFDA
  4941                           fsr2l	equ	0xFD9
  4942                           status	equ	0xFD8
  4943                           
  4944 ;; *************** function _decodeButton *****************
  4945 ;; Defined at:
  4946 ;;		line 73 in file "buttons.c"
  4947 ;; Parameters:    Size  Location     Type
  4948 ;;  code            1    wreg     unsigned char 
  4949 ;; Auto vars:     Size  Location     Type
  4950 ;;  code            1   28[COMRAM] unsigned char 
  4951 ;;  buttonIndex     1   29[COMRAM] char 
  4952 ;; Return value:  Size  Location     Type
  4953 ;;                  1    wreg      void 
  4954 ;; Registers used:
  4955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4956 ;; Tracked objects:
  4957 ;;		On entry : 0/0
  4958 ;;		On exit  : 0/0
  4959 ;;		Unchanged: 0/0
  4960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4961 ;;      Params:         0       0       0       0       0       0       0
  4962 ;;      Locals:         2       0       0       0       0       0       0
  4963 ;;      Temps:          0       0       0       0       0       0       0
  4964 ;;      Totals:         2       0       0       0       0       0       0
  4965 ;;Total ram usage:        2 bytes
  4966 ;; Hardware stack levels used:    1
  4967 ;; Hardware stack levels required when called:    7
  4968 ;; This function calls:
  4969 ;;		_findShuttergroupButton
  4970 ;;		_handleShuttergroupButton
  4971 ;; This function is called by:
  4972 ;;		_byteReceived
  4973 ;;		_testeMasterTaster
  4974 ;; This function uses a non-reentrant model
  4975 ;;
  4976                           
  4977                           	psect	text36
  4978  00092C                     __ptext36:
  4979                           	opt stack 0
  4980  00092C                     _decodeButton:
  4981                           	opt stack 22
  4982                           
  4983                           ; BSR set to: 0
  4984                           ;incstack = 0
  4985                           ;decodeButton@code stored from wreg
  4986  00092C  6E41               	movwf	decodeButton@code,c
  4987                           
  4988                           ;buttons.c: 75: signed char buttonIndex = findShuttergroupButton(code) ;
  4989  00092E  5041               	movf	decodeButton@code,w,c
  4990  000930  EC70  F006         	call	_findShuttergroupButton
  4991  000934  6E42               	movwf	decodeButton@buttonIndex,c
  4992                           
  4993                           ;buttons.c: 77: lastPressedKey = code;
  4994  000936  C041  F015         	movff	decodeButton@code,_lastPressedKey
  4995                           
  4996                           ;buttons.c: 79: if (buttonIndex != -1) {
  4997  00093A  2842               	incf	decodeButton@buttonIndex,w,c
  4998  00093C  B4D8               	btfsc	status,2,c
  4999  00093E  0012               	return	
  5000                           
  5001                           ;buttons.c: 81: if ( buttons[buttonIndex].isActive == 0 )
  5002  000940  5042               	movf	decodeButton@buttonIndex,w,c
  5003  000942  0D0A               	mullw	10
  5004  000944  0E02               	movlw	2
  5005  000946  26F3               	addwf	prodl,f,c
  5006  000948  0E00               	movlw	0
  5007  00094A  22F4               	addwfc	prodh,f,c
  5008  00094C  0E00               	movlw	low _buttons
  5009  00094E  24F3               	addwf	prodl,w,c
  5010  000950  6ED9               	movwf	fsr2l,c
  5011  000952  0E01               	movlw	high _buttons
  5012  000954  20F4               	addwfc	prodh,w,c
  5013  000956  6EDA               	movwf	fsr2h,c
  5014  000958  50DF               	movf	indf2,w,c
  5015  00095A  A4D8               	btfss	status,2,c
  5016  00095C  D003               	goto	l239
  5017                           
  5018                           ;buttons.c: 82: handleShuttergroupButton(buttonIndex);
  5019  00095E  5042               	movf	decodeButton@buttonIndex,w,c
  5020  000960  ECA0  F008         	call	_handleShuttergroupButton
  5021  000964                     l239:
  5022                           
  5023                           ;buttons.c: 84: buttons[buttonIndex].isActive = 1;
  5024  000964  5042               	movf	decodeButton@buttonIndex,w,c
  5025  000966  0D0A               	mullw	10
  5026  000968  0E02               	movlw	2
  5027  00096A  26F3               	addwf	prodl,f,c
  5028  00096C  0E00               	movlw	0
  5029  00096E  22F4               	addwfc	prodh,f,c
  5030  000970  0E00               	movlw	low _buttons
  5031  000972  24F3               	addwf	prodl,w,c
  5032  000974  6ED9               	movwf	fsr2l,c
  5033  000976  0E01               	movlw	high _buttons
  5034  000978  20F4               	addwfc	prodh,w,c
  5035  00097A  6EDA               	movwf	fsr2h,c
  5036  00097C  0E01               	movlw	1
  5037  00097E  6EDF               	movwf	indf2,c
  5038                           
  5039                           ;buttons.c: 85: buttons[buttonIndex].watchdog = 0;
  5040  000980  5042               	movf	decodeButton@buttonIndex,w,c
  5041  000982  0D0A               	mullw	10
  5042  000984  0E03               	movlw	3
  5043  000986  26F3               	addwf	prodl,f,c
  5044  000988  0E00               	movlw	0
  5045  00098A  22F4               	addwfc	prodh,f,c
  5046  00098C  0E00               	movlw	low _buttons
  5047  00098E  24F3               	addwf	prodl,w,c
  5048  000990  6ED9               	movwf	fsr2l,c
  5049  000992  0E01               	movlw	high _buttons
  5050  000994  20F4               	addwfc	prodh,w,c
  5051  000996  6EDA               	movwf	fsr2h,c
  5052  000998  0E00               	movlw	0
  5053  00099A  6EDF               	movwf	indf2,c
  5054  00099C  0012               	return	
  5055  00099E                     __end_of_decodeButton:
  5056                           	opt stack 0
  5057                           tblptru	equ	0xFF8
  5058                           prodh	equ	0xFF4
  5059                           prodl	equ	0xFF3
  5060                           intcon	equ	0xFF2
  5061                           intcon2	equ	0xFF1
  5062                           postinc0	equ	0xFEE
  5063                           wreg	equ	0xFE8
  5064                           indf2	equ	0xFDF
  5065                           postinc2	equ	0xFDE
  5066                           postdec2	equ	0xFDD
  5067                           plusw2	equ	0xFDB
  5068                           fsr2h	equ	0xFDA
  5069                           fsr2l	equ	0xFD9
  5070                           status	equ	0xFD8
  5071                           
  5072 ;; *************** function _handleShuttergroupButton *****************
  5073 ;; Defined at:
  5074 ;;		line 90 in file "shuttergroups.c"
  5075 ;; Parameters:    Size  Location     Type
  5076 ;;  buttonIndex     1    wreg     unsigned char 
  5077 ;; Auto vars:     Size  Location     Type
  5078 ;;  buttonIndex     1   27[COMRAM] unsigned char 
  5079 ;; Return value:  Size  Location     Type
  5080 ;;                  1    wreg      void 
  5081 ;; Registers used:
  5082 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5083 ;; Tracked objects:
  5084 ;;		On entry : 0/0
  5085 ;;		On exit  : 0/0
  5086 ;;		Unchanged: 0/0
  5087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5088 ;;      Params:         0       0       0       0       0       0       0
  5089 ;;      Locals:         1       0       0       0       0       0       0
  5090 ;;      Temps:          0       0       0       0       0       0       0
  5091 ;;      Totals:         1       0       0       0       0       0       0
  5092 ;;Total ram usage:        1 bytes
  5093 ;; Hardware stack levels used:    1
  5094 ;; Hardware stack levels required when called:    6
  5095 ;; This function calls:
  5096 ;;		_commandShutterGroupDown
  5097 ;;		_commandShutterGroupUp
  5098 ;; This function is called by:
  5099 ;;		_decodeButton
  5100 ;; This function uses a non-reentrant model
  5101 ;;
  5102                           
  5103                           	psect	text37
  5104  001140                     __ptext37:
  5105                           	opt stack 0
  5106  001140                     _handleShuttergroupButton:
  5107                           	opt stack 22
  5108                           
  5109                           ;incstack = 0
  5110                           ;handleShuttergroupButton@buttonIndex stored from wreg
  5111  001140  6E40               	movwf	handleShuttergroupButton@buttonIndex,c
  5112                           
  5113                           ;shuttergroups.c: 92: if ( buttonIndex >= 12) {
  5114  001142  0E0B               	movlw	11
  5115  001144  6440               	cpfsgt	handleShuttergroupButton@buttonIndex,c
  5116  001146  D005               	goto	l534
  5117                           
  5118                           ;shuttergroups.c: 93: commandShutterGroupUp(buttonIndex - 12);
  5119  001148  5040               	movf	handleShuttergroupButton@buttonIndex,w,c
  5120  00114A  0FF4               	addlw	244
  5121  00114C  EC92  F006         	call	_commandShutterGroupUp
  5122                           
  5123                           ;shuttergroups.c: 94: }
  5124  001150  0012               	return	
  5125  001152                     l534:
  5126                           
  5127                           ;shuttergroups.c: 95: else {
  5128                           ;shuttergroups.c: 96: commandShutterGroupDown(buttonIndex);
  5129  001152  5040               	movf	handleShuttergroupButton@buttonIndex,w,c
  5130  001154  ECB3  F006         	call	_commandShutterGroupDown
  5131  001158  0012               	return	
  5132  00115A                     __end_of_handleShuttergroupButton:
  5133                           	opt stack 0
  5134                           tblptru	equ	0xFF8
  5135                           prodh	equ	0xFF4
  5136                           prodl	equ	0xFF3
  5137                           intcon	equ	0xFF2
  5138                           intcon2	equ	0xFF1
  5139                           postinc0	equ	0xFEE
  5140                           wreg	equ	0xFE8
  5141                           indf2	equ	0xFDF
  5142                           postinc2	equ	0xFDE
  5143                           postdec2	equ	0xFDD
  5144                           plusw2	equ	0xFDB
  5145                           fsr2h	equ	0xFDA
  5146                           fsr2l	equ	0xFD9
  5147                           status	equ	0xFD8
  5148                           
  5149 ;; *************** function _commandShutterGroupUp *****************
  5150 ;; Defined at:
  5151 ;;		line 43 in file "shuttergroups.c"
  5152 ;; Parameters:    Size  Location     Type
  5153 ;;  group           1    wreg     unsigned char 
  5154 ;; Auto vars:     Size  Location     Type
  5155 ;;  group           1   25[COMRAM] unsigned char 
  5156 ;;  g               1   26[COMRAM] unsigned char 
  5157 ;; Return value:  Size  Location     Type
  5158 ;;                  1    wreg      void 
  5159 ;; Registers used:
  5160 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5161 ;; Tracked objects:
  5162 ;;		On entry : 0/0
  5163 ;;		On exit  : 0/0
  5164 ;;		Unchanged: 0/0
  5165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5166 ;;      Params:         0       0       0       0       0       0       0
  5167 ;;      Locals:         2       0       0       0       0       0       0
  5168 ;;      Temps:          0       0       0       0       0       0       0
  5169 ;;      Totals:         2       0       0       0       0       0       0
  5170 ;;Total ram usage:        2 bytes
  5171 ;; Hardware stack levels used:    1
  5172 ;; Hardware stack levels required when called:    5
  5173 ;; This function calls:
  5174 ;;		_commandShutterUp
  5175 ;;		_readShutterGroupByte
  5176 ;; This function is called by:
  5177 ;;		_handleShuttergroupButton
  5178 ;;		_i2cParser
  5179 ;; This function uses a non-reentrant model
  5180 ;;
  5181                           
  5182                           	psect	text38
  5183  000D24                     __ptext38:
  5184                           	opt stack 0
  5185  000D24                     _commandShutterGroupUp:
  5186                           	opt stack 22
  5187                           
  5188                           ;incstack = 0
  5189                           ;commandShutterGroupUp@group stored from wreg
  5190  000D24  6E3E               	movwf	commandShutterGroupUp@group,c
  5191                           
  5192                           ;shuttergroups.c: 45: unsigned char g = readShutterGroupByte(group, 0);
  5193  000D26  0E00               	movlw	0
  5194  000D28  6E3C               	movwf	readShutterGroupByte@which,c
  5195  000D2A  503E               	movf	commandShutterGroupUp@group,w,c
  5196  000D2C  ECE8  F008         	call	_readShutterGroupByte
  5197  000D30  6E3F               	movwf	commandShutterGroupUp@g,c
  5198                           
  5199                           ;shuttergroups.c: 47: if ( g & 0x01) commandShutterUp(0);
  5200  000D32  A03F               	btfss	commandShutterGroupUp@g,0,c
  5201  000D34  D003               	goto	l511
  5202  000D36  0E00               	movlw	0
  5203  000D38  EC05  F005         	call	_commandShutterUp
  5204  000D3C                     l511:
  5205                           
  5206                           ;shuttergroups.c: 48: if ( g & 0x02) commandShutterUp(1);
  5207  000D3C  A23F               	btfss	commandShutterGroupUp@g,1,c
  5208  000D3E  D003               	goto	l512
  5209  000D40  0E01               	movlw	1
  5210  000D42  EC05  F005         	call	_commandShutterUp
  5211  000D46                     l512:
  5212                           
  5213                           ;shuttergroups.c: 49: if ( g & 0x04) commandShutterUp(2);
  5214  000D46  A43F               	btfss	commandShutterGroupUp@g,2,c
  5215  000D48  D003               	goto	l513
  5216  000D4A  0E02               	movlw	2
  5217  000D4C  EC05  F005         	call	_commandShutterUp
  5218  000D50                     l513:
  5219                           
  5220                           ;shuttergroups.c: 50: if ( g & 0x08) commandShutterUp(3);
  5221  000D50  A63F               	btfss	commandShutterGroupUp@g,3,c
  5222  000D52  D003               	goto	l514
  5223  000D54  0E03               	movlw	3
  5224  000D56  EC05  F005         	call	_commandShutterUp
  5225  000D5A                     l514:
  5226                           
  5227                           ;shuttergroups.c: 51: if ( g & 0x10) commandShutterUp(4);
  5228  000D5A  A83F               	btfss	commandShutterGroupUp@g,4,c
  5229  000D5C  0012               	return	
  5230  000D5E  0E04               	movlw	4
  5231  000D60  EC05  F005         	call	_commandShutterUp
  5232  000D64  0012               	return	
  5233  000D66                     __end_of_commandShutterGroupUp:
  5234                           	opt stack 0
  5235                           tblptru	equ	0xFF8
  5236                           prodh	equ	0xFF4
  5237                           prodl	equ	0xFF3
  5238                           intcon	equ	0xFF2
  5239                           intcon2	equ	0xFF1
  5240                           postinc0	equ	0xFEE
  5241                           wreg	equ	0xFE8
  5242                           indf2	equ	0xFDF
  5243                           postinc2	equ	0xFDE
  5244                           postdec2	equ	0xFDD
  5245                           plusw2	equ	0xFDB
  5246                           fsr2h	equ	0xFDA
  5247                           fsr2l	equ	0xFD9
  5248                           status	equ	0xFD8
  5249                           
  5250 ;; *************** function _commandShutterUp *****************
  5251 ;; Defined at:
  5252 ;;		line 74 in file "shutter.c"
  5253 ;; Parameters:    Size  Location     Type
  5254 ;;  shutternumbe    1    wreg     unsigned char 
  5255 ;; Auto vars:     Size  Location     Type
  5256 ;;  shutternumbe    1   22[COMRAM] unsigned char 
  5257 ;;  sp              2   23[COMRAM] PTR struct shutter
  5258 ;;		 -> shutter(15), 
  5259 ;; Return value:  Size  Location     Type
  5260 ;;                  1    wreg      void 
  5261 ;; Registers used:
  5262 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5263 ;; Tracked objects:
  5264 ;;		On entry : 0/0
  5265 ;;		On exit  : 0/0
  5266 ;;		Unchanged: 0/0
  5267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5268 ;;      Params:         0       0       0       0       0       0       0
  5269 ;;      Locals:         3       0       0       0       0       0       0
  5270 ;;      Temps:          0       0       0       0       0       0       0
  5271 ;;      Totals:         3       0       0       0       0       0       0
  5272 ;;Total ram usage:        3 bytes
  5273 ;; Hardware stack levels used:    1
  5274 ;; Hardware stack levels required when called:    3
  5275 ;; This function calls:
  5276 ;;		Nothing
  5277 ;; This function is called by:
  5278 ;;		_commandShutterGroupUp
  5279 ;;		_i2cParser
  5280 ;; This function uses a non-reentrant model
  5281 ;;
  5282                           
  5283                           	psect	text39
  5284  000A0A                     __ptext39:
  5285                           	opt stack 0
  5286  000A0A                     _commandShutterUp:
  5287                           	opt stack 23
  5288                           
  5289                           ;incstack = 0
  5290                           ;commandShutterUp@shutternumber stored from wreg
  5291  000A0A  6E3B               	movwf	commandShutterUp@shutternumber,c
  5292                           
  5293                           ;shutter.c: 76: if ( shutternumber > 5-1)
  5294  000A0C  0E04               	movlw	4
  5295  000A0E  643B               	cpfsgt	commandShutterUp@shutternumber,c
  5296  000A10  D001               	goto	l272
  5297  000A12  0012               	return	
  5298  000A14                     l272:
  5299                           
  5300                           ;shutter.c: 79: SHUTTER *sp = &shutter[shutternumber];
  5301  000A14  503B               	movf	commandShutterUp@shutternumber,w,c
  5302  000A16  0D03               	mullw	3
  5303  000A18  0E16               	movlw	low _shutter
  5304  000A1A  24F3               	addwf	prodl,w,c
  5305  000A1C  6E3C               	movwf	commandShutterUp@sp,c
  5306  000A1E  0E00               	movlw	high _shutter
  5307  000A20  20F4               	addwfc	prodh,w,c
  5308  000A22  6E3D               	movwf	commandShutterUp@sp+1,c
  5309                           
  5310                           ;shutter.c: 81: switch ( sp -> state ) {
  5311  000A24  D015               	goto	l274
  5312  000A26                     
  5313                           ;shutter.c: 84: sp -> state = 22;
  5314  000A26  C03C  FFD9         	movff	commandShutterUp@sp,fsr2l
  5315  000A2A  C03D  FFDA         	movff	commandShutterUp@sp+1,fsr2h
  5316  000A2E  0E16               	movlw	22
  5317  000A30  6EDF               	movwf	indf2,c
  5318                           
  5319                           ;shutter.c: 85: break;
  5320  000A32  0012               	return	
  5321  000A34                     
  5322                           ;shutter.c: 87: sp -> state = 3;
  5323  000A34  C03C  FFD9         	movff	commandShutterUp@sp,fsr2l
  5324  000A38  C03D  FFDA         	movff	commandShutterUp@sp+1,fsr2h
  5325  000A3C  0E03               	movlw	3
  5326  000A3E  6EDF               	movwf	indf2,c
  5327                           
  5328                           ;shutter.c: 88: break;
  5329  000A40  0012               	return	
  5330  000A42                     
  5331                           ;shutter.c: 90: sp -> state = 8;
  5332  000A42  C03C  FFD9         	movff	commandShutterUp@sp,fsr2l
  5333  000A46  C03D  FFDA         	movff	commandShutterUp@sp+1,fsr2h
  5334  000A4A  0E08               	movlw	8
  5335  000A4C  6EDF               	movwf	indf2,c
  5336                           
  5337                           ;shutter.c: 98: }
  5338                           
  5339                           ;shutter.c: 97: break;
  5340                           
  5341                           ;shutter.c: 95: default:
  5342                           
  5343                           ;shutter.c: 93: break;
  5344                           
  5345                           ;shutter.c: 92: case 8:
  5346                           
  5347                           ;shutter.c: 91: break;
  5348  000A4E  0012               	return	
  5349  000A50                     l274:
  5350  000A50  C03C  FFD9         	movff	commandShutterUp@sp,fsr2l
  5351  000A54  C03D  FFDA         	movff	commandShutterUp@sp+1,fsr2h
  5352  000A58  50DF               	movf	indf2,w,c
  5353                           
  5354                           ; Switch size 1, requested type "space"
  5355                           ; Number of cases is 4, Range of values is 1 to 21
  5356                           ; switch strategies available:
  5357                           ; Name         Instructions Cycles
  5358                           ; simple_byte           13     7 (average)
  5359                           ;	Chosen strategy is simple_byte
  5360  000A5A  0A01               	xorlw	1	; case 1
  5361  000A5C  B4D8               	btfsc	status,2,c
  5362  000A5E  D7E3               	goto	l275
  5363  000A60  0A09               	xorlw	9	; case 8
  5364  000A62  B4D8               	btfsc	status,2,c
  5365  000A64  0012               	return	
  5366  000A66  0A1C               	xorlw	28	; case 20
  5367  000A68  B4D8               	btfsc	status,2,c
  5368  000A6A  D7EB               	goto	l278
  5369  000A6C  0A01               	xorlw	1	; case 21
  5370  000A6E  A4D8               	btfss	status,2,c
  5371  000A70  0012               	return	
  5372  000A72  D7E0               	goto	l277
  5373  000A74                     __end_of_commandShutterUp:
  5374                           	opt stack 0
  5375                           tblptru	equ	0xFF8
  5376                           prodh	equ	0xFF4
  5377                           prodl	equ	0xFF3
  5378                           intcon	equ	0xFF2
  5379                           intcon2	equ	0xFF1
  5380                           postinc0	equ	0xFEE
  5381                           wreg	equ	0xFE8
  5382                           indf2	equ	0xFDF
  5383                           postinc2	equ	0xFDE
  5384                           postdec2	equ	0xFDD
  5385                           plusw2	equ	0xFDB
  5386                           fsr2h	equ	0xFDA
  5387                           fsr2l	equ	0xFD9
  5388                           status	equ	0xFD8
  5389                           
  5390 ;; *************** function _commandShutterGroupDown *****************
  5391 ;; Defined at:
  5392 ;;		line 32 in file "shuttergroups.c"
  5393 ;; Parameters:    Size  Location     Type
  5394 ;;  group           1    wreg     unsigned char 
  5395 ;; Auto vars:     Size  Location     Type
  5396 ;;  group           1   25[COMRAM] unsigned char 
  5397 ;;  g               1   26[COMRAM] unsigned char 
  5398 ;; Return value:  Size  Location     Type
  5399 ;;                  1    wreg      void 
  5400 ;; Registers used:
  5401 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5402 ;; Tracked objects:
  5403 ;;		On entry : 0/0
  5404 ;;		On exit  : 0/0
  5405 ;;		Unchanged: 0/0
  5406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5407 ;;      Params:         0       0       0       0       0       0       0
  5408 ;;      Locals:         2       0       0       0       0       0       0
  5409 ;;      Temps:          0       0       0       0       0       0       0
  5410 ;;      Totals:         2       0       0       0       0       0       0
  5411 ;;Total ram usage:        2 bytes
  5412 ;; Hardware stack levels used:    1
  5413 ;; Hardware stack levels required when called:    5
  5414 ;; This function calls:
  5415 ;;		_commandShutterDown
  5416 ;;		_readShutterGroupByte
  5417 ;; This function is called by:
  5418 ;;		_handleShuttergroupButton
  5419 ;;		_i2cParser
  5420 ;; This function uses a non-reentrant model
  5421 ;;
  5422                           
  5423                           	psect	text40
  5424  000D66                     __ptext40:
  5425                           	opt stack 0
  5426  000D66                     _commandShutterGroupDown:
  5427                           	opt stack 22
  5428                           
  5429                           ;incstack = 0
  5430                           ;commandShutterGroupDown@group stored from wreg
  5431  000D66  6E3E               	movwf	commandShutterGroupDown@group,c
  5432                           
  5433                           ;shuttergroups.c: 34: unsigned char g = readShutterGroupByte(group, 0);
  5434  000D68  0E00               	movlw	0
  5435  000D6A  6E3C               	movwf	readShutterGroupByte@which,c
  5436  000D6C  503E               	movf	commandShutterGroupDown@group,w,c
  5437  000D6E  ECE8  F008         	call	_readShutterGroupByte
  5438  000D72  6E3F               	movwf	commandShutterGroupDown@g,c
  5439                           
  5440                           ;shuttergroups.c: 36: if ( g & 0x01) commandShutterDown(0);
  5441  000D74  A03F               	btfss	commandShutterGroupDown@g,0,c
  5442  000D76  D003               	goto	l503
  5443  000D78  0E00               	movlw	0
  5444  000D7A  EC3A  F005         	call	_commandShutterDown
  5445  000D7E                     l503:
  5446                           
  5447                           ;shuttergroups.c: 37: if ( g & 0x02) commandShutterDown(1);
  5448  000D7E  A23F               	btfss	commandShutterGroupDown@g,1,c
  5449  000D80  D003               	goto	l504
  5450  000D82  0E01               	movlw	1
  5451  000D84  EC3A  F005         	call	_commandShutterDown
  5452  000D88                     l504:
  5453                           
  5454                           ;shuttergroups.c: 38: if ( g & 0x04) commandShutterDown(2);
  5455  000D88  A43F               	btfss	commandShutterGroupDown@g,2,c
  5456  000D8A  D003               	goto	l505
  5457  000D8C  0E02               	movlw	2
  5458  000D8E  EC3A  F005         	call	_commandShutterDown
  5459  000D92                     l505:
  5460                           
  5461                           ;shuttergroups.c: 39: if ( g & 0x08) commandShutterDown(3);
  5462  000D92  A63F               	btfss	commandShutterGroupDown@g,3,c
  5463  000D94  D003               	goto	l506
  5464  000D96  0E03               	movlw	3
  5465  000D98  EC3A  F005         	call	_commandShutterDown
  5466  000D9C                     l506:
  5467                           
  5468                           ;shuttergroups.c: 40: if ( g & 0x10) commandShutterDown(4);
  5469  000D9C  A83F               	btfss	commandShutterGroupDown@g,4,c
  5470  000D9E  0012               	return	
  5471  000DA0  0E04               	movlw	4
  5472  000DA2  EC3A  F005         	call	_commandShutterDown
  5473  000DA6  0012               	return	
  5474  000DA8                     __end_of_commandShutterGroupDown:
  5475                           	opt stack 0
  5476                           tblptru	equ	0xFF8
  5477                           prodh	equ	0xFF4
  5478                           prodl	equ	0xFF3
  5479                           intcon	equ	0xFF2
  5480                           intcon2	equ	0xFF1
  5481                           postinc0	equ	0xFEE
  5482                           wreg	equ	0xFE8
  5483                           indf2	equ	0xFDF
  5484                           postinc2	equ	0xFDE
  5485                           postdec2	equ	0xFDD
  5486                           plusw2	equ	0xFDB
  5487                           fsr2h	equ	0xFDA
  5488                           fsr2l	equ	0xFD9
  5489                           status	equ	0xFD8
  5490                           
  5491 ;; *************** function _commandShutterDown *****************
  5492 ;; Defined at:
  5493 ;;		line 101 in file "shutter.c"
  5494 ;; Parameters:    Size  Location     Type
  5495 ;;  shutternumbe    1    wreg     unsigned char 
  5496 ;; Auto vars:     Size  Location     Type
  5497 ;;  shutternumbe    1   22[COMRAM] unsigned char 
  5498 ;;  sp              2   23[COMRAM] PTR struct shutter
  5499 ;;		 -> shutter(15), 
  5500 ;; Return value:  Size  Location     Type
  5501 ;;                  1    wreg      void 
  5502 ;; Registers used:
  5503 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5504 ;; Tracked objects:
  5505 ;;		On entry : 0/0
  5506 ;;		On exit  : 0/0
  5507 ;;		Unchanged: 0/0
  5508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5509 ;;      Params:         0       0       0       0       0       0       0
  5510 ;;      Locals:         3       0       0       0       0       0       0
  5511 ;;      Temps:          0       0       0       0       0       0       0
  5512 ;;      Totals:         3       0       0       0       0       0       0
  5513 ;;Total ram usage:        3 bytes
  5514 ;; Hardware stack levels used:    1
  5515 ;; Hardware stack levels required when called:    3
  5516 ;; This function calls:
  5517 ;;		Nothing
  5518 ;; This function is called by:
  5519 ;;		_commandShutterGroupDown
  5520 ;;		_i2cParser
  5521 ;; This function uses a non-reentrant model
  5522 ;;
  5523                           
  5524                           	psect	text41
  5525  000A74                     __ptext41:
  5526                           	opt stack 0
  5527  000A74                     _commandShutterDown:
  5528                           	opt stack 23
  5529                           
  5530                           ;incstack = 0
  5531                           ;commandShutterDown@shutternumber stored from wreg
  5532  000A74  6E3B               	movwf	commandShutterDown@shutternumber,c
  5533                           
  5534                           ;shutter.c: 103: if ( shutternumber > 5-1)
  5535  000A76  0E04               	movlw	4
  5536  000A78  643B               	cpfsgt	commandShutterDown@shutternumber,c
  5537  000A7A  D001               	goto	l283
  5538  000A7C  0012               	return	
  5539  000A7E                     l283:
  5540                           
  5541                           ;shutter.c: 106: SHUTTER *sp = &shutter[shutternumber];
  5542  000A7E  503B               	movf	commandShutterDown@shutternumber,w,c
  5543  000A80  0D03               	mullw	3
  5544  000A82  0E16               	movlw	low _shutter
  5545  000A84  24F3               	addwf	prodl,w,c
  5546  000A86  6E3C               	movwf	commandShutterDown@sp,c
  5547  000A88  0E00               	movlw	high _shutter
  5548  000A8A  20F4               	addwfc	prodh,w,c
  5549  000A8C  6E3D               	movwf	commandShutterDown@sp+1,c
  5550                           
  5551                           ;shutter.c: 108: switch ( sp -> state ) {
  5552  000A8E  D015               	goto	l285
  5553  000A90                     
  5554                           ;shutter.c: 111: sp -> state = 23;
  5555  000A90  C03C  FFD9         	movff	commandShutterDown@sp,fsr2l
  5556  000A94  C03D  FFDA         	movff	commandShutterDown@sp+1,fsr2h
  5557  000A98  0E17               	movlw	23
  5558  000A9A  6EDF               	movwf	indf2,c
  5559                           
  5560                           ;shutter.c: 112: break;
  5561  000A9C  0012               	return	
  5562  000A9E                     
  5563                           ;shutter.c: 114: sp -> state = 2;
  5564  000A9E  C03C  FFD9         	movff	commandShutterDown@sp,fsr2l
  5565  000AA2  C03D  FFDA         	movff	commandShutterDown@sp+1,fsr2h
  5566  000AA6  0E02               	movlw	2
  5567  000AA8  6EDF               	movwf	indf2,c
  5568                           
  5569                           ;shutter.c: 115: break;
  5570  000AAA  0012               	return	
  5571  000AAC                     
  5572                           ;shutter.c: 117: sp -> state = 8;
  5573  000AAC  C03C  FFD9         	movff	commandShutterDown@sp,fsr2l
  5574  000AB0  C03D  FFDA         	movff	commandShutterDown@sp+1,fsr2h
  5575  000AB4  0E08               	movlw	8
  5576  000AB6  6EDF               	movwf	indf2,c
  5577                           
  5578                           ;shutter.c: 123: }
  5579                           
  5580                           ;shutter.c: 122: break;
  5581                           
  5582                           ;shutter.c: 120: default:
  5583                           
  5584                           ;shutter.c: 119: break;
  5585                           
  5586                           ;shutter.c: 118: case 8:
  5587  000AB8  0012               	return	
  5588  000ABA                     l285:
  5589  000ABA  C03C  FFD9         	movff	commandShutterDown@sp,fsr2l
  5590  000ABE  C03D  FFDA         	movff	commandShutterDown@sp+1,fsr2h
  5591  000AC2  50DF               	movf	indf2,w,c
  5592                           
  5593                           ; Switch size 1, requested type "space"
  5594                           ; Number of cases is 4, Range of values is 1 to 21
  5595                           ; switch strategies available:
  5596                           ; Name         Instructions Cycles
  5597                           ; simple_byte           13     7 (average)
  5598                           ;	Chosen strategy is simple_byte
  5599  000AC4  0A01               	xorlw	1	; case 1
  5600  000AC6  B4D8               	btfsc	status,2,c
  5601  000AC8  D7E3               	goto	l286
  5602  000ACA  0A09               	xorlw	9	; case 8
  5603  000ACC  B4D8               	btfsc	status,2,c
  5604  000ACE  0012               	return	
  5605  000AD0  0A1C               	xorlw	28	; case 20
  5606  000AD2  B4D8               	btfsc	status,2,c
  5607  000AD4  D7E4               	goto	l288
  5608  000AD6  0A01               	xorlw	1	; case 21
  5609  000AD8  A4D8               	btfss	status,2,c
  5610  000ADA  0012               	return	
  5611  000ADC  D7E7               	goto	l289
  5612  000ADE                     __end_of_commandShutterDown:
  5613                           	opt stack 0
  5614                           tblptru	equ	0xFF8
  5615                           prodh	equ	0xFF4
  5616                           prodl	equ	0xFF3
  5617                           intcon	equ	0xFF2
  5618                           intcon2	equ	0xFF1
  5619                           postinc0	equ	0xFEE
  5620                           wreg	equ	0xFE8
  5621                           indf2	equ	0xFDF
  5622                           postinc2	equ	0xFDE
  5623                           postdec2	equ	0xFDD
  5624                           plusw2	equ	0xFDB
  5625                           fsr2h	equ	0xFDA
  5626                           fsr2l	equ	0xFD9
  5627                           status	equ	0xFD8
  5628                           
  5629 ;; *************** function _findShuttergroupButton *****************
  5630 ;; Defined at:
  5631 ;;		line 70 in file "shuttergroups.c"
  5632 ;; Parameters:    Size  Location     Type
  5633 ;;  button          1    wreg     unsigned char 
  5634 ;; Auto vars:     Size  Location     Type
  5635 ;;  button          1   23[COMRAM] unsigned char 
  5636 ;;  i               1   24[COMRAM] unsigned char 
  5637 ;; Return value:  Size  Location     Type
  5638 ;;                  1    wreg      char 
  5639 ;; Registers used:
  5640 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5641 ;; Tracked objects:
  5642 ;;		On entry : 0/0
  5643 ;;		On exit  : 0/0
  5644 ;;		Unchanged: 0/0
  5645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5646 ;;      Params:         0       0       0       0       0       0       0
  5647 ;;      Locals:         2       0       0       0       0       0       0
  5648 ;;      Temps:          0       0       0       0       0       0       0
  5649 ;;      Totals:         2       0       0       0       0       0       0
  5650 ;;Total ram usage:        2 bytes
  5651 ;; Hardware stack levels used:    1
  5652 ;; Hardware stack levels required when called:    4
  5653 ;; This function calls:
  5654 ;;		_eepromRead
  5655 ;; This function is called by:
  5656 ;;		_decodeButton
  5657 ;; This function uses a non-reentrant model
  5658 ;;
  5659                           
  5660                           	psect	text42
  5661  000CE0                     __ptext42:
  5662                           	opt stack 0
  5663  000CE0                     _findShuttergroupButton:
  5664                           	opt stack 24
  5665                           
  5666                           ;incstack = 0
  5667                           ;findShuttergroupButton@button stored from wreg
  5668  000CE0  6E3C               	movwf	findShuttergroupButton@button,c
  5669                           
  5670                           ;shuttergroups.c: 72: unsigned char i;
  5671                           ;shuttergroups.c: 74: for ( i = 0; i < 12; i++) {
  5672  000CE2  0E00               	movlw	0
  5673  000CE4  6E3D               	movwf	findShuttergroupButton@i,c
  5674  000CE6                     l3441:
  5675  000CE6  0E0B               	movlw	11
  5676  000CE8  643D               	cpfsgt	findShuttergroupButton@i,c
  5677  000CEA  D001               	goto	l527
  5678  000CEC  D019               	goto	u3010
  5679  000CEE                     l527:
  5680                           
  5681                           ;shuttergroups.c: 76: if ( eepromRead(0x20 + (0x03 * i) + 1) == button ) {
  5682  000CEE  503D               	movf	findShuttergroupButton@i,w,c
  5683  000CF0  0D03               	mullw	3
  5684  000CF2  50F3               	movf	prodl,w,c
  5685  000CF4  0F21               	addlw	33
  5686  000CF6  ECF1  F008         	call	_eepromRead
  5687  000CFA  183C               	xorwf	findShuttergroupButton@button,w,c
  5688  000CFC  A4D8               	btfss	status,2,c
  5689  000CFE  D002               	goto	l529
  5690                           
  5691                           ;shuttergroups.c: 77: return i;
  5692  000D00  503D               	movf	findShuttergroupButton@i,w,c
  5693  000D02  0012               	return	
  5694  000D04                     l529:
  5695                           
  5696                           ;shuttergroups.c: 78: }
  5697                           ;shuttergroups.c: 80: if ( eepromRead(0x20 + (0x03 * i) + 2) == button ) {
  5698  000D04  503D               	movf	findShuttergroupButton@i,w,c
  5699  000D06  0D03               	mullw	3
  5700  000D08  50F3               	movf	prodl,w,c
  5701  000D0A  0F22               	addlw	34
  5702  000D0C  ECF1  F008         	call	_eepromRead
  5703  000D10  183C               	xorwf	findShuttergroupButton@button,w,c
  5704  000D12  A4D8               	btfss	status,2,c
  5705  000D14  D003               	goto	l531
  5706                           
  5707                           ;shuttergroups.c: 81: return 12 + i;
  5708  000D16  503D               	movf	findShuttergroupButton@i,w,c
  5709  000D18  0F0C               	addlw	12
  5710  000D1A  0012               	return	
  5711  000D1C                     l531:
  5712  000D1C  2A3D               	incf	findShuttergroupButton@i,f,c
  5713  000D1E  D7E3               	goto	l3441
  5714  000D20                     u3010:
  5715                           
  5716                           ;shuttergroups.c: 82: }
  5717                           ;shuttergroups.c: 83: }
  5718                           ;shuttergroups.c: 84: return -1;
  5719  000D20  0EFF               	movlw	255
  5720  000D22  0012               	return	
  5721  000D24                     __end_of_findShuttergroupButton:
  5722                           	opt stack 0
  5723                           tblptru	equ	0xFF8
  5724                           prodh	equ	0xFF4
  5725                           prodl	equ	0xFF3
  5726                           intcon	equ	0xFF2
  5727                           intcon2	equ	0xFF1
  5728                           postinc0	equ	0xFEE
  5729                           wreg	equ	0xFE8
  5730                           indf2	equ	0xFDF
  5731                           postinc2	equ	0xFDE
  5732                           postdec2	equ	0xFDD
  5733                           plusw2	equ	0xFDB
  5734                           fsr2h	equ	0xFDA
  5735                           fsr2l	equ	0xFD9
  5736                           status	equ	0xFD8
  5737                           
  5738 ;; *************** function _buttonsReset *****************
  5739 ;; Defined at:
  5740 ;;		line 102 in file "buttons.c"
  5741 ;; Parameters:    Size  Location     Type
  5742 ;;		None
  5743 ;; Auto vars:     Size  Location     Type
  5744 ;;  i               1   31[COMRAM] unsigned char 
  5745 ;; Return value:  Size  Location     Type
  5746 ;;                  1    wreg      void 
  5747 ;; Registers used:
  5748 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5749 ;; Tracked objects:
  5750 ;;		On entry : 0/0
  5751 ;;		On exit  : 0/0
  5752 ;;		Unchanged: 0/0
  5753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5754 ;;      Params:         0       0       0       0       0       0       0
  5755 ;;      Locals:         1       0       0       0       0       0       0
  5756 ;;      Temps:          1       0       0       0       0       0       0
  5757 ;;      Totals:         2       0       0       0       0       0       0
  5758 ;;Total ram usage:        2 bytes
  5759 ;; Hardware stack levels used:    1
  5760 ;; Hardware stack levels required when called:    7
  5761 ;; This function calls:
  5762 ;;		_releaseShuttergroupButton
  5763 ;; This function is called by:
  5764 ;;		_main
  5765 ;; This function uses a non-reentrant model
  5766 ;;
  5767                           
  5768                           	psect	text43
  5769  000776                     __ptext43:
  5770                           	opt stack 0
  5771  000776                     _buttonsReset:
  5772                           	opt stack 23
  5773                           
  5774                           ;buttons.c: 104: unsigned char i;
  5775                           ;buttons.c: 106: for ( i = 0; i < 24; i++) {
  5776                           
  5777                           ;incstack = 0
  5778  000776  0E00               	movlw	0
  5779  000778  6E44               	movwf	buttonsReset@i,c
  5780  00077A                     l3573:
  5781  00077A  0E17               	movlw	23
  5782  00077C  6444               	cpfsgt	buttonsReset@i,c
  5783  00077E  D001               	goto	l243
  5784  000780  0012               	return	
  5785  000782                     l243:
  5786                           
  5787                           ;buttons.c: 108: if ( buttons[i].watchdog > 5) {
  5788  000782  5044               	movf	buttonsReset@i,w,c
  5789  000784  0D0A               	mullw	10
  5790  000786  0E03               	movlw	3
  5791  000788  26F3               	addwf	prodl,f,c
  5792  00078A  0E00               	movlw	0
  5793  00078C  22F4               	addwfc	prodh,f,c
  5794  00078E  0E00               	movlw	low _buttons
  5795  000790  24F3               	addwf	prodl,w,c
  5796  000792  6ED9               	movwf	fsr2l,c
  5797  000794  0E01               	movlw	high _buttons
  5798  000796  20F4               	addwfc	prodh,w,c
  5799  000798  6EDA               	movwf	fsr2h,c
  5800  00079A  0E05               	movlw	5
  5801  00079C  64DF               	cpfsgt	indf2,c
  5802  00079E  D02F               	goto	l245
  5803                           
  5804                           ;buttons.c: 115: if ( buttons[i].isActive ) {
  5805  0007A0  5044               	movf	buttonsReset@i,w,c
  5806  0007A2  0D0A               	mullw	10
  5807  0007A4  0E02               	movlw	2
  5808  0007A6  26F3               	addwf	prodl,f,c
  5809  0007A8  0E00               	movlw	0
  5810  0007AA  22F4               	addwfc	prodh,f,c
  5811  0007AC  0E00               	movlw	low _buttons
  5812  0007AE  24F3               	addwf	prodl,w,c
  5813  0007B0  6ED9               	movwf	fsr2l,c
  5814  0007B2  0E01               	movlw	high _buttons
  5815  0007B4  20F4               	addwfc	prodh,w,c
  5816  0007B6  6EDA               	movwf	fsr2h,c
  5817  0007B8  50DF               	movf	indf2,w,c
  5818  0007BA  B4D8               	btfsc	status,2,c
  5819  0007BC  D011               	goto	l246
  5820                           
  5821                           ;buttons.c: 116: buttons[i].watchdog = 0;
  5822  0007BE  5044               	movf	buttonsReset@i,w,c
  5823  0007C0  0D0A               	mullw	10
  5824  0007C2  0E03               	movlw	3
  5825  0007C4  26F3               	addwf	prodl,f,c
  5826  0007C6  0E00               	movlw	0
  5827  0007C8  22F4               	addwfc	prodh,f,c
  5828  0007CA  0E00               	movlw	low _buttons
  5829  0007CC  24F3               	addwf	prodl,w,c
  5830  0007CE  6ED9               	movwf	fsr2l,c
  5831  0007D0  0E01               	movlw	high _buttons
  5832  0007D2  20F4               	addwfc	prodh,w,c
  5833  0007D4  6EDA               	movwf	fsr2h,c
  5834  0007D6  0E00               	movlw	0
  5835  0007D8  6EDF               	movwf	indf2,c
  5836                           
  5837                           ;buttons.c: 117: releaseShuttergroupButton(i);
  5838  0007DA  5044               	movf	buttonsReset@i,w,c
  5839  0007DC  ECAD  F008         	call	_releaseShuttergroupButton
  5840  0007E0                     l246:
  5841                           
  5842                           ;buttons.c: 119: }
  5843                           ;buttons.c: 120: buttons[i].isActive = 0;
  5844  0007E0  5044               	movf	buttonsReset@i,w,c
  5845  0007E2  0D0A               	mullw	10
  5846  0007E4  0E02               	movlw	2
  5847  0007E6  26F3               	addwf	prodl,f,c
  5848  0007E8  0E00               	movlw	0
  5849  0007EA  22F4               	addwfc	prodh,f,c
  5850  0007EC  0E00               	movlw	low _buttons
  5851  0007EE  24F3               	addwf	prodl,w,c
  5852  0007F0  6ED9               	movwf	fsr2l,c
  5853  0007F2  0E01               	movlw	high _buttons
  5854  0007F4  20F4               	addwfc	prodh,w,c
  5855  0007F6  6EDA               	movwf	fsr2h,c
  5856  0007F8  0E00               	movlw	0
  5857  0007FA  6EDF               	movwf	indf2,c
  5858                           
  5859                           ;buttons.c: 121: }
  5860  0007FC  D01C               	goto	l248
  5861  0007FE                     l245:
  5862                           
  5863                           ;buttons.c: 122: else {
  5864                           ;buttons.c: 123: if ( buttons[i].isActive ) {
  5865  0007FE  5044               	movf	buttonsReset@i,w,c
  5866  000800  0D0A               	mullw	10
  5867  000802  0E02               	movlw	2
  5868  000804  26F3               	addwf	prodl,f,c
  5869  000806  0E00               	movlw	0
  5870  000808  22F4               	addwfc	prodh,f,c
  5871  00080A  0E00               	movlw	low _buttons
  5872  00080C  24F3               	addwf	prodl,w,c
  5873  00080E  6ED9               	movwf	fsr2l,c
  5874  000810  0E01               	movlw	high _buttons
  5875  000812  20F4               	addwfc	prodh,w,c
  5876  000814  6EDA               	movwf	fsr2h,c
  5877  000816  50DF               	movf	indf2,w,c
  5878  000818  B4D8               	btfsc	status,2,c
  5879  00081A  D00D               	goto	l248
  5880                           
  5881                           ;buttons.c: 124: buttons[i].watchdog++;
  5882  00081C  5044               	movf	buttonsReset@i,w,c
  5883  00081E  0D0A               	mullw	10
  5884  000820  0E03               	movlw	3
  5885  000822  26F3               	addwf	prodl,f,c
  5886  000824  0E00               	movlw	0
  5887  000826  22F4               	addwfc	prodh,f,c
  5888  000828  0E00               	movlw	low _buttons
  5889  00082A  24F3               	addwf	prodl,w,c
  5890  00082C  6ED9               	movwf	fsr2l,c
  5891  00082E  0E01               	movlw	high _buttons
  5892  000830  20F4               	addwfc	prodh,w,c
  5893  000832  6EDA               	movwf	fsr2h,c
  5894  000834  2ADF               	incf	indf2,f,c
  5895  000836                     l248:
  5896  000836  2A44               	incf	buttonsReset@i,f,c
  5897  000838  D7A0               	goto	l3573
  5898  00083A                     __end_of_buttonsReset:
  5899                           	opt stack 0
  5900                           tblptru	equ	0xFF8
  5901                           prodh	equ	0xFF4
  5902                           prodl	equ	0xFF3
  5903                           intcon	equ	0xFF2
  5904                           intcon2	equ	0xFF1
  5905                           postinc0	equ	0xFEE
  5906                           wreg	equ	0xFE8
  5907                           indf2	equ	0xFDF
  5908                           postinc2	equ	0xFDE
  5909                           postdec2	equ	0xFDD
  5910                           plusw2	equ	0xFDB
  5911                           fsr2h	equ	0xFDA
  5912                           fsr2l	equ	0xFD9
  5913                           status	equ	0xFD8
  5914                           
  5915 ;; *************** function _releaseShuttergroupButton *****************
  5916 ;; Defined at:
  5917 ;;		line 101 in file "shuttergroups.c"
  5918 ;; Parameters:    Size  Location     Type
  5919 ;;  buttonIndex     1    wreg     unsigned char 
  5920 ;; Auto vars:     Size  Location     Type
  5921 ;;  buttonIndex     1   29[COMRAM] unsigned char 
  5922 ;; Return value:  Size  Location     Type
  5923 ;;                  1    wreg      void 
  5924 ;; Registers used:
  5925 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5926 ;; Tracked objects:
  5927 ;;		On entry : 0/0
  5928 ;;		On exit  : 0/0
  5929 ;;		Unchanged: 0/0
  5930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5931 ;;      Params:         0       0       0       0       0       0       0
  5932 ;;      Locals:         1       0       0       0       0       0       0
  5933 ;;      Temps:          0       0       0       0       0       0       0
  5934 ;;      Totals:         1       0       0       0       0       0       0
  5935 ;;Total ram usage:        1 bytes
  5936 ;; Hardware stack levels used:    1
  5937 ;; Hardware stack levels required when called:    6
  5938 ;; This function calls:
  5939 ;;		_handleShutterShortMove
  5940 ;; This function is called by:
  5941 ;;		_buttonsReset
  5942 ;; This function uses a non-reentrant model
  5943 ;;
  5944                           
  5945                           	psect	text44
  5946  00115A                     __ptext44:
  5947                           	opt stack 0
  5948  00115A                     _releaseShuttergroupButton:
  5949                           	opt stack 23
  5950                           
  5951                           ;incstack = 0
  5952                           ;releaseShuttergroupButton@buttonIndex stored from wreg
  5953  00115A  6E42               	movwf	releaseShuttergroupButton@buttonIndex,c
  5954                           
  5955                           ;shuttergroups.c: 103: if ( buttonIndex >= 12) {
  5956  00115C  0E0B               	movlw	11
  5957  00115E  6442               	cpfsgt	releaseShuttergroupButton@buttonIndex,c
  5958  001160  D005               	goto	l539
  5959                           
  5960                           ;shuttergroups.c: 104: handleShutterShortMove(buttonIndex - 12);
  5961  001162  5042               	movf	releaseShuttergroupButton@buttonIndex,w,c
  5962  001164  0FF4               	addlw	244
  5963  001166  ECD4  F006         	call	_handleShutterShortMove
  5964                           
  5965                           ;shuttergroups.c: 105: }
  5966  00116A  0012               	return	
  5967  00116C                     l539:
  5968                           
  5969                           ;shuttergroups.c: 106: else {
  5970                           ;shuttergroups.c: 107: handleShutterShortMove(buttonIndex);
  5971  00116C  5042               	movf	releaseShuttergroupButton@buttonIndex,w,c
  5972  00116E  ECD4  F006         	call	_handleShutterShortMove
  5973  001172  0012               	return	
  5974  001174                     __end_of_releaseShuttergroupButton:
  5975                           	opt stack 0
  5976                           tblptru	equ	0xFF8
  5977                           prodh	equ	0xFF4
  5978                           prodl	equ	0xFF3
  5979                           intcon	equ	0xFF2
  5980                           intcon2	equ	0xFF1
  5981                           postinc0	equ	0xFEE
  5982                           wreg	equ	0xFE8
  5983                           indf2	equ	0xFDF
  5984                           postinc2	equ	0xFDE
  5985                           postdec2	equ	0xFDD
  5986                           plusw2	equ	0xFDB
  5987                           fsr2h	equ	0xFDA
  5988                           fsr2l	equ	0xFD9
  5989                           status	equ	0xFD8
  5990                           
  5991 ;; *************** function _handleShutterShortMove *****************
  5992 ;; Defined at:
  5993 ;;		line 54 in file "shuttergroups.c"
  5994 ;; Parameters:    Size  Location     Type
  5995 ;;  group           1    wreg     unsigned char 
  5996 ;; Auto vars:     Size  Location     Type
  5997 ;;  group           1   27[COMRAM] unsigned char 
  5998 ;;  g               1   28[COMRAM] unsigned char 
  5999 ;; Return value:  Size  Location     Type
  6000 ;;                  1    wreg      void 
  6001 ;; Registers used:
  6002 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6003 ;; Tracked objects:
  6004 ;;		On entry : 0/0
  6005 ;;		On exit  : 0/0
  6006 ;;		Unchanged: 0/0
  6007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6008 ;;      Params:         0       0       0       0       0       0       0
  6009 ;;      Locals:         2       0       0       0       0       0       0
  6010 ;;      Temps:          0       0       0       0       0       0       0
  6011 ;;      Totals:         2       0       0       0       0       0       0
  6012 ;;Total ram usage:        2 bytes
  6013 ;; Hardware stack levels used:    1
  6014 ;; Hardware stack levels required when called:    5
  6015 ;; This function calls:
  6016 ;;		_readShutterGroupByte
  6017 ;;		_testShortMove
  6018 ;; This function is called by:
  6019 ;;		_releaseShuttergroupButton
  6020 ;; This function uses a non-reentrant model
  6021 ;;
  6022                           
  6023                           	psect	text45
  6024  000DA8                     __ptext45:
  6025                           	opt stack 0
  6026  000DA8                     _handleShutterShortMove:
  6027                           	opt stack 23
  6028                           
  6029                           ;incstack = 0
  6030                           ;handleShutterShortMove@group stored from wreg
  6031  000DA8  6E40               	movwf	handleShutterShortMove@group,c
  6032                           
  6033                           ;shuttergroups.c: 56: unsigned char g = readShutterGroupByte(group, 0);
  6034  000DAA  0E00               	movlw	0
  6035  000DAC  6E3C               	movwf	readShutterGroupByte@which,c
  6036  000DAE  5040               	movf	handleShutterShortMove@group,w,c
  6037  000DB0  ECE8  F008         	call	_readShutterGroupByte
  6038  000DB4  6E41               	movwf	handleShutterShortMove@g,c
  6039                           
  6040                           ;shuttergroups.c: 58: if ( g & 0x01) testShortMove(0);
  6041  000DB6  A041               	btfss	handleShutterShortMove@g,0,c
  6042  000DB8  D003               	goto	l519
  6043  000DBA  0E00               	movlw	0
  6044  000DBC  EC31  F007         	call	_testShortMove
  6045  000DC0                     l519:
  6046                           
  6047                           ;shuttergroups.c: 59: if ( g & 0x02) testShortMove(1);
  6048  000DC0  A241               	btfss	handleShutterShortMove@g,1,c
  6049  000DC2  D003               	goto	l520
  6050  000DC4  0E01               	movlw	1
  6051  000DC6  EC31  F007         	call	_testShortMove
  6052  000DCA                     l520:
  6053                           
  6054                           ;shuttergroups.c: 60: if ( g & 0x04) testShortMove(2);
  6055  000DCA  A441               	btfss	handleShutterShortMove@g,2,c
  6056  000DCC  D003               	goto	l521
  6057  000DCE  0E02               	movlw	2
  6058  000DD0  EC31  F007         	call	_testShortMove
  6059  000DD4                     l521:
  6060                           
  6061                           ;shuttergroups.c: 61: if ( g & 0x08) testShortMove(3);
  6062  000DD4  A641               	btfss	handleShutterShortMove@g,3,c
  6063  000DD6  D003               	goto	l522
  6064  000DD8  0E03               	movlw	3
  6065  000DDA  EC31  F007         	call	_testShortMove
  6066  000DDE                     l522:
  6067                           
  6068                           ;shuttergroups.c: 62: if ( g & 0x10) testShortMove(4);
  6069  000DDE  A841               	btfss	handleShutterShortMove@g,4,c
  6070  000DE0  0012               	return	
  6071  000DE2  0E04               	movlw	4
  6072  000DE4  EC31  F007         	call	_testShortMove
  6073  000DE8  0012               	return	
  6074  000DEA                     __end_of_handleShutterShortMove:
  6075                           	opt stack 0
  6076                           tblptru	equ	0xFF8
  6077                           prodh	equ	0xFF4
  6078                           prodl	equ	0xFF3
  6079                           intcon	equ	0xFF2
  6080                           intcon2	equ	0xFF1
  6081                           postinc0	equ	0xFEE
  6082                           wreg	equ	0xFE8
  6083                           indf2	equ	0xFDF
  6084                           postinc2	equ	0xFDE
  6085                           postdec2	equ	0xFDD
  6086                           plusw2	equ	0xFDB
  6087                           fsr2h	equ	0xFDA
  6088                           fsr2l	equ	0xFD9
  6089                           status	equ	0xFD8
  6090                           
  6091 ;; *************** function _testShortMove *****************
  6092 ;; Defined at:
  6093 ;;		line 198 in file "shutter.c"
  6094 ;; Parameters:    Size  Location     Type
  6095 ;;  shutternumbe    1    wreg     unsigned char 
  6096 ;; Auto vars:     Size  Location     Type
  6097 ;;  shutternumbe    1   24[COMRAM] unsigned char 
  6098 ;;  sp              2   25[COMRAM] PTR struct shutter
  6099 ;;		 -> shutter(15), 
  6100 ;; Return value:  Size  Location     Type
  6101 ;;                  1    wreg      void 
  6102 ;; Registers used:
  6103 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6104 ;; Tracked objects:
  6105 ;;		On entry : 0/0
  6106 ;;		On exit  : 0/0
  6107 ;;		Unchanged: 0/0
  6108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6109 ;;      Params:         0       0       0       0       0       0       0
  6110 ;;      Locals:         3       0       0       0       0       0       0
  6111 ;;      Temps:          2       0       0       0       0       0       0
  6112 ;;      Totals:         5       0       0       0       0       0       0
  6113 ;;Total ram usage:        5 bytes
  6114 ;; Hardware stack levels used:    1
  6115 ;; Hardware stack levels required when called:    3
  6116 ;; This function calls:
  6117 ;;		Nothing
  6118 ;; This function is called by:
  6119 ;;		_handleShutterShortMove
  6120 ;; This function uses a non-reentrant model
  6121 ;;
  6122                           
  6123                           	psect	text46
  6124  000E62                     __ptext46:
  6125                           	opt stack 0
  6126  000E62                     _testShortMove:
  6127                           	opt stack 24
  6128                           
  6129                           ;incstack = 0
  6130                           ;testShortMove@shutternumber stored from wreg
  6131  000E62  6E3D               	movwf	testShortMove@shutternumber,c
  6132                           
  6133                           ;shutter.c: 200: SHUTTER *sp = &shutter[shutternumber];
  6134  000E64  503D               	movf	testShortMove@shutternumber,w,c
  6135  000E66  0D03               	mullw	3
  6136  000E68  0E16               	movlw	low _shutter
  6137  000E6A  24F3               	addwf	prodl,w,c
  6138  000E6C  6E3E               	movwf	testShortMove@sp,c
  6139  000E6E  0E00               	movlw	high _shutter
  6140  000E70  20F4               	addwfc	prodh,w,c
  6141  000E72  6E3F               	movwf	testShortMove@sp+1,c
  6142                           
  6143                           ;shutter.c: 202: if ( sp -> count < 15 ) {
  6144  000E74  EE20 F001          	lfsr	2,1
  6145  000E78  503E               	movf	testShortMove@sp,w,c
  6146  000E7A  26D9               	addwf	fsr2l,f,c
  6147  000E7C  503F               	movf	testShortMove@sp+1,w,c
  6148  000E7E  22DA               	addwfc	fsr2h,f,c
  6149  000E80  0E01               	movlw	1
  6150  000E82  50DB               	movf	plusw2,w,c
  6151  000E84  E10B               	bnz	l304
  6152  000E86  0E0F               	movlw	15
  6153  000E88  5CDE               	subwf	postinc2,w,c
  6154  000E8A  B0D8               	btfsc	status,0,c
  6155  000E8C  0012               	return	
  6156                           
  6157                           ;shutter.c: 203: sp -> state = 8;
  6158  000E8E  C03E  FFD9         	movff	testShortMove@sp,fsr2l
  6159  000E92  C03F  FFDA         	movff	testShortMove@sp+1,fsr2h
  6160  000E96  0E08               	movlw	8
  6161  000E98  6EDF               	movwf	indf2,c
  6162  000E9A  0012               	return	
  6163  000E9C                     l304:
  6164  000E9C  0012               	return		;funcret
  6165  000E9E                     __end_of_testShortMove:
  6166                           	opt stack 0
  6167                           tblptru	equ	0xFF8
  6168                           prodh	equ	0xFF4
  6169                           prodl	equ	0xFF3
  6170                           intcon	equ	0xFF2
  6171                           intcon2	equ	0xFF1
  6172                           postinc0	equ	0xFEE
  6173                           wreg	equ	0xFE8
  6174                           indf2	equ	0xFDF
  6175                           postinc2	equ	0xFDE
  6176                           postdec2	equ	0xFDD
  6177                           plusw2	equ	0xFDB
  6178                           fsr2h	equ	0xFDA
  6179                           fsr2l	equ	0xFD9
  6180                           status	equ	0xFD8
  6181                           
  6182 ;; *************** function _readShutterGroupByte *****************
  6183 ;; Defined at:
  6184 ;;		line 26 in file "shuttergroups.c"
  6185 ;; Parameters:    Size  Location     Type
  6186 ;;  number          1    wreg     unsigned char 
  6187 ;;  which           1   23[COMRAM] unsigned char 
  6188 ;; Auto vars:     Size  Location     Type
  6189 ;;  number          1   24[COMRAM] unsigned char 
  6190 ;; Return value:  Size  Location     Type
  6191 ;;                  1    wreg      unsigned char 
  6192 ;; Registers used:
  6193 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6194 ;; Tracked objects:
  6195 ;;		On entry : 0/0
  6196 ;;		On exit  : 0/0
  6197 ;;		Unchanged: 0/0
  6198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6199 ;;      Params:         1       0       0       0       0       0       0
  6200 ;;      Locals:         1       0       0       0       0       0       0
  6201 ;;      Temps:          0       0       0       0       0       0       0
  6202 ;;      Totals:         2       0       0       0       0       0       0
  6203 ;;Total ram usage:        2 bytes
  6204 ;; Hardware stack levels used:    1
  6205 ;; Hardware stack levels required when called:    4
  6206 ;; This function calls:
  6207 ;;		_eepromRead
  6208 ;; This function is called by:
  6209 ;;		_commandShutterGroupDown
  6210 ;;		_commandShutterGroupUp
  6211 ;;		_handleShutterShortMove
  6212 ;;		_i2cParser
  6213 ;; This function uses a non-reentrant model
  6214 ;;
  6215                           
  6216                           	psect	text47
  6217  0011D0                     __ptext47:
  6218                           	opt stack 0
  6219  0011D0                     _readShutterGroupByte:
  6220                           	opt stack 22
  6221                           
  6222                           ;incstack = 0
  6223                           ;readShutterGroupByte@number stored from wreg
  6224  0011D0  6E3D               	movwf	readShutterGroupByte@number,c
  6225                           
  6226                           ;shuttergroups.c: 28: return eepromRead(0x20 + (0x03 * number) + which);
  6227  0011D2  503D               	movf	readShutterGroupByte@number,w,c
  6228  0011D4  0D03               	mullw	3
  6229  0011D6  50F3               	movf	prodl,w,c
  6230  0011D8  243C               	addwf	readShutterGroupByte@which,w,c
  6231  0011DA  0F20               	addlw	32
  6232  0011DC  ECF1  F008         	call	_eepromRead
  6233  0011E0  0012               	return	
  6234  0011E2                     __end_of_readShutterGroupByte:
  6235                           	opt stack 0
  6236                           tblptru	equ	0xFF8
  6237                           prodh	equ	0xFF4
  6238                           prodl	equ	0xFF3
  6239                           intcon	equ	0xFF2
  6240                           intcon2	equ	0xFF1
  6241                           postinc0	equ	0xFEE
  6242                           wreg	equ	0xFE8
  6243                           indf2	equ	0xFDF
  6244                           postinc2	equ	0xFDE
  6245                           postdec2	equ	0xFDD
  6246                           plusw2	equ	0xFDB
  6247                           fsr2h	equ	0xFDA
  6248                           fsr2l	equ	0xFD9
  6249                           status	equ	0xFD8
  6250                           
  6251 ;; *************** function _eepromRead *****************
  6252 ;; Defined at:
  6253 ;;		line 26 in file "eeprom.c"
  6254 ;; Parameters:    Size  Location     Type
  6255 ;;  address         1    wreg     unsigned char 
  6256 ;; Auto vars:     Size  Location     Type
  6257 ;;  address         1   22[COMRAM] unsigned char 
  6258 ;; Return value:  Size  Location     Type
  6259 ;;                  1    wreg      unsigned char 
  6260 ;; Registers used:
  6261 ;;		wreg, status,2
  6262 ;; Tracked objects:
  6263 ;;		On entry : 0/0
  6264 ;;		On exit  : 0/0
  6265 ;;		Unchanged: 0/0
  6266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6267 ;;      Params:         0       0       0       0       0       0       0
  6268 ;;      Locals:         1       0       0       0       0       0       0
  6269 ;;      Temps:          0       0       0       0       0       0       0
  6270 ;;      Totals:         1       0       0       0       0       0       0
  6271 ;;Total ram usage:        1 bytes
  6272 ;; Hardware stack levels used:    1
  6273 ;; Hardware stack levels required when called:    3
  6274 ;; This function calls:
  6275 ;;		Nothing
  6276 ;; This function is called by:
  6277 ;;		_getKeyForShutter
  6278 ;;		_readShutterGroupByte
  6279 ;;		_findShuttergroupButton
  6280 ;;		_readShutterGroup
  6281 ;; This function uses a non-reentrant model
  6282 ;;
  6283                           
  6284                           	psect	text48
  6285  0011E2                     __ptext48:
  6286                           	opt stack 0
  6287  0011E2                     _eepromRead:
  6288                           	opt stack 22
  6289                           
  6290                           ;incstack = 0
  6291                           ;eepromRead@address stored from wreg
  6292  0011E2  6E3B               	movwf	eepromRead@address,c
  6293                           
  6294                           ;eeprom.c: 28: EEADR = (address & 0x0ff);
  6295  0011E4  C03B  FFA9         	movff	eepromRead@address,4009	;volatile
  6296                           
  6297                           ;eeprom.c: 29: EECON1bits.CFGS = 0;
  6298  0011E8  9CA6               	bcf	4006,6,c	;volsfr
  6299                           
  6300                           ;eeprom.c: 30: EECON1bits.EEPGD = 0;
  6301  0011EA  9EA6               	bcf	4006,7,c	;volsfr
  6302                           
  6303                           ;eeprom.c: 31: EECON1bits.RD = 1;
  6304  0011EC  80A6               	bsf	4006,0,c	;volsfr
  6305                           
  6306                           ;eeprom.c: 32: return EEDATA;
  6307  0011EE  50A8               	movf	4008,w,c	;volatile
  6308  0011F0  0012               	return	
  6309  0011F2                     __end_of_eepromRead:
  6310                           	opt stack 0
  6311                           tblptru	equ	0xFF8
  6312                           prodh	equ	0xFF4
  6313                           prodl	equ	0xFF3
  6314                           intcon	equ	0xFF2
  6315                           intcon2	equ	0xFF1
  6316                           postinc0	equ	0xFEE
  6317                           wreg	equ	0xFE8
  6318                           indf2	equ	0xFDF
  6319                           postinc2	equ	0xFDE
  6320                           postdec2	equ	0xFDD
  6321                           plusw2	equ	0xFDB
  6322                           fsr2h	equ	0xFDA
  6323                           fsr2l	equ	0xFD9
  6324                           status	equ	0xFD8
  6325                           
  6326 ;; *************** function _low_isr *****************
  6327 ;; Defined at:
  6328 ;;		line 318 in file "interrupts.c"
  6329 ;; Parameters:    Size  Location     Type
  6330 ;;		None
  6331 ;; Auto vars:     Size  Location     Type
  6332 ;;		None
  6333 ;; Return value:  Size  Location     Type
  6334 ;;                  1    wreg      void 
  6335 ;; Registers used:
  6336 ;;		wreg, status,2
  6337 ;; Tracked objects:
  6338 ;;		On entry : 0/0
  6339 ;;		On exit  : 0/0
  6340 ;;		Unchanged: 0/0
  6341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6342 ;;      Params:         0       0       0       0       0       0       0
  6343 ;;      Locals:         0       0       0       0       0       0       0
  6344 ;;      Temps:          0       0       0      21       0       0       0
  6345 ;;      Totals:         0       0       0      21       0       0       0
  6346 ;;Total ram usage:       21 bytes
  6347 ;; Hardware stack levels used:    1
  6348 ;; Hardware stack levels required when called:    2
  6349 ;; This function calls:
  6350 ;;		Nothing
  6351 ;; This function is called by:
  6352 ;;		Interrupt level 1
  6353 ;; This function uses a non-reentrant model
  6354 ;;
  6355                           
  6356                           	psect	intcodelo
  6357  000018                     __pintcodelo:
  6358                           	opt stack 0
  6359  000018                     _low_isr:
  6360                           	opt stack 22
  6361                           
  6362                           ;incstack = 0
  6363  000018  8048               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6364  00001A  CFD8 F200          	movff	status,??_low_isr
  6365  00001E  CFE8 F201          	movff	wreg,??_low_isr+1
  6366  000022  CFE0 F202          	movff	bsr,??_low_isr+2
  6367  000026  CFFA F203          	movff	pclath,??_low_isr+3
  6368  00002A  CFFB F204          	movff	pclatu,??_low_isr+4
  6369  00002E  CFE9 F205          	movff	fsr0l,??_low_isr+5
  6370  000032  CFEA F206          	movff	fsr0h,??_low_isr+6
  6371  000036  CFE1 F207          	movff	fsr1l,??_low_isr+7
  6372  00003A  CFE2 F208          	movff	fsr1h,??_low_isr+8
  6373  00003E  CFD9 F209          	movff	fsr2l,??_low_isr+9
  6374  000042  CFDA F20A          	movff	fsr2h,??_low_isr+10
  6375  000046  CFF3 F20B          	movff	prodl,??_low_isr+11
  6376  00004A  CFF4 F20C          	movff	prodh,??_low_isr+12
  6377  00004E  CFF6 F20D          	movff	tblptrl,??_low_isr+13
  6378  000052  CFF7 F20E          	movff	tblptrh,??_low_isr+14
  6379  000056  CFF8 F20F          	movff	tblptru,??_low_isr+15
  6380  00005A  CFF5 F210          	movff	tablat,??_low_isr+16
  6381  00005E  C048  F211         	movff	btemp,??_low_isr+17
  6382  000062  C049  F212         	movff	btemp+1,??_low_isr+18
  6383  000066  C04A  F213         	movff	btemp+2,??_low_isr+19
  6384  00006A  C04B  F214         	movff	btemp+3,??_low_isr+20
  6385                           
  6386                           ;interrupts.c: 320: if ( INTCONbits.T0IF == 1) {
  6387  00006E  A4F2               	btfss	intcon,2,c	;volatile
  6388  000070  D008               	goto	i1l67
  6389                           
  6390                           ;interrupts.c: 322: bButtonTimer = 1;
  6391  000072  0E01               	movlw	1
  6392  000074  0100               	movlb	0	; () banked
  6393  000076  6FF6               	movwf	_bButtonTimer& (0+255),b	;volatile
  6394                           
  6395                           ; BSR set to: 0
  6396                           ;interrupts.c: 323: INTCONbits.T0IF = 0;
  6397  000078  94F2               	bcf	intcon,2,c	;volatile
  6398                           
  6399                           ;interrupts.c: 324: TMR0H = 0xA0;
  6400  00007A  0EA0               	movlw	160
  6401  00007C  6ED7               	movwf	4055,c	;volatile
  6402                           
  6403                           ;interrupts.c: 325: TMR0L = 0;
  6404  00007E  0E00               	movlw	0
  6405  000080  6ED6               	movwf	4054,c	;volatile
  6406  000082                     i1l67:
  6407                           
  6408                           ;interrupts.c: 326: }
  6409                           ;interrupts.c: 328: if ( PIR1bits.TMR1IF == 1) {
  6410                           
  6411                           ; BSR set to: 0
  6412  000082  A09E               	btfss	3998,0,c	;volatile
  6413  000084  D008               	goto	i1l68
  6414                           
  6415                           ;interrupts.c: 330: bShutterTimer = 1;
  6416  000086  0E01               	movlw	1
  6417  000088  0100               	movlb	0	; () banked
  6418  00008A  6FF5               	movwf	_bShutterTimer& (0+255),b	;volatile
  6419                           
  6420                           ; BSR set to: 0
  6421                           ;interrupts.c: 331: PIR1bits.TMR1IF = 0;
  6422  00008C  909E               	bcf	3998,0,c	;volatile
  6423                           
  6424                           ;interrupts.c: 332: TMR1H = 0x3C;
  6425  00008E  0E3C               	movlw	60
  6426  000090  6ECF               	movwf	4047,c	;volatile
  6427                           
  6428                           ;interrupts.c: 333: TMR1L = 0xB0;
  6429  000092  0EB0               	movlw	176
  6430  000094  6ECE               	movwf	4046,c	;volatile
  6431  000096                     i1l68:
  6432                           
  6433                           ; BSR set to: 0
  6434  000096  C214  F04B         	movff	??_low_isr+20,btemp+3
  6435  00009A  C213  F04A         	movff	??_low_isr+19,btemp+2
  6436  00009E  C212  F049         	movff	??_low_isr+18,btemp+1
  6437  0000A2  C211  F048         	movff	??_low_isr+17,btemp
  6438  0000A6  C210  FFF5         	movff	??_low_isr+16,tablat
  6439  0000AA  C20F  FFF8         	movff	??_low_isr+15,tblptru
  6440  0000AE  C20E  FFF7         	movff	??_low_isr+14,tblptrh
  6441  0000B2  C20D  FFF6         	movff	??_low_isr+13,tblptrl
  6442  0000B6  C20C  FFF4         	movff	??_low_isr+12,prodh
  6443  0000BA  C20B  FFF3         	movff	??_low_isr+11,prodl
  6444  0000BE  C20A  FFDA         	movff	??_low_isr+10,fsr2h
  6445  0000C2  C209  FFD9         	movff	??_low_isr+9,fsr2l
  6446  0000C6  C208  FFE2         	movff	??_low_isr+8,fsr1h
  6447  0000CA  C207  FFE1         	movff	??_low_isr+7,fsr1l
  6448  0000CE  C206  FFEA         	movff	??_low_isr+6,fsr0h
  6449  0000D2  C205  FFE9         	movff	??_low_isr+5,fsr0l
  6450  0000D6  C204  FFFB         	movff	??_low_isr+4,pclatu
  6451  0000DA  C203  FFFA         	movff	??_low_isr+3,pclath
  6452  0000DE  C202  FFE0         	movff	??_low_isr+2,bsr
  6453  0000E2  C201  FFE8         	movff	??_low_isr+1,wreg
  6454  0000E6  C200  FFD8         	movff	??_low_isr,status
  6455  0000EA  9048               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6456  0000EC  0010               	retfie	
  6457  0000EE                     __end_of_low_isr:
  6458                           	opt stack 0
  6459                           pclatu	equ	0xFFB
  6460                           pclath	equ	0xFFA
  6461                           tblptru	equ	0xFF8
  6462                           tblptrh	equ	0xFF7
  6463                           tblptrl	equ	0xFF6
  6464                           tablat	equ	0xFF5
  6465                           prodh	equ	0xFF4
  6466                           prodl	equ	0xFF3
  6467                           intcon	equ	0xFF2
  6468                           intcon2	equ	0xFF1
  6469                           postinc0	equ	0xFEE
  6470                           fsr0h	equ	0xFEA
  6471                           fsr0l	equ	0xFE9
  6472                           wreg	equ	0xFE8
  6473                           fsr1h	equ	0xFE2
  6474                           fsr1l	equ	0xFE1
  6475                           bsr	equ	0xFE0
  6476                           indf2	equ	0xFDF
  6477                           postinc2	equ	0xFDE
  6478                           postdec2	equ	0xFDD
  6479                           plusw2	equ	0xFDB
  6480                           fsr2h	equ	0xFDA
  6481                           fsr2l	equ	0xFD9
  6482                           status	equ	0xFD8
  6483                           
  6484 ;; *************** function _high_isr *****************
  6485 ;; Defined at:
  6486 ;;		line 17 in file "interrupts.c"
  6487 ;; Parameters:    Size  Location     Type
  6488 ;;		None
  6489 ;; Auto vars:     Size  Location     Type
  6490 ;;  data            1   21[COMRAM] unsigned char 
  6491 ;; Return value:  Size  Location     Type
  6492 ;;                  1    wreg      void 
  6493 ;; Registers used:
  6494 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6495 ;; Tracked objects:
  6496 ;;		On entry : 0/0
  6497 ;;		On exit  : 0/0
  6498 ;;		Unchanged: 0/0
  6499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6500 ;;      Params:         0       0       0       0       0       0       0
  6501 ;;      Locals:         1       0       0       0       0       0       0
  6502 ;;      Temps:         18       0       0       0       0       0       0
  6503 ;;      Totals:        19       0       0       0       0       0       0
  6504 ;;Total ram usage:       19 bytes
  6505 ;; Hardware stack levels used:    1
  6506 ;; Hardware stack levels required when called:    1
  6507 ;; This function calls:
  6508 ;;		_fifo1Put
  6509 ;;		_fifo2Put
  6510 ;;		i2_fifo3Empty
  6511 ;;		i2_fifo3Get
  6512 ;; This function is called by:
  6513 ;;		Interrupt level 2
  6514 ;; This function uses a non-reentrant model
  6515 ;;
  6516                           
  6517                           	psect	intcode
  6518  000008                     __pintcode:
  6519                           	opt stack 0
  6520  000008                     _high_isr:
  6521                           	opt stack 22
  6522                           
  6523                           ;incstack = 0
  6524  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6525  00000A  EF9A  F002         	goto	int_func
  6526                           pclatu	equ	0xFFB
  6527                           pclath	equ	0xFFA
  6528                           tblptru	equ	0xFF8
  6529                           tblptrh	equ	0xFF7
  6530                           tblptrl	equ	0xFF6
  6531                           tablat	equ	0xFF5
  6532                           prodh	equ	0xFF4
  6533                           prodl	equ	0xFF3
  6534                           intcon	equ	0xFF2
  6535                           intcon2	equ	0xFF1
  6536                           postinc0	equ	0xFEE
  6537                           fsr0h	equ	0xFEA
  6538                           fsr0l	equ	0xFE9
  6539                           wreg	equ	0xFE8
  6540                           fsr1h	equ	0xFE2
  6541                           fsr1l	equ	0xFE1
  6542                           bsr	equ	0xFE0
  6543                           indf2	equ	0xFDF
  6544                           postinc2	equ	0xFDE
  6545                           postdec2	equ	0xFDD
  6546                           plusw2	equ	0xFDB
  6547                           fsr2h	equ	0xFDA
  6548                           fsr2l	equ	0xFD9
  6549                           status	equ	0xFD8
  6550                           
  6551                           	psect	intcode_body
  6552  000534                     __pintcode_body:
  6553                           	opt stack 22
  6554  000534                     int_func:
  6555                           	opt stack 22
  6556  000534  CFFA F028          	movff	pclath,??_high_isr
  6557  000538  CFFB F029          	movff	pclatu,??_high_isr+1
  6558  00053C  CFE9 F02A          	movff	fsr0l,??_high_isr+2
  6559  000540  CFEA F02B          	movff	fsr0h,??_high_isr+3
  6560  000544  CFE1 F02C          	movff	fsr1l,??_high_isr+4
  6561  000548  CFE2 F02D          	movff	fsr1h,??_high_isr+5
  6562  00054C  CFD9 F02E          	movff	fsr2l,??_high_isr+6
  6563  000550  CFDA F02F          	movff	fsr2h,??_high_isr+7
  6564  000554  CFF3 F030          	movff	prodl,??_high_isr+8
  6565  000558  CFF4 F031          	movff	prodh,??_high_isr+9
  6566  00055C  CFF6 F032          	movff	tblptrl,??_high_isr+10
  6567  000560  CFF7 F033          	movff	tblptrh,??_high_isr+11
  6568  000564  CFF8 F034          	movff	tblptru,??_high_isr+12
  6569  000568  CFF5 F035          	movff	tablat,??_high_isr+13
  6570  00056C  C048  F036         	movff	btemp,??_high_isr+14
  6571  000570  C049  F037         	movff	btemp+1,??_high_isr+15
  6572  000574  C04A  F038         	movff	btemp+2,??_high_isr+16
  6573  000578  C04B  F039         	movff	btemp+3,??_high_isr+17
  6574                           
  6575                           ;interrupts.c: 19: unsigned char data;
  6576                           ;interrupts.c: 21: if (PIR1bits.RCIF == 1) {
  6577  00057C  AA9E               	btfss	3998,5,c	;volatile
  6578  00057E  D006               	goto	i2l39
  6579                           
  6580                           ;interrupts.c: 23: data = RCREG;
  6581  000580  CFAE F03A          	movff	4014,high_isr@data	;volatile
  6582                           
  6583                           ;interrupts.c: 24: fifo1Put(data);
  6584  000584  503A               	movf	high_isr@data,w,c
  6585  000586  EC43  F008         	call	_fifo1Put
  6586                           
  6587                           ;interrupts.c: 25: PIR1bits.RCIF = 0;
  6588  00058A  9A9E               	bcf	3998,5,c	;volatile
  6589  00058C                     i2l39:
  6590                           
  6591                           ;interrupts.c: 26: }
  6592                           ;interrupts.c: 28: if ( PIR3bits.SSP2IF == 1 ) {
  6593  00058C  AEA4               	btfss	4004,7,c	;volatile
  6594  00058E  D03E               	goto	i2l40
  6595                           
  6596                           ;interrupts.c: 57: if ( SSP2STATbits.RW2 == 0 && SSP2STATbits.DA2 == 0 && SSP2STATbits.B
      +                          F == 1) {
  6597  000590  A46D               	btfss	3949,2,c	;volatile
  6598  000592  BA6D               	btfsc	3949,5,c	;volatile
  6599  000594  D005               	goto	i2l41
  6600  000596  A06D               	btfss	3949,0,c	;volatile
  6601  000598  D003               	goto	i2l41
  6602                           
  6603                           ;interrupts.c: 58: data = SSP2BUF;
  6604  00059A  CF6F F03A          	movff	3951,high_isr@data	;volatile
  6605                           
  6606                           ;interrupts.c: 59: }
  6607  00059E  D034               	goto	i2l61
  6608  0005A0                     i2l41:
  6609                           
  6610                           ;interrupts.c: 74: else if ( SSP2STATbits.RW2 == 0 && SSP2STATbits.DA2 == 1 && SSP2STATb
      +                          its.BF == 1 ) {
  6611  0005A0  A46D               	btfss	3949,2,c	;volatile
  6612  0005A2  AA6D               	btfss	3949,5,c	;volatile
  6613  0005A4  D008               	goto	i2l43
  6614  0005A6  A06D               	btfss	3949,0,c	;volatile
  6615  0005A8  D006               	goto	i2l43
  6616                           
  6617                           ;interrupts.c: 75: data = SSP2BUF;
  6618  0005AA  CF6F F03A          	movff	3951,high_isr@data	;volatile
  6619                           
  6620                           ;interrupts.c: 76: fifo2Put(data);
  6621  0005AE  503A               	movf	high_isr@data,w,c
  6622  0005B0  EC34  F008         	call	_fifo2Put
  6623                           
  6624                           ;interrupts.c: 77: }
  6625  0005B4  D029               	goto	i2l61
  6626  0005B6                     i2l43:
  6627                           
  6628                           ;interrupts.c: 90: else if ( SSP2STATbits.RW2 == 1 && SSP2STATbits.DA2 == 0 ) {
  6629  0005B6  B46D               	btfsc	3949,2,c	;volatile
  6630  0005B8  BA6D               	btfsc	3949,5,c	;volatile
  6631  0005BA  D013               	goto	i2l45
  6632                           
  6633                           ;interrupts.c: 92: SSP2BUF;
  6634  0005BC  506F               	movf	3951,w,c	;volatile
  6635                           
  6636                           ;interrupts.c: 107: if ( fifo3Empty())
  6637  0005BE  ECC7  F008         	call	i2_fifo3Empty	;wreg free
  6638  0005C2  0900               	iorlw	0
  6639  0005C4  B4D8               	btfsc	status,2,c
  6640  0005C6  D002               	goto	i2l46
  6641                           
  6642                           ;interrupts.c: 108: data = '*';
  6643  0005C8  0E2A               	movlw	42
  6644  0005CA  D002               	goto	L1
  6645  0005CC                     i2l46:
  6646                           
  6647                           ;interrupts.c: 109: else
  6648                           ;interrupts.c: 110: data = fifo3Get();
  6649  0005CC  ECBA  F008         	call	i2_fifo3Get	;wreg free
  6650  0005D0                     L1:
  6651  0005D0  6E3A               	movwf	high_isr@data,c
  6652  0005D2                     
  6653                           ;interrupts.c: 115: ;
  6654                           
  6655                           ;interrupts.c: 114: while(SSP2STATbits.BF)
  6656  0005D2  B06D               	btfsc	3949,0,c	;volatile
  6657  0005D4  D7FE               	goto	i2l47
  6658  0005D6                     i2u253_40:
  6659                           
  6660                           ;interrupts.c: 117: SSP2CON1bits.WCOL = 0;
  6661                           
  6662                           ;interrupts.c: 116: do {
  6663  0005D6  9E6C               	bcf	3948,7,c	;volatile
  6664                           
  6665                           ;interrupts.c: 118: SSP2BUF = data;
  6666  0005D8  C03A  FF6F         	movff	high_isr@data,3951	;volatile
  6667                           
  6668                           ;interrupts.c: 121: }
  6669                           ;interrupts.c: 122: while (SSP2CON1bits.WCOL);
  6670  0005DC  AE6C               	btfss	3948,7,c	;volatile
  6671  0005DE  D014               	goto	i2l61
  6672  0005E0  D7FA               	goto	i2u253_40
  6673  0005E2                     i2l45:
  6674                           
  6675                           ;interrupts.c: 141: else if ( SSP2STATbits.RW2 == 1 && SSP2STATbits.DA2 == 1 && SSP2STAT
      +                          bits.BF == 0 ) {
  6676  0005E2  B46D               	btfsc	3949,2,c	;volatile
  6677  0005E4  AA6D               	btfss	3949,5,c	;volatile
  6678  0005E6  D00C               	goto	i2l54
  6679  0005E8  B06D               	btfsc	3949,0,c	;volatile
  6680  0005EA  D00A               	goto	i2l54
  6681                           
  6682                           ;interrupts.c: 149: data = '_';
  6683  0005EC  0E5F               	movlw	95
  6684  0005EE  6E3A               	movwf	high_isr@data,c
  6685  0005F0                     
  6686                           ;interrupts.c: 158: ;
  6687  0005F0  B06D               	btfsc	3949,0,c	;volatile
  6688  0005F2  D7FE               	goto	i2l56
  6689  0005F4                     i2u258_40:
  6690                           
  6691                           ;interrupts.c: 160: SSP2CON1bits.WCOL = 0;
  6692                           
  6693                           ;interrupts.c: 159: do {
  6694  0005F4  9E6C               	bcf	3948,7,c	;volatile
  6695                           
  6696                           ;interrupts.c: 161: SSP2BUF = data;
  6697  0005F6  C03A  FF6F         	movff	high_isr@data,3951	;volatile
  6698                           
  6699                           ;interrupts.c: 164: }
  6700                           ;interrupts.c: 165: while (SSP2CON1bits.WCOL);
  6701  0005FA  AE6C               	btfss	3948,7,c	;volatile
  6702  0005FC  D005               	goto	i2l61
  6703  0005FE  D7FA               	goto	i2u258_40
  6704  000600                     i2l54:
  6705                           
  6706                           ;interrupts.c: 197: else if ( SSP2STATbits.DA2 == 1 && SSP2STATbits.BF == 0 && SSP2CON1b
      +                          its.CKP == 1) {
  6707  000600  BA6D               	btfsc	3949,5,c	;volatile
  6708  000602  B06D               	btfsc	3949,0,c	;volatile
  6709  000604  D001               	goto	i2l61
  6710  000606  506C               	movf	3948,w,c	;volatile
  6711  000608                     i2l61:
  6712                           
  6713                           ;interrupts.c: 201: }
  6714                           ;interrupts.c: 233: SSP2CON1bits.CKP = 1;
  6715  000608  886C               	bsf	3948,4,c	;volatile
  6716                           
  6717                           ;interrupts.c: 234: PIR3bits.SSP2IF = 0;
  6718  00060A  9EA4               	bcf	4004,7,c	;volatile
  6719  00060C                     i2l40:
  6720                           
  6721                           ;interrupts.c: 235: }
  6722                           ;interrupts.c: 309: return;
  6723  00060C  C039  F04B         	movff	??_high_isr+17,btemp+3
  6724  000610  C038  F04A         	movff	??_high_isr+16,btemp+2
  6725  000614  C037  F049         	movff	??_high_isr+15,btemp+1
  6726  000618  C036  F048         	movff	??_high_isr+14,btemp
  6727  00061C  C035  FFF5         	movff	??_high_isr+13,tablat
  6728  000620  C034  FFF8         	movff	??_high_isr+12,tblptru
  6729  000624  C033  FFF7         	movff	??_high_isr+11,tblptrh
  6730  000628  C032  FFF6         	movff	??_high_isr+10,tblptrl
  6731  00062C  C031  FFF4         	movff	??_high_isr+9,prodh
  6732  000630  C030  FFF3         	movff	??_high_isr+8,prodl
  6733  000634  C02F  FFDA         	movff	??_high_isr+7,fsr2h
  6734  000638  C02E  FFD9         	movff	??_high_isr+6,fsr2l
  6735  00063C  C02D  FFE2         	movff	??_high_isr+5,fsr1h
  6736  000640  C02C  FFE1         	movff	??_high_isr+4,fsr1l
  6737  000644  C02B  FFEA         	movff	??_high_isr+3,fsr0h
  6738  000648  C02A  FFE9         	movff	??_high_isr+2,fsr0l
  6739  00064C  C029  FFFB         	movff	??_high_isr+1,pclatu
  6740  000650  C028  FFFA         	movff	??_high_isr,pclath
  6741  000654  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6742  000656  0011               	retfie		f
  6743  000658                     __end_of_high_isr:
  6744                           	opt stack 0
  6745                           pclatu	equ	0xFFB
  6746                           pclath	equ	0xFFA
  6747                           tblptru	equ	0xFF8
  6748                           tblptrh	equ	0xFF7
  6749                           tblptrl	equ	0xFF6
  6750                           tablat	equ	0xFF5
  6751                           prodh	equ	0xFF4
  6752                           prodl	equ	0xFF3
  6753                           intcon	equ	0xFF2
  6754                           intcon2	equ	0xFF1
  6755                           postinc0	equ	0xFEE
  6756                           fsr0h	equ	0xFEA
  6757                           fsr0l	equ	0xFE9
  6758                           wreg	equ	0xFE8
  6759                           fsr1h	equ	0xFE2
  6760                           fsr1l	equ	0xFE1
  6761                           bsr	equ	0xFE0
  6762                           indf2	equ	0xFDF
  6763                           postinc2	equ	0xFDE
  6764                           postdec2	equ	0xFDD
  6765                           plusw2	equ	0xFDB
  6766                           fsr2h	equ	0xFDA
  6767                           fsr2l	equ	0xFD9
  6768                           status	equ	0xFD8
  6769                           
  6770 ;; *************** function i2_fifo3Get *****************
  6771 ;; Defined at:
  6772 ;;		line 66 in file "fifo.c"
  6773 ;; Parameters:    Size  Location     Type
  6774 ;;		None
  6775 ;; Auto vars:     Size  Location     Type
  6776 ;;		None
  6777 ;; Return value:  Size  Location     Type
  6778 ;;                  1    wreg      unsigned char 
  6779 ;; Registers used:
  6780 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6781 ;; Tracked objects:
  6782 ;;		On entry : 0/0
  6783 ;;		On exit  : 0/0
  6784 ;;		Unchanged: 0/0
  6785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6786 ;;      Params:         0       0       0       0       0       0       0
  6787 ;;      Locals:         0       0       0       0       0       0       0
  6788 ;;      Temps:          2       0       0       0       0       0       0
  6789 ;;      Totals:         2       0       0       0       0       0       0
  6790 ;;Total ram usage:        2 bytes
  6791 ;; Hardware stack levels used:    1
  6792 ;; This function calls:
  6793 ;;		Nothing
  6794 ;; This function is called by:
  6795 ;;		_high_isr
  6796 ;; This function uses a non-reentrant model
  6797 ;;
  6798                           
  6799                           	psect	text51
  6800  001174                     __ptext51:
  6801                           	opt stack 0
  6802  001174                     i2_fifo3Get:
  6803                           	opt stack 22
  6804                           
  6805                           ;fifo.c: 67: return fifo3[fifo3Out++ & 0x0F];
  6806                           
  6807                           ;incstack = 0
  6808  001174  2A03               	incf	_fifo3Out,f,c
  6809  001176  0403               	decf	_fifo3Out,w,c
  6810  001178  0B0F               	andlw	15
  6811  00117A  6E25               	movwf	??i2_fifo3Get& (0+255),c
  6812  00117C  6A26               	clrf	(??i2_fifo3Get+1)& (0+255),c
  6813  00117E  0EC0               	movlw	low _fifo3
  6814  001180  2425               	addwf	??i2_fifo3Get,w,c
  6815  001182  6ED9               	movwf	fsr2l,c
  6816  001184  0E00               	movlw	high _fifo3
  6817  001186  2026               	addwfc	??i2_fifo3Get+1,w,c
  6818  001188  6EDA               	movwf	fsr2h,c
  6819  00118A  50DF               	movf	indf2,w,c
  6820  00118C  0012               	return	
  6821  00118E                     __end_ofi2_fifo3Get:
  6822                           	opt stack 0
  6823                           pclatu	equ	0xFFB
  6824                           pclath	equ	0xFFA
  6825                           tblptru	equ	0xFF8
  6826                           tblptrh	equ	0xFF7
  6827                           tblptrl	equ	0xFF6
  6828                           tablat	equ	0xFF5
  6829                           prodh	equ	0xFF4
  6830                           prodl	equ	0xFF3
  6831                           intcon	equ	0xFF2
  6832                           intcon2	equ	0xFF1
  6833                           postinc0	equ	0xFEE
  6834                           fsr0h	equ	0xFEA
  6835                           fsr0l	equ	0xFE9
  6836                           wreg	equ	0xFE8
  6837                           fsr1h	equ	0xFE2
  6838                           fsr1l	equ	0xFE1
  6839                           bsr	equ	0xFE0
  6840                           indf2	equ	0xFDF
  6841                           postinc2	equ	0xFDE
  6842                           postdec2	equ	0xFDD
  6843                           plusw2	equ	0xFDB
  6844                           fsr2h	equ	0xFDA
  6845                           fsr2l	equ	0xFD9
  6846                           status	equ	0xFD8
  6847                           
  6848 ;; *************** function i2_fifo3Empty *****************
  6849 ;; Defined at:
  6850 ;;		line 106 in file "fifo.c"
  6851 ;; Parameters:    Size  Location     Type
  6852 ;;		None
  6853 ;; Auto vars:     Size  Location     Type
  6854 ;;		None
  6855 ;; Return value:  Size  Location     Type
  6856 ;;                  1    wreg      unsigned char 
  6857 ;; Registers used:
  6858 ;;		wreg, status,2, status,0
  6859 ;; Tracked objects:
  6860 ;;		On entry : 0/0
  6861 ;;		On exit  : 0/0
  6862 ;;		Unchanged: 0/0
  6863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6864 ;;      Params:         0       0       0       0       0       0       0
  6865 ;;      Locals:         0       0       0       0       0       0       0
  6866 ;;      Temps:          1       0       0       0       0       0       0
  6867 ;;      Totals:         1       0       0       0       0       0       0
  6868 ;;Total ram usage:        1 bytes
  6869 ;; Hardware stack levels used:    1
  6870 ;; This function calls:
  6871 ;;		Nothing
  6872 ;; This function is called by:
  6873 ;;		_high_isr
  6874 ;; This function uses a non-reentrant model
  6875 ;;
  6876                           
  6877                           	psect	text52
  6878  00118E                     __ptext52:
  6879                           	opt stack 0
  6880  00118E                     i2_fifo3Empty:
  6881                           	opt stack 22
  6882                           
  6883                           ;fifo.c: 108: return (fifo3In & 0x0F) == (fifo3Out & 0x0F);
  6884                           
  6885                           ;incstack = 0
  6886  00118E  C003  F025         	movff	_fifo3Out,??i2_fifo3Empty
  6887  001192  0E0F               	movlw	15
  6888  001194  1625               	andwf	??i2_fifo3Empty,f,c
  6889  001196  5006               	movf	_fifo3In,w,c
  6890  001198  0B0F               	andlw	15
  6891  00119A  1825               	xorwf	??i2_fifo3Empty,w,c
  6892  00119C  A4D8               	btfss	status,2,c
  6893  00119E  D002               	goto	i2u97_40
  6894  0011A0  0E01               	movlw	1
  6895  0011A2  0012               	return	
  6896  0011A4                     i2u97_40:
  6897  0011A4  0E00               	movlw	0
  6898  0011A6  0012               	return	
  6899  0011A8                     __end_ofi2_fifo3Empty:
  6900                           	opt stack 0
  6901                           pclatu	equ	0xFFB
  6902                           pclath	equ	0xFFA
  6903                           tblptru	equ	0xFF8
  6904                           tblptrh	equ	0xFF7
  6905                           tblptrl	equ	0xFF6
  6906                           tablat	equ	0xFF5
  6907                           prodh	equ	0xFF4
  6908                           prodl	equ	0xFF3
  6909                           intcon	equ	0xFF2
  6910                           intcon2	equ	0xFF1
  6911                           postinc0	equ	0xFEE
  6912                           fsr0h	equ	0xFEA
  6913                           fsr0l	equ	0xFE9
  6914                           wreg	equ	0xFE8
  6915                           fsr1h	equ	0xFE2
  6916                           fsr1l	equ	0xFE1
  6917                           bsr	equ	0xFE0
  6918                           indf2	equ	0xFDF
  6919                           postinc2	equ	0xFDE
  6920                           postdec2	equ	0xFDD
  6921                           plusw2	equ	0xFDB
  6922                           fsr2h	equ	0xFDA
  6923                           fsr2l	equ	0xFD9
  6924                           status	equ	0xFD8
  6925                           
  6926 ;; *************** function _fifo2Put *****************
  6927 ;; Defined at:
  6928 ;;		line 80 in file "fifo.c"
  6929 ;; Parameters:    Size  Location     Type
  6930 ;;  in              1    wreg     unsigned char 
  6931 ;; Auto vars:     Size  Location     Type
  6932 ;;  in              1    2[COMRAM] unsigned char 
  6933 ;; Return value:  Size  Location     Type
  6934 ;;                  1    wreg      void 
  6935 ;; Registers used:
  6936 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6937 ;; Tracked objects:
  6938 ;;		On entry : 0/0
  6939 ;;		On exit  : 0/0
  6940 ;;		Unchanged: 0/0
  6941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6942 ;;      Params:         0       0       0       0       0       0       0
  6943 ;;      Locals:         1       0       0       0       0       0       0
  6944 ;;      Temps:          2       0       0       0       0       0       0
  6945 ;;      Totals:         3       0       0       0       0       0       0
  6946 ;;Total ram usage:        3 bytes
  6947 ;; Hardware stack levels used:    1
  6948 ;; This function calls:
  6949 ;;		Nothing
  6950 ;; This function is called by:
  6951 ;;		_high_isr
  6952 ;; This function uses a non-reentrant model
  6953 ;;
  6954                           
  6955                           	psect	text53
  6956  001068                     __ptext53:
  6957                           	opt stack 0
  6958  001068                     _fifo2Put:
  6959                           	opt stack 22
  6960                           
  6961                           ;incstack = 0
  6962                           ;fifo2Put@in stored from wreg
  6963  001068  6E27               	movwf	fifo2Put@in,c
  6964                           
  6965                           ;fifo.c: 81: fifo2[fifo2In++ & 0x0F] = in;
  6966  00106A  5007               	movf	_fifo2In,w,c
  6967  00106C  0B0F               	andlw	15
  6968  00106E  6E25               	movwf	??_fifo2Put& (0+255),c
  6969  001070  6A26               	clrf	(??_fifo2Put+1)& (0+255),c
  6970  001072  0ED0               	movlw	low _fifo2
  6971  001074  2425               	addwf	??_fifo2Put,w,c
  6972  001076  6ED9               	movwf	fsr2l,c
  6973  001078  0E00               	movlw	high _fifo2
  6974  00107A  2026               	addwfc	??_fifo2Put+1,w,c
  6975  00107C  6EDA               	movwf	fsr2h,c
  6976  00107E  C027  FFDF         	movff	fifo2Put@in,indf2
  6977  001082  2A07               	incf	_fifo2In,f,c
  6978  001084  0012               	return		;funcret
  6979  001086                     __end_of_fifo2Put:
  6980                           	opt stack 0
  6981                           pclatu	equ	0xFFB
  6982                           pclath	equ	0xFFA
  6983                           tblptru	equ	0xFF8
  6984                           tblptrh	equ	0xFF7
  6985                           tblptrl	equ	0xFF6
  6986                           tablat	equ	0xFF5
  6987                           prodh	equ	0xFF4
  6988                           prodl	equ	0xFF3
  6989                           intcon	equ	0xFF2
  6990                           intcon2	equ	0xFF1
  6991                           postinc0	equ	0xFEE
  6992                           fsr0h	equ	0xFEA
  6993                           fsr0l	equ	0xFE9
  6994                           wreg	equ	0xFE8
  6995                           fsr1h	equ	0xFE2
  6996                           fsr1l	equ	0xFE1
  6997                           bsr	equ	0xFE0
  6998                           indf2	equ	0xFDF
  6999                           postinc2	equ	0xFDE
  7000                           postdec2	equ	0xFDD
  7001                           plusw2	equ	0xFDB
  7002                           fsr2h	equ	0xFDA
  7003                           fsr2l	equ	0xFD9
  7004                           status	equ	0xFD8
  7005                           
  7006 ;; *************** function _fifo1Put *****************
  7007 ;; Defined at:
  7008 ;;		line 76 in file "fifo.c"
  7009 ;; Parameters:    Size  Location     Type
  7010 ;;  in              1    wreg     unsigned char 
  7011 ;; Auto vars:     Size  Location     Type
  7012 ;;  in              1    2[COMRAM] unsigned char 
  7013 ;; Return value:  Size  Location     Type
  7014 ;;                  1    wreg      void 
  7015 ;; Registers used:
  7016 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7017 ;; Tracked objects:
  7018 ;;		On entry : 0/0
  7019 ;;		On exit  : 0/0
  7020 ;;		Unchanged: 0/0
  7021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7022 ;;      Params:         0       0       0       0       0       0       0
  7023 ;;      Locals:         1       0       0       0       0       0       0
  7024 ;;      Temps:          2       0       0       0       0       0       0
  7025 ;;      Totals:         3       0       0       0       0       0       0
  7026 ;;Total ram usage:        3 bytes
  7027 ;; Hardware stack levels used:    1
  7028 ;; This function calls:
  7029 ;;		Nothing
  7030 ;; This function is called by:
  7031 ;;		_high_isr
  7032 ;;		_sendSwitchOn
  7033 ;; This function uses a non-reentrant model
  7034 ;;
  7035                           
  7036                           	psect	text54
  7037  001086                     __ptext54:
  7038                           	opt stack 0
  7039  001086                     _fifo1Put:
  7040                           	opt stack 22
  7041                           
  7042                           ;incstack = 0
  7043                           ;fifo1Put@in stored from wreg
  7044  001086  6E27               	movwf	fifo1Put@in,c
  7045                           
  7046                           ;fifo.c: 77: fifo1[fifo1In++ & 0x0F] = in;
  7047  001088  5008               	movf	_fifo1In,w,c
  7048  00108A  0B0F               	andlw	15
  7049  00108C  6E25               	movwf	??_fifo1Put& (0+255),c
  7050  00108E  6A26               	clrf	(??_fifo1Put+1)& (0+255),c
  7051  001090  0EE0               	movlw	low _fifo1
  7052  001092  2425               	addwf	??_fifo1Put,w,c
  7053  001094  6ED9               	movwf	fsr2l,c
  7054  001096  0E00               	movlw	high _fifo1
  7055  001098  2026               	addwfc	??_fifo1Put+1,w,c
  7056  00109A  6EDA               	movwf	fsr2h,c
  7057  00109C  C027  FFDF         	movff	fifo1Put@in,indf2
  7058  0010A0  2A08               	incf	_fifo1In,f,c
  7059  0010A2  0012               	return		;funcret
  7060  0010A4                     __end_of_fifo1Put:
  7061                           	opt stack 0
  7062  0000                     pclatu	equ	0xFFB
  7063                           pclath	equ	0xFFA
  7064                           tblptru	equ	0xFF8
  7065                           tblptrh	equ	0xFF7
  7066                           tblptrl	equ	0xFF6
  7067                           tablat	equ	0xFF5
  7068                           prodh	equ	0xFF4
  7069                           prodl	equ	0xFF3
  7070                           intcon	equ	0xFF2
  7071                           intcon2	equ	0xFF1
  7072                           postinc0	equ	0xFEE
  7073                           fsr0h	equ	0xFEA
  7074                           fsr0l	equ	0xFE9
  7075                           wreg	equ	0xFE8
  7076                           fsr1h	equ	0xFE2
  7077                           fsr1l	equ	0xFE1
  7078                           bsr	equ	0xFE0
  7079                           indf2	equ	0xFDF
  7080                           postinc2	equ	0xFDE
  7081                           postdec2	equ	0xFDD
  7082                           plusw2	equ	0xFDB
  7083                           fsr2h	equ	0xFDA
  7084                           fsr2l	equ	0xFD9
  7085                           status	equ	0xFD8
  7086                           pclatu	equ	0xFFB
  7087                           pclath	equ	0xFFA
  7088                           tblptru	equ	0xFF8
  7089                           tblptrh	equ	0xFF7
  7090                           tblptrl	equ	0xFF6
  7091                           tablat	equ	0xFF5
  7092                           prodh	equ	0xFF4
  7093                           prodl	equ	0xFF3
  7094                           intcon	equ	0xFF2
  7095                           intcon2	equ	0xFF1
  7096                           postinc0	equ	0xFEE
  7097                           fsr0h	equ	0xFEA
  7098                           fsr0l	equ	0xFE9
  7099                           wreg	equ	0xFE8
  7100                           fsr1h	equ	0xFE2
  7101                           fsr1l	equ	0xFE1
  7102                           bsr	equ	0xFE0
  7103                           indf2	equ	0xFDF
  7104                           postinc2	equ	0xFDE
  7105                           postdec2	equ	0xFDD
  7106                           plusw2	equ	0xFDB
  7107                           fsr2h	equ	0xFDA
  7108                           fsr2l	equ	0xFD9
  7109                           status	equ	0xFD8
  7110                           
  7111                           	psect	rparam
  7112  0000                     pclatu	equ	0xFFB
  7113                           pclath	equ	0xFFA
  7114                           tblptru	equ	0xFF8
  7115                           tblptrh	equ	0xFF7
  7116                           tblptrl	equ	0xFF6
  7117                           tablat	equ	0xFF5
  7118                           prodh	equ	0xFF4
  7119                           prodl	equ	0xFF3
  7120                           intcon	equ	0xFF2
  7121                           intcon2	equ	0xFF1
  7122                           postinc0	equ	0xFEE
  7123                           fsr0h	equ	0xFEA
  7124                           fsr0l	equ	0xFE9
  7125                           wreg	equ	0xFE8
  7126                           fsr1h	equ	0xFE2
  7127                           fsr1l	equ	0xFE1
  7128                           bsr	equ	0xFE0
  7129                           indf2	equ	0xFDF
  7130                           postinc2	equ	0xFDE
  7131                           postdec2	equ	0xFDD
  7132                           plusw2	equ	0xFDB
  7133                           fsr2h	equ	0xFDA
  7134                           fsr2l	equ	0xFD9
  7135                           status	equ	0xFD8
  7136                           
  7137                           	psect	temp
  7138  000048                     btemp:
  7139                           	opt stack 0
  7140  000048                     	ds	1
  7141  0000                     int$flags	set	btemp
  7142  0000                     wtemp6	set	btemp+1
  7143                           pclatu	equ	0xFFB
  7144                           pclath	equ	0xFFA
  7145                           tblptru	equ	0xFF8
  7146                           tblptrh	equ	0xFF7
  7147                           tblptrl	equ	0xFF6
  7148                           tablat	equ	0xFF5
  7149                           prodh	equ	0xFF4
  7150                           prodl	equ	0xFF3
  7151                           intcon	equ	0xFF2
  7152                           intcon2	equ	0xFF1
  7153                           postinc0	equ	0xFEE
  7154                           fsr0h	equ	0xFEA
  7155                           fsr0l	equ	0xFE9
  7156                           wreg	equ	0xFE8
  7157                           fsr1h	equ	0xFE2
  7158                           fsr1l	equ	0xFE1
  7159                           bsr	equ	0xFE0
  7160                           indf2	equ	0xFDF
  7161                           postinc2	equ	0xFDE
  7162                           postdec2	equ	0xFDD
  7163                           plusw2	equ	0xFDB
  7164                           fsr2h	equ	0xFDA
  7165                           fsr2l	equ	0xFD9
  7166                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         427
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     35      71
    BANK0           160      2     153
    BANK1           256      0     240
    BANK2           256     21      21
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    getShutterstatus@sp	PTR struct shutter size(2) Largest target is 15
		 -> shutter(COMRAM[15]), 

    shutterStateMachine@sp	PTR struct shutter size(2) Largest target is 15
		 -> shutter(COMRAM[15]), 

    testShortMove@sp	PTR struct shutter size(2) Largest target is 15
		 -> shutter(COMRAM[15]), 

    commandShutterDown@sp	PTR struct shutter size(2) Largest target is 15
		 -> shutter(COMRAM[15]), 

    commandShutterUp@sp	PTR struct shutter size(2) Largest target is 15
		 -> shutter(COMRAM[15]), 

    S825button$state	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    buttons.state	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    S825button$fallingEdge	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    buttons.fallingEdge	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    S825button$risingEdge	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    buttons.risingEdge	PTR FTN(unsigned char ,)void  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _main->_byteReceived
    _testeMasterTaster->_decodeButton
    _shutterStateMachine->_shutterDirectionDown
    _shutterStateMachine->_shutterDirectionUp
    _shutterStateMachine->_shutterOff
    _shutterStateMachine->_shutterOn
    _i2cParser->_commandShutterStop
    _testCommandOk->_fifo3Put
    _storeShutterGroup->_eepromWrite
    _setKeyForShutter->_eepromWrite
    _setKeyForShutter->_initButtonMatrix
    _getShutterStatusByte2->_getShutterstatus
    _getShutterStatusByte1->_getShutterstatus
    _getKeyForShutter->_eepromRead
    _commandShutterStop->___wmul
    _byteReceived->_decodeButton
    _decodeButton->_handleShuttergroupButton
    _handleShuttergroupButton->_commandShutterGroupDown
    _handleShuttergroupButton->_commandShutterGroupUp
    _commandShutterGroupUp->_commandShutterUp
    _commandShutterGroupUp->_readShutterGroupByte
    _commandShutterGroupDown->_commandShutterDown
    _commandShutterGroupDown->_readShutterGroupByte
    _findShuttergroupButton->_eepromRead
    _buttonsReset->_releaseShuttergroupButton
    _releaseShuttergroupButton->_handleShutterShortMove
    _handleShutterShortMove->_testShortMove
    _readShutterGroupByte->_eepromRead

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_fifo1Put
    _high_isr->_fifo2Put

Critical Paths under _main in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   13830
                                             34 COMRAM     1     1      0
                                              0 BANK0      2     2      0
                       _buttonsReset
                       _byteReceived
                         _fifo1Empty
                           _fifo1Get
                         _fifo2Empty
                           _fifo2Get
                     _getNumShutters
                          _i2cParser
                   _initButtonMatrix
                    _initButtonTimer
                       _initHardware
                       _initI2CSlave
                       _initProtocol
                          _initRS485
            _initShutterStateMachine
                _shutterStateMachine
                  _testeMasterTaster
 ---------------------------------------------------------------------------------
 (1) _testeMasterTaster                                    2     2      0    2620
                                             30 COMRAM     2     2      0
                       _decodeButton
 ---------------------------------------------------------------------------------
 (1) _shutterStateMachine                                  5     5      0     771
                                             23 COMRAM     5     5      0
               _shutterDirectionDown
                 _shutterDirectionUp
                         _shutterOff
                          _shutterOn
 ---------------------------------------------------------------------------------
 (2) _shutterOn                                            1     1      0      22
                                             22 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _shutterOff                                           1     1      0      22
                                             22 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _shutterDirectionUp                                   1     1      0      22
                                             22 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _shutterDirectionDown                                 1     1      0      22
                                             22 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initShutterStateMachine                              2     2      0      68
                                             22 COMRAM     2     2      0
                     _getNumShutters
 ---------------------------------------------------------------------------------
 (2) _getNumShutters                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRS485                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initProtocol                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initI2CSlave                                         2     2      0      22
                                             22 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initHardware                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initButtonTimer                                      1     1      0      90
                                             22 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _i2cParser                                            1     1      0    5993
                                             31 COMRAM     1     1      0
                 _commandShutterDown
            _commandShutterGroupDown
              _commandShutterGroupUp
                 _commandShutterStop
                   _commandShutterUp
                         _fifo3Empty
                           _fifo3Get
                           _fifo3Put
                   _getKeyForShutter
                  _getLastPressedKey
              _getShutterStatusByte1
              _getShutterStatusByte2
               _readShutterGroupByte
                   _setKeyForShutter
                  _storeShutterGroup
                      _testCommandOk
 ---------------------------------------------------------------------------------
 (2) _testCommandOk                                        1     1      0      44
                                             25 COMRAM     1     1      0
                           _fifo3Put
 ---------------------------------------------------------------------------------
 (3) _fifo3Put                                             3     3      0      22
                                             22 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _storeShutterGroup                                    4     1      3     708
                                             24 COMRAM     4     1      3
                        _eepromWrite
 ---------------------------------------------------------------------------------
 (2) _setKeyForShutter                                     2     1      1     561
                                             24 COMRAM     2     1      1
                        _eepromWrite
                   _initButtonMatrix
 ---------------------------------------------------------------------------------
 (1) _initButtonMatrix                                     2     2      0      93
                                             22 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _eepromWrite                                          2     1      1     348
                                             22 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _getShutterStatusByte2                                4     4      0     159
                                             25 COMRAM     4     4      0
                   _getShutterstatus
 ---------------------------------------------------------------------------------
 (2) _getShutterStatusByte1                                4     4      0     159
                                             25 COMRAM     4     4      0
                   _getShutterstatus
 ---------------------------------------------------------------------------------
 (3) _getShutterstatus                                     3     3      0      45
                                             22 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _getLastPressedKey                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getKeyForShutter                                     1     1      0      62
                                             23 COMRAM     1     1      0
                         _eepromRead
 ---------------------------------------------------------------------------------
 (2) _fifo3Get                                             2     2      0       0
                                             22 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _fifo3Empty                                           1     1      0       0
                                             22 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _commandShutterStop                                   3     3      0     762
                                             28 COMRAM     3     3      0
                             ___wmul
                             _fehler
 ---------------------------------------------------------------------------------
 (3) _fehler                                               4     3      1     158
                                             22 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     412
                                             22 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _fifo2Get                                             2     2      0       0
                                             22 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _fifo2Empty                                           1     1      0       0
                                             22 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _fifo1Get                                             2     2      0       0
                                             22 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _fifo1Empty                                           1     1      0       0
                                             22 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _byteReceived                                         4     4      0    2843
                                             30 COMRAM     4     4      0
                       _decodeButton
 ---------------------------------------------------------------------------------
 (2) _decodeButton                                         2     2      0    2620
                                             28 COMRAM     2     2      0
             _findShuttergroupButton
           _handleShuttergroupButton
 ---------------------------------------------------------------------------------
 (3) _handleShuttergroupButton                             1     1      0    2115
                                             27 COMRAM     1     1      0
            _commandShutterGroupDown
              _commandShutterGroupUp
 ---------------------------------------------------------------------------------
 (4) _commandShutterGroupUp                                2     2      0    1011
                                             25 COMRAM     2     2      0
                   _commandShutterUp
               _readShutterGroupByte
 ---------------------------------------------------------------------------------
 (5) _commandShutterUp                                     3     3      0     189
                                             22 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _commandShutterGroupDown                              2     2      0    1011
                                             25 COMRAM     2     2      0
                 _commandShutterDown
               _readShutterGroupByte
 ---------------------------------------------------------------------------------
 (5) _commandShutterDown                                   3     3      0     189
                                             22 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _findShuttergroupButton                               2     2      0     285
                                             23 COMRAM     2     2      0
                         _eepromRead
 ---------------------------------------------------------------------------------
 (1) _buttonsReset                                         2     2      0    1296
                                             30 COMRAM     2     2      0
          _releaseShuttergroupButton
 ---------------------------------------------------------------------------------
 (2) _releaseShuttergroupButton                            1     1      0    1011
                                             29 COMRAM     1     1      0
             _handleShutterShortMove
 ---------------------------------------------------------------------------------
 (3) _handleShutterShortMove                               2     2      0     918
                                             27 COMRAM     2     2      0
               _readShutterGroupByte
                      _testShortMove
 ---------------------------------------------------------------------------------
 (4) _testShortMove                                        5     5      0      96
                                             22 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (5) _readShutterGroupByte                                 2     1      1     633
                                             23 COMRAM     2     1      1
                         _eepromRead
 ---------------------------------------------------------------------------------
 (6) _eepromRead                                           1     1      0      31
                                             22 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _low_isr                                             21    21      0       0
                                              0 BANK2     21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _high_isr                                            19    19      0     138
                                              3 COMRAM    19    19      0
                           _fifo1Put
                           _fifo2Put
                       i2_fifo3Empty
                         i2_fifo3Get
 ---------------------------------------------------------------------------------
 (9) i2_fifo3Get                                           2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) i2_fifo3Empty                                         1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) _fifo2Put                                             3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (9) _fifo1Put                                             3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buttonsReset
     _releaseShuttergroupButton
       _handleShutterShortMove
         _readShutterGroupByte
           _eepromRead
         _testShortMove
   _byteReceived
     _decodeButton
       _findShuttergroupButton
         _eepromRead
       _handleShuttergroupButton
         _commandShutterGroupDown
           _commandShutterDown
           _readShutterGroupByte
             _eepromRead
         _commandShutterGroupUp
           _commandShutterUp
           _readShutterGroupByte
             _eepromRead
   _fifo1Empty
   _fifo1Get
   _fifo2Empty
   _fifo2Get
   _getNumShutters
   _i2cParser
     _commandShutterDown
     _commandShutterGroupDown
       _commandShutterDown
       _readShutterGroupByte
         _eepromRead
     _commandShutterGroupUp
       _commandShutterUp
       _readShutterGroupByte
         _eepromRead
     _commandShutterStop
       ___wmul
       _fehler
     _commandShutterUp
     _fifo3Empty
     _fifo3Get
     _fifo3Put
     _getKeyForShutter
       _eepromRead
     _getLastPressedKey
     _getShutterStatusByte1
       _getShutterstatus
     _getShutterStatusByte2
       _getShutterstatus
     _readShutterGroupByte
       _eepromRead
     _setKeyForShutter
       _eepromWrite
       _initButtonMatrix
     _storeShutterGroup
       _eepromWrite
     _testCommandOk
       _fifo3Put
   _initButtonMatrix
   _initButtonTimer
   _initHardware
   _initI2CSlave
   _initProtocol
   _initRS485
   _initShutterStateMachine
     _getNumShutters
   _shutterStateMachine
     _shutterDirectionDown
     _shutterDirectionUp
     _shutterOff
     _shutterOn
   _testeMasterTaster
     _decodeButton
       _findShuttergroupButton
         _eepromRead
       _handleShuttergroupButton
         _commandShutterGroupDown
           _commandShutterDown
           _readShutterGroupByte
             _eepromRead
         _commandShutterGroupUp
           _commandShutterUp
           _readShutterGroupByte
             _eepromRead

 _low_isr (ROOT)

 _high_isr (ROOT)
   _fifo1Put
   _fifo2Put
   i2_fifo3Empty
   i2_fifo3Get

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100     15      15       8        8.2%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      F0       6       93.8%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      2      99       4       95.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     23      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1E5       9        0.0%
DATA                 0      0     1E5      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Apr 08 22:09:38 2019

                                   _c 00F4                                    bsr 000FE0  
                 ___wmul@multiplicand 003D                  __end_of_decodeButton 099E  
                       _bShutterTimer 00F5                       _entprellCounter 0001  
                        __CFG_CP0$OFF 000000               __end_of_initButtonTimer 0A0A  
                        __CFG_CP1$OFF 000000                                   l201 0AF6  
                                 l130 06AE                                   l203 0B10  
                                 l300 092A                                   l140 0742  
                                 l132 06EE                                   l205 0B3E  
                                 l230 09AA                                   l142 0766  
                                 l134 0700                                   l126 066A  
                                 l143 075E                                   l135 0702  
                                 l304 0E9C                                   l320 048A  
                                 l312 0386                                   l136 0720  
                                 l128 068C                                   l313 03AE  
                                 l137 0732                                   l330 0B62  
                                 l402 0C7A                                   l322 04B2  
                                 l314 03C2                                   l243 0782  
                                 l411 0C6A                                   l403 0C52  
                                 l315 03D6                                   l307 0360  
                                 l139 074C                                   l340 0852  
                                 l316 03EA                                   l245 07FE  
                                 l413 0C72                                   l309 04DA  
                                 l317 0412                                   l246 07E0  
                                 l318 043A                                   l503 0D7E  
                                 l511 0D3C                                   l239 0964  
                                 l335 085A                                   l407 0C5A  
                                 l319 0462                                   l520 0DCA  
                                 l248 0836                                   l504 0D88  
                                 l272 0A14                                   l512 0D46  
                                 l336 084E                                   l521 0DD4  
                                 l505 0D92                                   l513 0D50  
                                 l345 0856                                   l329 0B98  
                                 l409 0C62                                   l522 0DDE  
                                 l506 0D9C                                   l274 0A50  
                                 l514 0D5A                                   l370 0EA6  
                                 l531 0D1C                                   l283 0A7E  
                                 l275 0A26                                   l371 0EAA  
                                 l356 11FC                                   l700 0288  
                                 l380 0EE0                                   l372 0EAE  
                                 l285 0ABA                                   l277 0A34  
                                 l437 1036                                   l701 028E  
                                 l381 0EE4                                   l373 0EB2  
                                 l429 0F3C                                   l286 0A90  
                                 l278 0A42                                   l534 1152  
                                 l294 0902                                   l710 0E36  
                                 l702 0294                                   l382 0EE8  
                                 l519 0DC0                                   l527 0CEE  
                                 l295 08D8                                   l439 1046  
                                 l383 0EEC                                   l367 0EB6  
                                 l288 0A9E                                   l712 0E5A  
                                 l704 02D4                                   l392 0C0C  
                                 l368 0EA2                                   l529 0D04  
                                 l289 0AAC                                   l705 02DA  
                                 l377 0EF0                                   l298 091E  
                                 l706 02E0                                   l394 0C14  
                                 l378 0EDC                                   l539 116C  
                                 l387 0C2C                                   l716 0DFA  
                                 l396 0C1C                                   l388 0C04  
                                 l718 0E1E                                   l398 0C24  
                                 l673 00FA                                   l690 01AA  
                                 l682 0142                                   l674 00F6  
                                 l667 0FD6                                   l668 0FCC  
                                 l692 020A                                   l684 0158  
                                 l676 0110                                   l677 0114  
                                 l678 02E6                                   l694 0220  
                                 l686 016E                                   l679 012C  
                                 l696 0236                                   l688 0188  
                                 l698 025E                          __CFG_CPB$OFF 000000  
                        __CFG_CPD$OFF 000000                                   prod 000FF3  
               ??_shutterStateMachine 003C                                   wreg 000FE8  
                          i2_fifo3Get 1174              __end_of_initButtonMatrix 104A  
                        __CFG_LVP$OFF 000000                                  l2471 102E  
                                l3441 0CE6                                  l2481 103E  
                                l2547 0FDC                                  l3527 08C8  
                                l2737 0E2E                                  l2755 0DF2  
                                l3573 077A                                  l3719 0F2A  
                                l3743 0662                                  l3753 0684  
                                l2787 09A2                                  l3763 06A6  
                                u2020 0E22                                  u2014 0E16  
                                u2015 0E12                                  u2040 09E6  
                                u2200 04A4                                  u3010 0D20  
                                u2210 04CC                                  u2060 113C  
                                _LATA 000F89                                  _LATB 000F8A  
                                _LATC 000F8B                                  u1600 103A  
                                _LATD 000F8C                                  u2370 1108  
                                u1740 10D4                                  u3500 06C4  
                                u3460 0680                                  u3607 06B4  
                                u3480 06A2                                  _PEIE 007F96  
                                u1980 0E5E                                  u1974 0E52  
                                u1975 0E4E                                  u3587 0670  
                                u3597 0692                                  i2l40 060C  
                                i2l41 05A0                                  i2l43 05B6  
                                i1l67 0082                                  i1l68 0096  
                                i2l61 0608                                  i2l45 05E2  
                                i2l54 0600                                  i2l46 05CC  
                                i2l47 05D2                                  i2l39 058C  
                                i2l56 05F0                _handleShutterShortMove 0DA8  
    __end_of_handleShuttergroupButton 115A                                  _data 00A0  
                     testShortMove@sp 003E                                  _help 0009  
                                _main 0658                         ?_initI2CSlave 0025  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr2h 000FDA                                  fsr0l 000FE9  
                                indf2 000FDF                                  fsr1l 000FE1  
                                fsr2l 000FD9                                  btemp 0048  
                       __CFG_BOREN$ON 000000                                  prodh 000FF4  
            __end_of_getShutterstatus 08B6                                  prodl 000FF3  
                                start 00EE                       ??_testShortMove 003B  
                       __CFG_IESO$OFF 000000                     _testeMasterTaster 0F12  
                   ?_commandShutterUp 0025              __end_of_getKeyForShutter 1208  
         __size_of_shutterDirectionUp 004E                         i2cParser@data 0044  
                        ___param_bank 000000                    ?_testeMasterTaster 0025  
          __size_of_getLastPressedKey 0004                    ??_commandShutterUp 003B  
                        high_isr@data 003A                         _protocolState 00F2  
              _findShuttergroupButton 0CE0                 __size_ofi2_fifo3Empty 001A  
                 ??_testeMasterTaster 0043                                 ?_main 0025  
                               _EEADR 000FA9                                 _RCREG 000FAE  
                               _TMR0H 000FD7                                 _TMR1H 000FCF  
                               _TMR0L 000FD6                                 _TMR1L 000FCE  
                               _PORTA 000F80                                 _PORTB 000F81  
                               _PORTC 000F82                                 _PORTD 000F83  
                               _TRISA 000F92                                 _TRISB 000F93  
                               _TRISC 000F94                                 _TRISD 000F95  
                       __CFG_WRT0$OFF 000000                         __CFG_WRT1$OFF 000000  
                      __CFG_EBTR0$OFF 000000                        __CFG_FCMEN$OFF 000000  
                      __CFG_EBTR1$OFF 000000                         __CFG_WRTB$OFF 000000  
                  commandShutterUp@sp 003C                         __CFG_WRTC$OFF 000000  
                       __CFG_WRTD$OFF 000000                        __CFG_EBTRB$OFF 000000  
                               _fifo1 00E0                                 _fifo2 00D0  
                               _fifo3 00C0                                 _dummy 000C  
                     __end_of_low_isr 00EE                                 pclath 000FFA  
                               tablat 000FF5                     _storeShutterGroup 0F48  
                      ??_initI2CSlave 003B    __size_of_releaseShuttergroupButton 001A  
                               plusw2 000FDB                                 status 000FD8  
           __end_of_testeMasterTaster 0F48                                 wtemp6 0049  
                  ?_storeShutterGroup 003D                          i2_fifo3Empty 118E  
                       ?_byteReceived 0025             __size_of_setKeyForShutter 0012  
                       ?_initHardware 0025                       __initialization 0F7C  
                _readShutterGroupByte 11D0                          __end_of_main 0776  
                 ??_storeShutterGroup 0040      __size_of_commandShutterGroupDown 0042  
                    decodeButton@code 0041                      ?_initButtonTimer 0025  
                              ??_main 0047                         __activetblptr 000002  
                         ?i2_fifo3Get 0025                         ?_initProtocol 0025  
           __end_of_storeShutterGroup 0F7C               storeShutterGroup@number 0040  
                              _EEDATA 000FA8                                _EECON2 000FA7  
                  __size_of_i2cParser 023C                                _ANSELA 000F38  
                              _ANSELB 000F39                                _ANSELC 000F3A  
                              _ANSELD 000F3B                        __CFG_WDTEN$OFF 000000  
                              _SPBRG1 000FAF                                _SPBRGH 000FB0  
                              _TXREG1 000FAD                        ??_byteReceived 0043  
   __end_of_releaseShuttergroupButton 1174                      __end_of_fifo1Get 1126  
                    __end_of_fifo2Get 10F2                      __end_of_fifo3Get 10BE  
                    __end_of_fifo1Put 10A4                      __end_of_fifo2Put 1086  
                    __end_of_fifo3Put 1068                        ??_initHardware 003B  
                       ?_buttonsReset 0025                        __CFG_PWRTEN$ON 000000  
                      __CFG_XINST$OFF 000000                 ?_readShutterGroupByte 003C  
                __size_of_eepromWrite 0026                 __size_of_decodeButton 0072  
                    __end_of_high_isr 0658                                ___wmul 1000  
                      __CFG_STVREN$ON 000000                   commandShutterStop@i 0042  
                    byteReceived@code 0045                                _fehler 11F2  
            ?_initShutterStateMachine 0025                                _device 00F1  
                              _button 00F0                                clear_0 0F82  
                              clear_1 0F8E                                clear_2 0F9A  
                     eepromWrite@data 003B               ??_commandShutterGroupUp 003E  
   __size_of_handleShuttergroupButton 001A             ?_handleShuttergroupButton 0025  
             ??_getShutterStatusByte1 003E               ??_getShutterStatusByte2 003E  
                  _commandShutterDown 0A74                    _commandShutterStop 08B6  
                      ??_initProtocol 003B                             ??_low_isr 0200  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8       shutterDirectionUp@shutternumber 003B  
                  getShutterstatus@sp 003B                       __CFG_HFOFST$OFF 000000  
                 ?_commandShutterDown 0025               shutterOff@shutternumber 003B  
                 ?_commandShutterStop 0025                          _decodeButton 092C  
                          __accesstop 0060               __end_of__initialization 0FA0  
          __size_of_testeMasterTaster 0036                         ___rparam_used 000001  
                      ??_buttonsReset 0043         __size_of_shutterDirectionDown 004E  
                          _bStoreDone 0011                        __pcstackCOMRAM 0025  
                 __size_ofi2_fifo3Get 001A                  ??_commandShutterDown 003B  
                   __end_of_i2cParser 032E                  ??_commandShutterStop 0041  
                __end_of_initI2CSlave 0CE0                     eepromRead@address 003B  
                   ?_initButtonMatrix 0025               ?_handleShutterShortMove 0025  
releaseShuttergroupButton@buttonIndex 0042            __size_of_storeShutterGroup 0034  
                  ??_initButtonMatrix 003B                            __pbssBANK0 0060  
                          __pbssBANK1 0100                    __size_of_initRS485 0016  
       commandShutterUp@shutternumber 003B                            _debugCount 00F3  
                          _fifo1Empty 1126                            _fifo2Empty 10F2  
                          _fifo3Empty 10BE                ??_readShutterGroupByte 003D  
                   ?_getShutterstatus 0025               ?_findShuttergroupButton 0025  
                    _setKeyForShutter 11BE                  byteReceived@checksum 0044  
            storeShutterGroup@bitmask 003D                     ?_getKeyForShutter 0025  
            storeShutterGroup@keyDown 003F                    ??_getShutterstatus 003B  
             _commandShutterGroupDown 0D66                               ?___wmul 003B  
               __end_of_testCommandOk 0FDA                    ??_getKeyForShutter 003C  
                             ?_fehler 003B                               _CM1CON0 000F79  
                             _CM2CON0 000F78           __end_of_shutterStateMachine 0534  
           __size_of_commandShutterUp 006A                            _eepromRead 11E2  
                __end_of_byteReceived 0B46        __end_of_handleShutterShortMove 0DEA  
                           ?_fifo1Get 0025                             ?_fifo2Get 0025  
                           ?_fifo3Get 0025                  __end_of_initHardware 0C00  
                           ?_fifo1Put 0025                             ?_fifo2Put 0025  
                           ?_fifo3Put 0025                    initI2CSlave@adress 003B  
                             i2u97_40 11A4                               _SSP2ADD 000F6E  
                             _SSP2BUF 000F6F                               _SSP2MSK 000F6A  
                  __size_of_shutterOn 003A                             ?_high_isr 0025  
                      _lastPressedKey 0015        __end_of_findShuttergroupButton 0D24  
          __end_of_shutterDirectionUp 0C4E                               __Hparam 0000  
                             __Lparam 0000                  commandShutterDown@sp 003C  
               __end_of_testShortMove 0E9E                  __end_of_initProtocol 1210  
                     __size_of___wmul 0026                       __size_of_fehler 000C  
                   __end_of_initRS485 11BE                               __pcinit 0F7C  
                             _fifo1In 0008                               _fifo2In 0007  
                             _fifo3In 0006                               __ramtop 0600  
                             __ptext0 0658                               __ptext1 0F12  
                             __ptext2 032E                               __ptext3 0E9E  
                             __ptext4 0ED8                               __ptext5 0C00  
                             __ptext6 0C4E                               __ptext7 0B46  
                             __ptext8 1210                               __ptext9 11A8  
                           _T0CONbits 000FD5                             _T1CONbits 000FCD  
             __size_of_getNumShutters 0004                               _buttons 0100  
                __end_of_buttonsReset 083A                          ??i2_fifo3Get 0025  
                          ??_fifo1Get 003B                            ??_fifo2Get 003B  
                          ??_fifo3Get 003B                            ??_fifo1Put 0025  
                          ??_fifo2Put 0025                            ??_fifo3Put 003B  
                             _spiData 0060                               _low_isr 0018  
                          fifo1Put@in 0027                            fifo2Put@in 0027  
                             _upState 0014                            fifo3Put@in 003D  
           readShutterGroupByte@which 003C                               _shutter 0016  
                          ??_high_isr 0028                        __pintcode_body 0534  
                end_of_initialization 0FA0                         __Lmediumconst 0000  
                             int_func 0534                           ?_fifo1Empty 0025  
                         ?_fifo2Empty 0025                           ?_fifo3Empty 0025  
        findShuttergroupButton@button 003C             ??_commandShutterGroupDown 003E  
                          _spiCommand 000F            readShutterGroupByte@number 003D  
                             postdec2 000FDD                 __size_of_initI2CSlave 0044  
                  __end_ofi2_fifo3Get 118E                               postinc0 000FEE  
                             postinc2 000FDE                     __end_of_shutterOn 0ED8  
            commandShutterGroupDown@g 003F                 testCommandOk@numBytes 003E  
                           _PORTAbits 000F80                             _PORTDbits 000F83  
      __size_of_commandShutterGroupUp 0042                           ?_eepromRead 0025  
       __end_of_commandShutterGroupUp 0D66        __size_of_getShutterStatusByte1 003C  
      __size_of_getShutterStatusByte2 003C         __end_of_getShutterStatusByte1 0E62  
       __end_of_getShutterStatusByte2 0E26                             _TRISDbits 000F95  
    __size_of_initShutterStateMachine 0062              __size_of_initButtonTimer 006C  
         handleShutterShortMove@group 0040                            _shutterOff 0ED8  
                   initButtonMatrix@c 003B                     initButtonMatrix@i 003C  
                       ??_eepromWrite 003C                          _initI2CSlave 0C9C  
          testShortMove@shutternumber 003D            ?_releaseShuttergroupButton 0025  
               __size_of_byteReceived 0068                        __end_of___wmul 1026  
                         _BAUDCONbits 000FB8                        __end_of_fehler 11FE  
               __size_of_initHardware 0058          __end_of_shutterDirectionDown 0C9C  
                           _i2cParser 00F2                      _commandShutterUp 0A0A  
                 setKeyForShutter@key 003D                   __size_of_fifo1Empty 001A  
     __end_of_commandShutterGroupDown 0DA8                   __size_of_fifo2Empty 001A  
                 __size_of_fifo3Empty 001A                   start_initialization 0F7C  
            __end_of_setKeyForShutter 11D0                storeShutterGroup@keyUp 003E  
               __size_of_initProtocol 0008                          _byteReceived 0ADE  
                 __size_of_eepromRead 0010             __size_of_initButtonMatrix 0024  
                        _initHardware 0BA8   handleShuttergroupButton@buttonIndex 0040  
                 __end_of_eepromWrite 1000                              ??___wmul 003F  
            _handleShuttergroupButton 1140                              ??_fehler 003C  
               shutterStateMachine@sp 003F           __size_of_commandShutterDown 006A  
         __size_of_commandShutterStop 0076                 __size_of_buttonsReset 00C4  
              commandShutterGroupUp@g 003F                            ?_i2cParser 0025  
                      _getNumShutters 1210             __size_of_getShutterstatus 007C  
                         __pbssCOMRAM 0001             __size_of_getKeyForShutter 000A  
                       __pcstackBANK0 00F7                         __pcstackBANK2 0200  
   shutterDirectionDown@shutternumber 003B                          _initProtocol 1208  
              getShutterStatusByte1@i 0041                getShutterStatusByte2@i 0041  
              getShutterStatusByte1@r 0040                getShutterStatusByte2@r 0040  
                   __size_of_fifo1Get 001A                           ?_shutterOff 0025  
                   __size_of_fifo2Get 001A                     __size_of_fifo3Get 001A  
                   __size_of_fifo1Put 001E                     __size_of_fifo2Put 001E  
                   __size_of_fifo3Put 001E                         byteReceived@b 0046  
                   __size_of_high_isr 0650                     ??_initButtonTimer 003B  
                       ?i2_fifo3Empty 0025                          _buttonsReset 0776  
       __size_of_readShutterGroupByte 0012                             __pintcode 0008  
                         __pintcodelo 0018                    _shutterDirectionUp 0C00  
              __end_of_getNumShutters 1214                             _initRS485 11A8  
                           _downState 0013                   ?_shutterDirectionUp 0025  
             _initShutterStateMachine 0B46                              ?_low_isr 0025  
                       _bSceneChanged 0012          __size_of_shutterStateMachine 0206  
          commandShutterGroupUp@group 003E                             _myCounter 000A  
              __size_of_testCommandOk 002C                    eepromWrite@address 003C  
                      ___wmul@product 003F                        ??i2_fifo3Empty 0025  
                            _LATAbits 000F89                              _LATBbits 000F8A  
                            _LATCbits 000F8B                          ??_fifo1Empty 003B  
                            _LATDbits 000F8C                          ??_fifo2Empty 003B  
                        ??_fifo3Empty 003B                           _eepromWrite 0FDA  
                            _IPR1bits 000F9F                              _PIE1bits 000F9D  
                            _IPR3bits 000FA5                              _PIE3bits 000FA3  
     commandShutterDown@shutternumber 003B                  _shutterDirectionDown 0C4E  
                ??_shutterDirectionUp 003B                              i2u253_40 05D6  
                            _PIR1bits 000F9E                              i2u258_40 05F4  
                            _PIR3bits 000FA4                              _RCONbits 000FD0  
                    __CFG_WDTPS$32768 000000               decodeButton@buttonIndex 0042  
                           _testLevel 000B                              _SSP2CON1 000F6C  
                            _SSP2CON2 000F6B                              _SSP2CON3 000F69  
                            _SSP2STAT 000F6D                   __size_of_shutterOff 003A  
             handleShutterShortMove@g 0041                       ?_getNumShutters 0025  
                           _shutterOn 0E9E                     ___wmul@multiplier 003B  
                         ??_i2cParser 0044                          ??_eepromRead 003B  
                          ?_initRS485 0025                      initButtonTimer@i 003B  
                  __end_of_fifo1Empty 1140                    __end_of_fifo2Empty 110C  
                  __end_of_fifo3Empty 10D8                __size_of_testShortMove 003C  
                         _INTCON2bits 000FF1          commandShutterGroupDown@group 003E  
                       ?_decodeButton 0025                       fehler@lastState 003D  
               ?_shutterDirectionDown 0025                            _EECON1bits 000FA6  
            __end_of_commandShutterUp 0A74                       fehler@modUpDown 003C  
                            __Hrparam 0000           ??_releaseShuttergroupButton 0042  
                    _initButtonMatrix 1026                              __Lrparam 0000  
                  __end_of_eepromRead 11F2                         _testCommandOk 0FAE  
            ??_handleShutterShortMove 0040                          _bButtonTimer 00F6  
                          ?_shutterOn 0025             ??_initShutterStateMachine 003B  
                    _getShutterstatus 083A                      _getKeyForShutter 11FE  
                            _fifo1Get 110C                              _fifo2Get 10D8  
                            _fifo3Get 10A4                              _fifo1Out 0005  
                            _fifo1Put 1086                              _fifo2Out 0004  
                            _fifo2Put 1068                              _fifo3Out 0003  
                            _fifo3Put 104A                     ?_setKeyForShutter 003D  
               _commandShutterGroupUp 0D24                      __size_of_low_isr 00D6  
                            __ptext10 1208                              __ptext11 0C9C  
                            __ptext20 0FDA                              __ptext12 0BA8  
                            __ptext21 0DEA                              __ptext13 099E  
                            __ptext30 1000                              __ptext22 0E26  
                            __ptext14 00F2                              __ptext31 10D8  
                            __ptext23 083A                              __ptext15 0FAE  
                            __ptext40 0D66                              __ptext32 10F2  
                            __ptext24 1214                              __ptext16 104A  
                            __ptext41 0A74                              __ptext33 110C  
                            __ptext25 11FE                              __ptext17 0F48  
                            __ptext42 0CE0                              __ptext34 1126  
                            __ptext26 10A4                              __ptext18 11BE  
                            __ptext51 1174                              __ptext43 0776  
                            __ptext35 0ADE                              __ptext27 10BE  
                            __ptext19 1026                              __ptext52 118E  
                            __ptext44 115A                              __ptext36 092C  
                            __ptext28 08B6                              __ptext53 1068  
                            __ptext45 0DA8                              __ptext37 1140  
                            __ptext29 11F2                              __ptext54 1086  
                            __ptext46 0E62                              __ptext38 0D24  
                            __ptext47 11D0                              __ptext39 0A0A  
                            __ptext48 11E2                 _getShutterStatusByte1 0E26  
               _getShutterStatusByte2 0DEA              ??_findShuttergroupButton 003C  
                  ??_setKeyForShutter 003E                              _high_isr 0008  
                        _SSP2CON1bits 000F6C                          _SSP2CON2bits 000F6B  
                      ??_decodeButton 0041              ?_commandShutterGroupDown 0025  
     commandShutterStop@shutternumber 0041                         __size_of_main 011E  
          ??_handleShuttergroupButton 0040               findShuttergroupButton@i 003D  
                        fehler@updown 003E                              fehler@ls 003B  
                            _spiCount 000E                              _spiState 0010  
                       _testShortMove 0E62                              int$flags 0048  
                      ?_testCommandOk 0025                     _getLastPressedKey 1214  
                            main@recv 00F7                          _SSP2STATbits 000F6D  
            shutterStateMachine@which 003E                    ?_getLastPressedKey 0025  
                __end_ofi2_fifo3Empty 11A8                           ??_initRS485 003B  
                          _INTCONbits 000FF2             _releaseShuttergroupButton 115A  
                     _initButtonTimer 099E                   ??_getLastPressedKey 003B  
               getShutterstatus@which 003D                          ??_shutterOff 003B  
                            intlevel1 0000                              intlevel2 0000  
             getKeyForShutter@shutter 003C                           _spiChecksum 000D  
              shutterOn@shutternumber 003B              initShutterStateMachine@i 003C  
              ??_shutterDirectionDown 003B       __end_of_initShutterStateMachine 0BA8  
                          _RCSTA1bits 000FAB                         buttonsReset@i 0044  
                          _OSCCONbits 000FD3                   _shutterStateMachine 032E  
                      ?_testShortMove 0025            __end_of_commandShutterDown 0ADE  
           __end_of_getLastPressedKey 1218            __end_of_commandShutterStop 092C  
                  __end_of_shutterOff 0F12       __size_of_handleShutterShortMove 0042  
                         ??_shutterOn 003B                ?_commandShutterGroupUp 0025  
        __end_of_readShutterGroupByte 11E2               setKeyForShutter@shutter 003E  
                ?_shutterStateMachine 0025                ?_getShutterStatusByte1 0025  
              ?_getShutterStatusByte2 0025       __size_of_findShuttergroupButton 0044  
                   __CFG_FOSC$INTIO67 000000                          ?_eepromWrite 003B  
                     ??_testCommandOk 003E                      ??_getNumShutters 003B  
